
Date: 2 Auguest,2025


What pitfalls do these questions contain? And what topic should I study/remember to solve these questions in a exam?

### ржкрж┐ржЯржлрж▓ржЧрзБрж▓рж┐ (Pitfalls) ржПржмржВ ржХрзА ржЕржзрзНржпржпрж╝ржи ржХрж░ржмрзЗржи:

#### 1. ржкрж▓рж┐ржорж░ржлрж┐ржЬржо ржПржмржВ ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ (Polymorphism & Type Casting)
   - ржкрзНрж░рж╢рзНржи 1-ржП `Animal horse = new Horse();` ржПрж░ ржорж╛ржзрзНржпржорзЗ ржкрж▓рж┐ржорж░ржлрж┐ржЬржо ржжрзЗржЦрж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржПржЦрж╛ржирзЗ `horse` рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЯрж┐ `Animal` ржЯрж╛ржЗржкрзЗрж░ рж╣рж▓рзЗржУ ржПржЯрж┐ `Horse` ржЕржмржЬрзЗржХрзНржЯржХрзЗ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред ржХрж┐ржирзНрждрзБ `Animal` ржХрзНрж▓рж╛рж╕рзЗ `ride()` ржорзЗржержб ржирзЗржЗ, рждрж╛ржЗ рж╕рж░рж╛рж╕рж░рж┐ `horse.ride()` ржХрж▓ ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ред ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ (`(Horse)horse`) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ `ride()` ржорзЗржержб ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рждрзЗ рж╣ржмрзЗред
   - ржоржирзЗ рж░рж╛ржЦржмрзЗржи: 
     - ржкрзНржпрж╛рж░рзЗржирзНржЯ ржХрзНрж▓рж╛рж╕рзЗрж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржжрж┐ржпрж╝рзЗ ржЪрж╛ржЗрж▓рзНржб ржХрзНрж▓рж╛рж╕рзЗрж░ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржпрж╝, ржХрж┐ржирзНрждрзБ ржЪрж╛ржЗрж▓рзНржб ржХрзНрж▓рж╛рж╕рзЗрж░ рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ ржорзЗржержб ржХрж▓ ржХрж░рждрзЗ ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ ржкрзНрж░ржпрж╝рзЛржЬржиред
     - `instanceof` ржЪрзЗржХ ржХрж░рзЗ ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ ржХрж░рж╛ ржирж┐рж░рж╛ржкржжред

#### 2. ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржПржмржВ ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржорзЗржержб (Default & Abstract Methods in Interfaces)
   - ржкрзНрж░рж╢рзНржи 2-ржП `X2` ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ `X1`-ржПрж░ ржбрж┐ржлрж▓рзНржЯ ржорзЗржержб `print()`-ржХрзЗ ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ рж╣рж┐рж╕рзЗржмрзЗ рж░рж┐ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рзЗред ржПржЯрж┐ ржмрзИржз, ржХрж╛рж░ржг ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржЕржирзНржп ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржорзЗржержбржХрзЗ ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржХрж░рзЗ ржУржнрж╛рж░рж░рж╛ржЗржб ржХрж░рждрзЗ ржкрж╛рж░рзЗред
   - ржкрзНрж░рж╢рзНржи 3-ржП `Workable` ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ `abstract` ржмрж╛ ржХржВржХрзНрж░рж┐ржЯ ржХрзНрж▓рж╛рж╕рзЗ `work()` ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗред
   - ржоржирзЗ рж░рж╛ржЦржмрзЗржи:
     - ржбрж┐ржлрж▓рзНржЯ ржорзЗржержб ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗ ржмржбрж┐ рж╕рж╣ ржерж╛ржХрзЗ, ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржорзЗржержбрзЗ ржирзЗржЗред
     - ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ ржпржжрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рзЗ, рждржмрзЗ рж╕ржм ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ (ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржХрзНрж▓рж╛рж╕ рж╣рж▓рзЗ ржмрзНржпрждрж┐ржХрзНрж░ржо)ред

#### 3. `java.time` API (LocalDate, LocalTime, Period, DateTimeFormatter)
   - ржкрзНрж░рж╢рзНржи 4тАУ16 ржкрж░рзНржпржирзНржд `java.time` ржкрзНржпрж╛ржХрзЗржЬрзЗрж░ ржХрзНрж▓рж╛рж╕ржЧрзБрж▓рж┐ (ржпрзЗржоржи `LocalDate`, `Period`, `DateTimeFormatter`) ржирж┐ржпрж╝рзЗ ржкрзНрж░рж╢рзНржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
     - `LocalDate.parse()` ржПржмржВ `LocalDate.of()` ржПрж░ ржкрж╛рж░рзНржержХрзНржпред
     - `Period` ржХрзНрж▓рж╛рж╕рзЗ `ofYears()`, `ofMonths()`, `ofDays()` ржорзЗржержбржЧрзБрж▓рж┐ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржиржпрж╝ ржПржмржВ ржЪрзЗржЗржи ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ (ржкрзНрж░рж╢рзНржи 10)ред
     - `LocalTime.MAX` = `23:59:59.999999999` (ржкрзНрж░рж╢рзНржи 14)ред
     - `DateTimeFormatter` ржкрзНржпрж╛ржХрзЗржЬржЯрж┐ `java.time.format`-ржП рж░ржпрж╝рзЗржЫрзЗ (ржкрзНрж░рж╢рзНржи 16)ред
   - ржоржирзЗ рж░рж╛ржЦржмрзЗржи:
     - `LocalDate` ржПржмржВ `LocalTime` ржЗржорж┐ржЙржЯрзЗржмрж▓ (immutable), рждрж╛ржЗ ржорзЗржержбржЧрзБрж▓рж┐ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ (ржпрзЗржоржи `date.plusDays(1)`)ред
     - `Period` ржПржмржВ `Duration` ржПрж░ ржкрж╛рж░рзНржержХрзНржп (Period = ржмржЫрж░/ржорж╛рж╕/ржжрж┐ржи, Duration = рж╕рзЗржХрзЗржирзНржб/ржирзНржпрж╛ржирзЛрж╕рзЗржХрзЗржирзНржб)ред

#### 4. ржПржХрзНрж╕рзЗржкрж╢ржи рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (Exception Handling)
   - ржкрзНрж░рж╢рзНржи 18тАУ22-ржП ржПржХрзНрж╕рзЗржкрж╢ржи рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржирж┐ржпрж╝рзЗ ржкрзНрж░рж╢рзНржи:
     - `finally` ржмрзНрж▓ржХ рж╕рж░рзНржмржжрж╛ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржпрж╝, ржПржоржиржХрж┐ ржПржХрзНрж╕рзЗржкрж╢ржи рж╣рж▓рзЗржУ (ржкрзНрж░рж╢рзНржи 18)ред
     - `StackOverflowError` ржПржХржЯрж┐ `Error`, ржпрж╛ `Exception` ржиржпрж╝ (ржкрзНрж░рж╢рзНржи 21)ред
     - ржЪрзЗржХржб ржПржХрзНрж╕рзЗржкрж╢ржи (ржпрзЗржоржи `IOException`) ржХрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржмрж╛ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи 19, 20)ред
   - ржоржирзЗ рж░рж╛ржЦржмрзЗржи:
     - `try-catch-finally` ржмрзНрж▓ржХрзЗрж░ ржЕрж░рзНржбрж╛рж░ред
     - `catch` ржмрзНрж▓ржХрзЗ рж╕рзБржкрж╛рж░ржХрзНрж▓рж╛рж╕ (`Exception`) ржЖржЧрзЗ рж▓рж┐ржЦрж▓рзЗ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ (`IOException`) unreachable рж╣ржпрж╝ред

#### 5. ржЕрзНржпрж╛рж░рзЗ ржПржмржВ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ (Array & Static Variables)
   - ржкрзНрж░рж╢рзНржи 17-ржП `arr` ржЕрзНржпрж╛рж░рзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржирж╛ ржХрж░рж▓рзЗ `null` рж╣ржпрж╝, ржлрж▓рзЗ `NullPointerException` ржШржЯрзЗред
   - ржкрзНрж░рж╢рзНржи 23-ржП рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ `d1`-ржПрж░ ржорж╛ржи `null` рж╣ржУржпрж╝рж╛ржпрж╝ `NullPointerException` рж╣ржпрж╝ (ржХрзНрж▓рж╛рж╕ рж▓рзЛржбрж┐ржВржпрж╝рзЗрж░ рж╕ржоржпрж╝)ред
   - ржоржирзЗ рж░рж╛ржЦржмрзЗржи:
     - ржЕрзНржпрж╛рж░рзЗ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж▓рзЗ ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ `null` рж╣ржпрж╝ (ржкрзНрж░рж┐ржорж┐ржЯрж┐ржн ржЯрж╛ржЗржк ржирж╛ рж╣рж▓рзЗ)ред
     - рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЧрзБрж▓рж┐ ржХрзНрж▓рж╛рж╕ рж▓рзЛржбрж┐ржВржпрж╝рзЗрж░ рж╕ржоржпрж╝ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ рж╣ржпрж╝ред

---

### ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржЯрж┐ржкрж╕:
1. ржкрж▓рж┐ржорж░ржлрж┐ржЬржо ржПржмржВ ржХрж╛рж╕рзНржЯрж┐ржВ: рж╕ржмрж╕ржоржпрж╝ ржЪрзЗржХ ржХрж░рзБржи рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЯрж╛ржЗржк ржПржмржВ ржЕрзНржпрж╛ржХржЪрзБржпрж╝рж╛рж▓ ржЕржмржЬрзЗржХрзНржЯ ржЯрж╛ржЗржк ржХрзАред
2. ржЗржирзНржЯрж╛рж░ржлрзЗрж╕: ржбрж┐ржлрж▓рзНржЯ ржорзЗржержб ржУржнрж╛рж░рж░рж╛ржЗржбрзЗрж░ ржирж┐ржпрж╝ржоржЧрзБрж▓рж┐ ржмрзБржЭрзБржиред
3. `java.time` API: `LocalDate`, `Period`, `DateTimeFormatter`-ржПрж░х╕╕чФи ржорзЗржержбржЧрзБрж▓рж┐ (ржпрзЗржоржи `plusDays()`, `isBefore()`) ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рзБржиред
4. ржПржХрзНрж╕рзЗржкрж╢ржи: ржЪрзЗржХржб vs ржЖржиржЪрзЗржХржб ржПржХрзНрж╕рзЗржкрж╢ржи, `finally`-ржПрж░ ржЖржЪрж░ржгред
5. ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржПрж░рж░: `NullPointerException`, `ArrayIndexOutOfBoundsException`-ржПрж░ рж╕рж╛ржзрж╛рж░ржг ржХрж╛рж░ржгржЧрзБрж▓рж┐ ржЬрж╛ржирзБржиред

ржПржЗ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ рж░рж┐ржнрж┐рж╢ржи ржжрж┐рж▓рзЗ ржЖржкржирж┐ OCA ржкрж░рзАржХрзНрж╖рж╛ржпрж╝ ржПржЗ ржзрж░ржирзЗрж░ ржкрзНрж░рж╢рзНржи рж╕рж╣ржЬрзЗржЗ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи! ЁЯЪА


01. interface Rideable {
      void ride(String name);
    }

    class Animal {}

    class Horse extends Animal implements Rideable {
     public void ride(String name) {
      System.out.println(name.toUpperCase() + тАЭ IS RIDING THE HORSEтАЭ);
    }}

    public class Test {
    public static void main(String[] args) {
    Animal horse = new Horse();
    /*INSERT*/
    }}

    Which of the following options, if used to replace /*INSERT*/, will compile successfully and on execution will print EMMA IS RIDING THE HORSE on to the console?
    Select ALL that apply.

    horse.ride("EMMA");
    (Horse)horse.ride("EMMA");
    ((Horse)horse).ride("Emma");
    ((Rideable)(Horse)horse).ride("EMMA");
    ((Rideable)horse).ride("emma");
    ((Horse)(Rideable)horse).ride("emma");





    Ans:
    Animal ржХрзНрж▓рж╛рж╕ ржПржмржВ Rideable ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ ржоржзрзНржпрзЗ ржХрзЛржирзЛ рж╕рж░рж╛рж╕рж░рж┐ ржпрзЛржЧрж╕рзВрждрзНрж░ ржирж╛ ржерж╛ржХрж▓рзЗржУ, Horse ржХрзНрж▓рж╛рж╕ржЯрж┐ ржЙржнржпрж╝ржХрзЗржЗ рж╕ржВржпрзБржХрзНржд ржХрж░рзЗ ржПржХржЯрж┐ ржкрж▓рж┐ржорж░ржлрж┐ржХ (polymorphic) рж╕ржорзНржкрж░рзНржХ рждрзИрж░рж┐ ржХрж░рзЗред 
    ржПржЗ рж╕ржорзНржкрж░рзНржХрзЗрж░ ржХрж╛рж░ржгрзЗржЗ main ржорзЗржержбрзЗ Animal ржЯрж╛ржЗржкрзЗрж░ ржПржХржЯрж┐ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ (horse) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ Horse ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ride ржорзЗржержбржЯрж┐ ржХрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ (type casting) ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝ред
    
    Last 4 points




02.interface X1 {
    default void print() {
    System.out.println(тАЬX1тАЭ);
    }
    }

    interface X2 extends X1 {
    void print();
    }

    interface X3 extends X2 {
    default void print() {
    System.out.println(тАЬX3тАЭ);
    }
    }

    class X implements X3 {}

    public class Test {
    public static void main(String[] args) {
    X1 obj = new X();
    obj.print();
    }
    }

    Which of the following statements is correct?

    interface X1 fails to compile
    interface X2 fails to compile
    interface X3 fails to compile
    class X fails to compile
    class Test fails to compile
    class Test compiles successfully and on execution prints X3 on to the console



    Explanation_01:
        ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ default ржорзЗржержбржХрзЗ ржЕржирзНржп ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕, ржпрж╛ ржПржЯрж┐ржХрзЗ ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рзЗ, рждрж╛рждрзЗ abstract ржорзЗржержб рж╣рж┐рж╕рзЗржмрзЗ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ?
    Ans: 
        ржпржЦржи ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржЕржирзНржп ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржХрзЗ ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рзЗ, рждржЦржи рждрж╛рж░ ржХрж╛ржЫрзЗ `default` ржорзЗржержбржЯрж┐ржХрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп рждрж┐ржиржЯрж┐ ржмрж┐ржХрж▓рзНржк ржерж╛ржХрзЗ:
        1.ржХрж┐ржЫрзБржЗ ржирж╛ ржХрж░рж╛:** ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржЯрж┐ `default` ржорзЗржержбржЯрж┐ржХрзЗ ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░рж╕рзВрждрзНрж░рзЗ ржкрж╛ржпрж╝ ржПржмржВ ржПрж░ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи (implementation) ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗред 
        ржпрзЗ ржХрзНрж▓рж╛рж╕ржЯрж┐ ржПржЗ ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржХрзЗ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░ржмрзЗ, рж╕рзЗржЯрж┐рж░ `default` ржорзЗржержбржЯрж┐ржХрзЗ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗред
        2.`default` ржорзЗржержбржЯрж┐ржХрзЗ ржкрзБржирж░рж╛ржпрж╝ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛:** ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗ `default` ржорзЗржержбржЯрж┐ржХрзЗ ржЖржмрж╛рж░ `abstract` рж╣рж┐рж╕рзЗржмрзЗ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ ржпрж╛ржпрж╝ред 
        ржПрж░ ржлрж▓рзЗ, ржпрзЗ ржХрзНрж▓рж╛рж╕ржЯрж┐ ржПржЗ ржирждрзБржи ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржХрзЗ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░ржмрзЗ, рж╕рзЗржЯрж┐ржХрзЗ ржЕржмрж╢рзНржпржЗ рж╕рзЗржЗ ржорзЗржержбржЯрж┐рж░ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ рж╣ржмрзЗред ржПржЯрж┐ ржорзВрж▓ржд ржПржХржЯрж┐ `default` ржорзЗржержбрзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржЖржЪрж░ржгржХрзЗ ржмрж╛рждрж┐рж▓ ржХрж░рзЗ 
        ржПржмржВ ржПржЯрж┐ржХрзЗ ржПржХржЯрж┐ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржирзЗ ржкрж░рж┐ржгржд ржХрж░рзЗред
        3. `default` ржорзЗржержбржЯрж┐ржХрзЗ ржУржнрж╛рж░рж░рж╛ржЗржб ржХрж░рж╛:** ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржЯрж┐ `default` ржорзЗржержбрзЗрж░ ржирж┐ржЬрж╕рзНржм ржПржХржЯрж┐ ржирждрзБржи `default` ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗ, ржпрж╛ ржорзВрж▓ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржиржХрзЗ ржУржнрж╛рж░рж░рж╛ржЗржб ржХрж░рзЗред

    рж╕рзБрждрж░рж╛ржВ, ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржЕржирзБржпрж╛ржпрж╝рзА, ржПржХржЯрж┐ `default` ржорзЗржержбржХрзЗ ржЕржирзНржп ржПржХржЯрж┐ ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗ `abstract` ржорзЗржержб рж╣рж┐рж╕рзЗржмрзЗ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ рж╕ржорзНржкрзВрж░рзНржгрж░рзВржкрзЗ ржмрзИржзред 
    ржПрж░ ржлрж▓рзЗ, ржпрж╛рж░рж╛ ржирждрзБржи ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ рждрж╛ржжрзЗрж░ ржЬржирзНржп рж╕рзЗржЗ ржорзЗржержбржЯрж┐рж░ ржирж┐ржЬрж╕рзНржм ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи рждрзИрж░рж┐ ржХрж░рж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред

    Explanation_02:
        class X implements X3 {} ржХрзЗржи ржХрзЛржирзЛ ржПрж░рж░ ржжрзЗржЦрж╛ржЪрзНржЫрзЗ ржирж╛, ржпржжрж┐ржУ ржПржЯрж┐ X2 ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ abstract print() ржорзЗржержбржЯрж┐ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░ржЫрзЗ ржирж╛ред ржПрж░ ржХрж╛рж░ржг?
    Ans: 
        X3 ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржЯрж┐ X2-ржПрж░ abstract ржорзЗржержбржЯрж┐ржХрзЗ ржПржХржЯрж┐ ржбрж┐ржлрж▓рзНржЯ ржорзЗржержб ржжрж┐ржпрж╝рзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗ ржжрж┐ржпрж╝рзЗржЫрзЗред рждрж╛ржЗ, X ржХрзНрж▓рж╛рж╕ржХрзЗ print() ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ ржирж╛ред
        ржЬрж╛ржнрж╛рж░ ржирж┐ржпрж╝ржо ржЕржирзБржпрж╛ржпрж╝рзА, ржпржЦржи ржХрзЛржирзЛ ржХрзНрж▓рж╛рж╕ ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржХрзЗ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рзЗ ржПржмржВ рж╕рзЗржЗ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ ржХрзЛржирзЛ ржорзЗржержбрзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи ржерж╛ржХрзЗ, рждржЦржи ржХрзНрж▓рж╛рж╕ржЯрж┐ржХрзЗ рж╕рзЗржЗ ржорзЗржержбржЯрж┐ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝ ржирж╛ред

    Ans: class Test compiles successfully and on execution prints X3 on to the console


03.interface Workable {
        void work();
        }

        /*INSERT*/ {
        public void work() {} //Line n1
        }

        And the statements:
        1. abstract class Work implements Workable
        2. class Work implements Workable
        3. interface Work extends Workable
        4. abstract interface Work extends Workable
        5. abstract class Work

        How many statements can replace /*INSERT*/ such that there is no compilation error?

        One statement
        Two statements
        Three statements
        Four statements
        Five statements


        

Ans: 
ржжрзБржЯрж┐ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ:
abstract class Work implements Workable: ржПржХржЯрж┐ ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржХрзНрж▓рж╛рж╕ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ рж╕ржм ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржирж╛ ржХрж░рж▓рзЗржУ ржЪрж▓рзЗ, ржХрж┐ржирзНрждрзБ ржПржЦрж╛ржирзЗ work() ржорзЗржержбржЯрж┐ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ ржмрзИржзред
class Work implements Workable: ржПржХржЯрж┐ ржХржВржХрзНрж░рж┐ржЯ ржХрзНрж▓рж╛рж╕ржХрзЗ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕рзЗрж░ рж╕ржм ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж╣ржпрж╝ред
abstract class Work:


ржЕржирзНржпрж╛ржирзНржп ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рзЛ ржнрзБрж▓ ржХрж╛рж░ржг ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛, ржПржмржВ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕рзЗрж░ рж╕рж╛ржерзЗ implements Workable ржирж╛ ржерж╛ржХрж▓рзЗ work() ржорзЗржержбржЯрж┐ ржмрзИржз ржирзЯред
Output: 1,2,5

04.import java.time.LocalDate;

    public class Test {
    public static void main(String [] args) {
    LocalDate newYear = LocalDate.of(2018, 1, 1);
    LocalDate christmas = LocalDate.of(2018, 12, 25);
    boolean flag1 = newYear.isAfter(christmas);
    boolean flag2 = newYear.isBefore(christmas);
    System.out.println(flag1 + тАЬ:тАЭ + flag2);
    }
    }
    What will be the result of compiling and executing Test class?

    false:true
    true:false
    An exception is thrown at runtime
    Compilation error


Ans:
boolean flag1 = newYear.isAfter(christmas);: ржПржЦрж╛ржирзЗ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ newYear ржХрж┐ christmas-ржПрж░ ржкрж░рзЗрж░ рждрж╛рж░рж┐ржЦ? ржпрзЗрж╣рзЗрждрзБ 1рж▓рж╛ ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐ 25рж╢рзЗ ржбрж┐рж╕рзЗржорзНржмрж░рзЗрж░ ржкрж░рзЗрж░ рждрж╛рж░рж┐ржЦ ржиржпрж╝, рждрж╛ржЗ ржПржЯрж┐ false рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред
boolean flag2 = newYear.isBefore(christmas);: ржПржЦрж╛ржирзЗ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ newYear ржХрж┐ christmas-ржПрж░ ржЖржЧрзЗрж░ рждрж╛рж░рж┐ржЦ? ржпрзЗрж╣рзЗрждрзБ 1рж▓рж╛ ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐ 25рж╢рзЗ ржбрж┐рж╕рзЗржорзНржмрж░рзЗрж░ ржЖржЧрзЗрж░ рждрж╛рж░рж┐ржЦ, рждрж╛ржЗ ржПржЯрж┐ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред



05.import java.time.LocalDate;
    public class Test {
    public static void main(String [] args) {
    LocalDate date1 = LocalDate.parse(тАЬ1980-03-16тАЭ);
    LocalDate date2 = LocalDate.parse(тАЬ1980-03-16тА│);
    System.out.println(date1.equals(date2) + тАЭ : тАЭ + date1.isEqual(date2));
    }
    }
    What will be the result of compiling and executing Test class?

    true : false
    true : true
    false : true
    false : false



    Explanation:
date1.equals(date2): LocalDate ржХрзНрж▓рж╛рж╕рзЗрж░ equals() ржорзЗржержбржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ ржжрзБржЯрж┐рж░ ржорж╛ржи (value) рждрзБрж▓ржирж╛ ржХрж░рзЗред ржпрзЗрж╣рзЗрждрзБ date1 ржПржмржВ date2 ржПржХржЗ рждрж╛рж░рж┐ржЦрзЗрж░ ржкрзНрж░рждрж┐ржирж┐ржзрж┐рждрзНржм ржХрж░рзЗ, рждрж╛ржЗ ржПржЗ ржорзЗржержбржЯрж┐ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред
date1.isEqual(date2): isEqual() ржорзЗржержбржЯрж┐ржУ ржжрзБржЯрж┐ рждрж╛рж░рж┐ржЦ ржПржХржЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗред equals() ржПрж░ ржорждрзЛржЗ, ржпрзЗрж╣рзЗрждрзБ ржжрзБржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ рждрж╛рж░рж┐ржЦ ржПржХржЗ, ржПржЯрж┐ржУ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред


06. class MyLocalDate extends LocalDate {
    @Override
    public String toString() {
    return super.getDayOfMonth() + тАЬ-тАЭ
                    + super.getMonthValue() + тАЬ-тАЭ + super.getYear();
    }
    }

    public class Test {
    public static void main(String [] args) {
    MyLocalDate date = LocalDate.parse(тАЬ1980-03-16тАЭ);
    System.out.println(date);
    }
    }
    What will be the result of compiling and executing Test class?

    29296
    16-03-1980
    16-03-1980
    An exception is thrown at runtime
    Compilation error


Ans:
java.time.LocalDate ржХрзНрж▓рж╛рж╕ржЯрж┐ ржПржХржЯрж┐ final ржХрзНрж▓рж╛рж╕ред Java-рждрзЗ, ржПржХржЯрж┐ final ржХрзНрж▓рж╛рж╕ржХрзЗ ржЕржирзНржп ржХрзЛржирзЛ ржХрзНрж▓рж╛рж╕ ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕ржЯрзЗржирзНржб (extend) ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ред
ржЖржкржирж╛рж░ ржХрзЛржбрзЗ, class MyLocalDate extends LocalDate рж▓рж╛ржЗржиржЯрж┐ ржПржХржЯрж┐ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржПрж░рж░ рждрзИрж░рж┐ ржХрж░ржмрзЗ, ржХрж╛рж░ржг ржЖржкржирж┐ ржПржХржЯрж┐ final ржХрзНрж▓рж╛рж╕ржХрзЗ ржПржХрзНрж╕ржЯрзЗржирзНржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржЫрзЗржиред рждрж╛ржЗ, ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ржЗ рж╣ржмрзЗ ржирж╛ред


07.public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.parse(тАЬ1980-03-16тАЭ);
    System.out.println(date.minusYears(-5));
    }
    }
    What will be the result of compiling and executing Test class?

    27469
    3/16/1985
    Compilation error
    Runtime exception


    Ans:
minusYears(-5) ржПржХржЯрж┐ ржирзЗрждрж┐ржмрж╛ржЪржХ рж╕ржВржЦрзНржпрж╛ ржмрж┐ржпрж╝рзЛржЧ ржХрж░рзЗ, ржпрж╛ ржПржХржЯрж┐ ржзржирж╛рждрзНржоржХ рж╕ржВржЦрзНржпрж╛ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржорж╛ржиред рждрж╛ржЗ, 1980 рж╕рж╛рж▓рзЗрж░ 16ржЗ ржорж╛рж░рзНржЪрзЗрж░ рж╕рж╛ржерзЗ 5 ржмржЫрж░ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝, ржпрж╛рж░ ржлрж▓рзЗ рждрж╛рж░рж┐ржЦржЯрж┐ рж╣ржпрж╝ 1985 рж╕рж╛рж▓рзЗрж░ 16ржЗ ржорж╛рж░рзНржЪред
date.minusYears(-5): This line attempts to subtract -5 years from the date. Subtracting a negative number is equivalent to adding the positive number. So, itтАЩs essentially adding 5 years to the date.

08.mport java.time.LocalTime;

    public class Test {
    public static void main(String [] args) {
    LocalTime time = LocalTime.of(23, 60);
    System.out.println(time);
    }
    }
    What will be the result of compiling and executing Test class?

    1
    0
    0.000694444
    Compilation error
    An exception is thrown at runtime


Ans:
   `LocalTime.of(int hour, int minute)` ржорзЗржержбржЯрж┐ `LocalTime` ржХрзНрж▓рж╛рж╕рзЗрж░ ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рзЗред
    * `hour` ржПрж░ ржЬржирзНржп ржмрзИржз ржорж╛ржи рж╣рж▓рзЛ 0 ржерзЗржХрзЗ 23ред
    * `minute` ржмрж╛ `second`** ржПрж░ ржЬржирзНржп ржмрзИржз ржорж╛ржи рж╣рж▓рзЛ 0 ржерзЗржХрзЗ 59ред
    * `nanoOfSecond` ржПрж░ ржЬржирзНржп ржмрзИржз ржорж╛ржи рж╣рж▓рзЛ 0 ржерзЗржХрзЗ 999,999,999ред
        ржпржжрж┐ ржПржЗ ржорж╛ржиржЧрзБрж▓рзЛрж░ ржмрж╛ржЗрж░рзЗ ржХрзЛржирзЛ ржЕржмрзИржз ржорж╛ржи ржЖрж░рзНржЧрзБржорзЗржирзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗржУрзЯрж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ `java.time.DateTimeException` ржирж╛ржорзЗрж░ ржПржХржЯрж┐ ржмрзНржпрждрж┐ржХрзНрж░ржо (exception) рждрзИрж░рж┐ рж╣ржпрж╝ред
        **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖рзЯ:**
        * `LocalTime.of(int hour, int minute, int second)`
        * `LocalTime.of(int hour, int minute, int second, int nanoOfSecond)`
        ржПржЗ ржорзЗржержбржЧрзБрж▓рзЛржУ `LocalTime` ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

09.import java.time.Period;

    public class Test {
    public static void main(String [] args) {
    Period period = Period.of(0, 1000, 0);
    System.out.println(period);
    }
    }
    What will be the result of compiling and executing Test class?

    P0Y1000M0D
    p0y1000m0d
    P1000M
    p1000m

    Ans:
    Period ржХрзНрж▓рж╛рж╕рзЗрж░ `toString()` ржорзЗржержбржЯрж┐ ****ржпржЦржи ржПржХржЯрж┐ Period-ржПрж░ рж╕ржм component (ржмржЫрж░, ржорж╛рж╕, ржжрж┐ржи)/Period.of(0,0,0) рж╢рзВржирзНржп рж╣ржпрж╝, рждржЦржи toString() ржорзЗржержбржЯрж┐ P0D рж╕рзНржЯрзНрж░рж┐ржВржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗредред  
    ржПржЯрж┐ ржЫрж╛ржбрж╝рж╛, Period-ржПрж░ ржпрзЗ component-ржЧрзБрж▓рзЛрж░ (ржмржЫрж░, ржорж╛рж╕, ржжрж┐ржи) ржорж╛ржи рж╢рзВржирзНржп, рж╕рзЗржЧрзБрж▓рзЛржХрзЗ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржпрж╝ред
    `toString()` ржПрж░ ржлрж▓рж╛ржлрж▓ P ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржпрж╝ред 
    ржПрж░ ржкрж░рзЗ, ржпрзЗ ржмржЫрж░рзЗрж░ ржорж╛ржи рж╢рзВржирзНржп ржиржпрж╝, рждрж╛рж░ ржЬржирзНржп Y ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝; ржпрзЗ ржорж╛рж╕рзЗрж░ ржорж╛ржи рж╢рзВржирзНржп ржиржпрж╝, рждрж╛рж░ ржЬржирзНржп M ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝; ржПржмржВ ржпрзЗ ржжрж┐ржирзЗрж░ ржорж╛ржи рж╢рзВржирзНржп ржиржпрж╝, рждрж╛рж░ ржЬржирзНржп D ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝ред 
    P, Y, M ржПржмржВ D рж╕ржм ржмржбрж╝ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ (upper case) ржерж╛ржХрзЗред


    ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржмржЫрж░рзЗрж░ ржорж╛ржи 0 ржПржмржВ ржжрж┐ржирзЗрж░ ржорж╛ржи 0, рждрж╛ржЗ ржПржЧрзБрж▓рзЛ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржмрзЗред ржорж╛рж╕рзЗрж░ ржорж╛ржи 1000, ржпрж╛ ржЕ-рж╢рзВржирзНржпред
    рж╕рзБрждрж░рж╛ржВ, ржЖржЙржЯржкрзБржЯржЯрж┐ рж╣ржмрзЗ:
    -P ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржмрзЗред
    -1000M ржпрзЛржЧ рж╣ржмрзЗ (1000 ржорж╛рж╕)ред 
    -ржлрж▓рж╛ржлрж▓ рж╣ржмрзЗ P1000Mред

    **ржжрзНрж░рж╖рзНржЯржмрзНржп:** `Period.parse(CharSequence)` ржорзЗржержбржЯрж┐ тАЬPnYnMnDтАЭ ржлрж░ржорзНржпрж╛ржЯрзЗ String ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржЧрзНрж░рж╣ржг ржХрж░рзЗ, ржпрзЗржЦрж╛ржирзЗ P, Y, M ржПржмржВ D ржпрзЗржХрзЛржирзЛ case-ржПрж░ рж╣рждрзЗ ржкрж╛рж░рзЗред

10.import java.time.Period;

    public class Test {
    public static void main(String [] args) {
    Period period = Period.of(2, 1, 0).ofYears(10).ofMonths(5).ofDays(2);
    System.out.println(period);
    }
    }
    What will be the result of compiling and executing Test class?

    P12Y6M2D
    P2Y1M0D
    P2Y1M
    P2D

    Explanation:
    ржЬрж╛ржнрж╛ `java.time.Period` ржХрзНрж▓рж╛рж╕рзЗрж░ `ofYears()`, `ofMonths()`, ржПржмржВ `ofDays()` ржорзЗржержбржЧрзБрж▓рзЛ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржирзЯред 
    ржПржЧрзБрж▓рзЛ `Period` ржХрзНрж▓рж╛рж╕рзЗрж░ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржорзЗржержб (instance methods) ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ ржорзЗржержб ржПржХржЯрж┐ ржирждрзБржи `Period` ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред
    ржПржЗ ржорзЗржержбржЧрзБрж▓рзЛ ржЪрзЗржЗржирзЗржмрж▓ (chainable)ред

    ржПржЦрж╛ржирзЗ ржХрзЛржбржЯрж┐ ржмрж╛ржо ржерзЗржХрзЗ ржбрж╛ржирзЗ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржмрзЗ:
    1.  `Period.of(2, 1, 0)`: ржПржЯрж┐ ржПржХржЯрж┐ ржирждрзБржи `Period` ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ ржпрж╛рж░ ржорж╛ржи `P2Y1M`ред
    2.  `.ofYears(10)`: ржПржЗ ржорзЗржержбржЯрж┐ ржкрзВрж░рзНржмржмрж░рзНрждрзА `Period` ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЙржкрж░ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝ред ржПржЯрж┐ ржПржХржЯрж┐ ржирждрзБржи `Period` ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржпрж╛рж░ ржорж╛ржи рж╢рзБржзрзБржорж╛рждрзНрж░ `10` ржмржЫрж░ред ржПрж░ ржЖржЧрзЗрж░ рж╕ржм ржорж╛ржи (2 ржмржЫрж░, 1 ржорж╛рж╕) ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
    3.  `.ofMonths(5)`: ржПржЗ ржорзЗржержбржЯрж┐ ржкрзВрж░рзНржмржмрж░рзНрждрзА `Period` ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЙржкрж░ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝ (ржпрзЗржЯрж┐ `10` ржмржЫрж░)ред ржПржЯрж┐ ржЖржмрж╛рж░ ржПржХржЯрж┐ ржирждрзБржи `Period` ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржпрж╛рж░ ржорж╛ржи рж╢рзБржзрзБржорж╛рждрзНрж░ `5` ржорж╛рж╕ред `10` ржмржЫрж░ ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
    4.  `.ofDays(2)`: ржПржЗ ржорзЗржержбржЯрж┐ ржкрзВрж░рзНржмржмрж░рзНрждрзА `Period` ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЙржкрж░ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝ (ржпрзЗржЯрж┐ `5` ржорж╛рж╕)ред ржПржЯрж┐ ржЖржмрж╛рж░ ржПржХржЯрж┐ ржирждрзБржи `Period` ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржпрж╛рж░ ржорж╛ржи рж╢рзБржзрзБржорж╛рждрзНрж░ `2` ржжрж┐ржиред `5` ржорж╛рж╕ ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред

    рж╕рзБрждрж░рж╛ржВ, `period` ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржЪрзВржбрж╝рж╛ржирзНржд ржорж╛ржи рж╣ржмрзЗ ржПржоржи ржПржХржЯрж┐ `Period` ржЕржмржЬрзЗржХрзНржЯ ржпрзЗржЦрж╛ржирзЗ ржХрзЗржмрж▓ ржжрж┐ржи рзи ржЖржЫрзЗ ржПржмржВ ржмржЫрж░ ржУ ржорж╛рж╕рзЗрж░ ржорж╛ржи рж╢рзВржирзНржпред
    ржпржЦржи `System.out.println(period)` ржХрж▓ ржХрж░рж╛ рж╣ржмрзЗ, рждржЦржи ржПржЯрж┐ `Period.ofDays(2)` ржПрж░ ржлрж▓рж╛ржлрж▓ржХрзЗ ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗред `Period` ржПрж░ `toString()` ржорзЗржержбрзЗрж░ ржирж┐рзЯржо ржЕржирзБржпрж╛рзЯрзА:
    * P ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣ржмрзЗред
    * рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕ-рж╢рзВржирзНржп component ржЧрзБрж▓рзЛ ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗред ржПржЦрж╛ржирзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржжрж┐ржи рзи ржЖржЫрзЗред
    * рждрж╛ржЗ, ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ `P2D`ред




11.import java.time.LocalDate;

    public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.parse(тАЬ2000-06-25тАЭ);
    while(date.getDayOfMonth() >= 20) {
    System.out.println(date);
    date.plusDays(-1);
    }
    }
    }
    What will be the result of compiling and executing Test class?

    Compilation error
    An exception is thrown at runtime
    System.out.println(date);  is executed 6 times
    System.out.println(date);  is executed more than 6 times

    Answer: 
    date.plusDays(-1) ржорзЗржержбржЯрж┐ ржПржХржЯрж┐ ржирждрзБржи LocalDate ржЕржмржЬрзЗржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржпрзЗржЦрж╛ржирзЗ рждрж╛рж░рж┐ржЦрзЗрж░ ржорж╛ржи ржПржХржжрж┐ржи ржХржоред ржХрж┐ржирзНрждрзБ ржПржЗ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯржЯрж┐ржХрзЗ ржмрж░рзНрждржорж╛ржи date ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗ ржЕрзНржпрж╛рж╕рж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред
    date.plusDays(-1); // ржПржЯрж┐ ржПржХржЯрж┐ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ date ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗред

    рж╕ржарж┐ржХржнрж╛ржмрзЗ рждрж╛рж░рж┐ржЦрзЗрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ рж╣рж▓рзЗ ржХрзЛржбржЯрж┐ ржПржоржи рж╣ржУрзЯрж╛ ржЙржЪрж┐ржд ржЫрж┐рж▓:
    date = date.plusDays(-1); // ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯржЯрж┐ржХрзЗ date ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗ ржЕрзНржпрж╛рж╕рж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    ржпрзЗрж╣рзЗрждрзБ date ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржи 2000-06-25 ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХржЫрзЗ, рждрж╛ржЗ рж▓рзБржкрзЗрж░ рж╢рж░рзНржд date.getDayOfMonth() >= 20 (25 >= 20) рж╕рж░рзНржмржжрж╛ рж╕рждрзНржп рж╣ржмрзЗред

    ржлрж▓рж╕рзНржмрж░рзВржк, рж▓рзБржкржЯрж┐ ржХржЦржирзЛржЗ рж╢рзЗрж╖ рж╣ржмрзЗ ржирж╛ред


12.mport java.time.LocalDate;
    import java.time.format.DateTimeFormatter;

    public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.of(1987, 9, 1);
    String str = date.format(DateTimeFormatter.ISO_DATE_TIME);
    System.out.println(тАЬDate is: тАЭ + str);
    }
    }

    What will be the result of compiling and executing Test class?

    Date is: 1987-09-01
    Date is: 1987-01-09
    Date is: 01-09-1987
    Given code executes successfully but output does not match with the given options
    Runtime exception


 Answar:
LocalDate ржЕржмржЬрзЗржХрзНржЯрзЗ ржХрзЛржирзЛ рж╕ржоржпрж╝ (time part) ржерж╛ржХрзЗ ржирж╛, ржХрж┐ржирзНрждрзБ ISO_DATE_TIME ржлрж░ржорзНржпрж╛ржЯржЯрж┐ рж╕ржоржпрж╝ ржЦрзЛржБржЬрзЗред ржПржЗ ржХрж╛рж░ржгрзЗ, ржПржЯрж┐ рж░рж╛ржиржЯрж╛ржЗржорзЗ ржПржХржЯрж┐ exception рждрзИрж░рж┐ ржХрж░рзЗред
OCA ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржЖржкржирж┐ ржпрзЗ DateTimeFormatter ржЯрж╛ржЗржкржЧрзБрж▓рзЛ ржжрзЗржЦрзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЗржи, рж╕рзЗржЧрзБрж▓рзЛ рж╣рж▓рзЛ: BASIC_ISO_DATE, ISO_DATE, ISO_LOCAL_DATE, ISO_TIME, ISO_LOCAL_TIME, ISO_DATE_TIME, ISO_LOCAL_DATE_TIME.



13.import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;

    public class Test {
    public static void main(String [] args) {
    LocalDate date1 = LocalDate.parse(тАЬ1947-08-15тАЭ, DateTimeFormatter.ISO_DATE);
    LocalDate date2 = LocalDate.parse(тАЬ1947-08-15тА│, DateTimeFormatter.ISO_LOCAL_DATE);
    LocalDate date3 = LocalDate.of(1947, 8, 15);

    System.out.println(date1.equals(date2) + тАЭ : тАЭ + date2.equals(date3));
    }
    }
    What will be the result of compiling and executing Test class?

    true : true
    false : false
    true : false
    false : true
    Runtime exception


    Answer:
1.  `ISO_LOCAL_DATE`: ржПржЗ ржлрж░ржорзНржпрж╛ржЯрж╛рж░ржЯрж┐ ржЕржлрж╕рзЗржЯ (рж╕ржоржпрж╝ ржЕржЮрзНржЪрж▓рзЗрж░ ржкрж╛рж░рзНржержХрзНржп) ржЫрж╛ржбрж╝рж╛ржЗ рждрж╛рж░рж┐ржЦ ржлрж░ржорзНржпрж╛ржЯ ржХрж░рзЗ, ржпрзЗржоржи `"1947-08-15"`ред ржПржЯрж┐ рж╢рзБржзрзБ рждрж╛рж░рж┐ржЦрзЗрж░ рждржерзНржп ржжрзЗржЦрж╛ржпрж╝ред
2.  `ISO_DATE`: ржПржЗ ржлрж░ржорзНржпрж╛ржЯрж╛рж░ржЯрж┐ рждрж╛рж░рж┐ржЦржХрзЗ ржЕржлрж╕рзЗржЯ рж╕рж╣ ржлрж░ржорзНржпрж╛ржЯ ржХрж░рзЗ (ржпржжрж┐ ржЕржлрж╕рзЗржЯ ржерж╛ржХрзЗ), ржпрзЗржоржи `"1947-08-15"` ржЕржержмрж╛ `"1947-08-15+05:30"`ред
      рждржмрзЗ, ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ ржпрзЗ `LocalDate` ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржоржзрзНржпрзЗ ржХрзЛржирзЛ ржЕржлрж╕рзЗржЯ рждржерзНржп ржерж╛ржХрзЗ ржирж╛, рждрж╛ржЗ ржПржЯрж┐ ржХрзЗржмрж▓ `"1947-08-15"` ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗред
3.  "In this case, all the three date instances are meaningfully equal.": ржпржжрж┐ рждрж┐ржиржЯрж┐ ржнрж┐ржирзНржи ржбрзЗржЯ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕рзЗрж░ (ржпрзЗржоржи: `LocalDate`, `ZonedDateTime`, `OffsetDateTime`) рждрж╛рж░рж┐ржЦ ржПржХржЗ рж╣рзЯ, 
     рждржмрзЗ рждрж╛ржжрзЗрж░ ржорж╛ржиржЧржд ржжрж┐ржХ ржерзЗржХрзЗ рж╕ржорж╛ржи ржзрж░рж╛ ржпрж╛рзЯред ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржпржжрж┐ржУ рждрж╛ржжрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржПржмржВ ржЕржлрж╕рзЗржЯрзЗрж░ рждржерзНржп ржнрж┐ржирзНржи рж╣рждрзЗ ржкрж╛рж░рзЗ, ржХрж┐ржирзНрждрзБ рждрж╛рж░рж╛ ржПржХржЗ ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░ рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред
  OCA ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржЖржкржирж┐ ржпрзЗ DateTimeFormatter ржЯрж╛ржЗржкржЧрзБрж▓рзЛ ржжрзЗржЦрзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЗржи, рж╕рзЗржЧрзБрж▓рзЛ рж╣рж▓рзЛ: BASIC_ISO_DATE, ISO_DATE, ISO_LOCAL_DATE, ISO_TIME, ISO_LOCAL_TIME, ISO_DATE_TIME, ISO_LOCAL_DATE_TIME.


14. public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.parse(тАЬ1947-08-14тАЭ);
    LocalTime time = LocalTime.MAX;
    System.out.println(date.atTime(time));
    }
    }
    What will be the result of compiling and executing Test class?

    1947-08-14T23:59:59
    1947-08-14T23:59:59.999
    1947-08-14T23:59:59.999999999
    1947-08-14T23:59:59.0

    Answer:
LocalTime time = LocalTime.MAX;: LocalTime.MAX ржПржХржЯрж┐ ржзрзНрж░рзБржмржХ (constant) ржпрж╛ ржжрж┐ржирзЗрж░ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржорзНржнрж╛ржмрзНржп рж╕ржоржпрж╝ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред ржПрж░ ржорж╛ржи рж╣рж▓рзЛ: 23 ржШржирзНржЯрж╛, 59 ржорж┐ржирж┐ржЯ, 59 рж╕рзЗржХрзЗржирзНржб ржПржмржВ 999,999,999 ржирзНржпрж╛ржирзЛрж╕рзЗржХрзЗржирзНржбред
date.atTime(time): ржПржЗ ржорзЗржержбржЯрж┐ LocalDate ржПржмржВ LocalTime ржЕржмржЬрзЗржХрзНржЯ ржжрзБржЯрж┐ржХрзЗ ржПржХрждрзНрж░рж┐ржд ржХрж░рзЗ ржПржХржЯрж┐ LocalDateTime ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗред ржлрж▓рзЗ рждрж╛рж░рж┐ржЦ ржПржмржВ рж╕ржоржпрж╝ ржПржХрж╕рж╛ржерзЗ ржпрзБржХрзНржд рж╣ржпрж╝ред
System.out.println(...): ржпржЦржи LocalDateTime ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ рж╣ржпрж╝, рждржЦржи ржПрж░ ржбрж┐ржлрж▓рзНржЯ toString() ржорзЗржержбржЯрж┐ YYYY-MM-DDTHH:MM:SS.NNNNNNNNN ржлрж░ржорзНржпрж╛ржЯрзЗ ржЖржЙржЯржкрзБржЯ ржжрзЗрзЯред ржпрзЗрж╣рзЗрждрзБ LocalTime.MAX-ржП ржирзНржпрж╛ржирзЛрж╕рзЗржХрзЗржирзНржб рж░рзЯрзЗржЫрзЗ, рждрж╛ржЗ рждрж╛ ржЖржЙржЯржкрзБржЯрзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд рж╣ржмрзЗред
рж╕рзБрждрж░рж╛ржВ, ржЪрзВржбрж╝рж╛ржирзНржд ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ 1947-08-14T23:59:59.999999999ред
    LocalTime.MIN тАУ> {00:00},
    LocalTime.MAX тАУ> {23:59:59.999999999},
    LocalTime.MIDNIGHT тАУ> {00:00},
    LocalTime.NOON тАУ> {12:00}. 
    date.atTime(LocalTime) method creates a LocalDateTime instance by combining date and time parts.
    toString() method of LocalDateTime class prints the date and time parts separated by T in upper case.

15.Consider below code:
    //Test.java
    package com.skillcertpro.oca;

    import java.time.LocalDate;
    import java.time.Period;

    public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.parse(тАЬ2000-01-01тАЭ);
    Period period = Period.ofYears(-3000);
    System.out.println(date.plus(period));
    }
    }
    What will be the result of compiling and executing Test class?

    Answer:
    2000 ржерзЗржХрзЗ 3000 ржмржЫрж░ ржмрж┐ржпрж╝рзЛржЧ ржХрж░рж▓рзЗ ржпрзЗ ржмржЫрж░ржЯрж┐ ржЖрж╕ржмрзЗ, рж╕рзЗржЯрж┐ рж╣рж▓рзЛ 2000 - 3000 = -1000ред ржЬрж╛ржнрж╛рж░ java.time рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржирзЗрждрж┐ржмрж╛ржЪржХ ржмржЫрж░ржХрзЗ рж╕ржорж░рзНржержи ржХрж░рзЗ ржирж╛ред
    рж╕рзБрждрж░рж╛ржВ, date.plus(period) ржПржЗ ржЕржкрж╛рж░рзЗрж╢ржиржЯрж┐ ржПржХржЯрж┐ java.time.DateTimeException ржерзНрж░рзЛ ржХрж░ржмрзЗред
    ржЕрждржПржм, рж╕ржарж┐ржХ ржЙрждрзНрждрж░ рж╣рж▓рзЛ:An exception is thrown at runtime

    16.DateTimeFormatter is defined inside which package?

    java.time
    java.util
    java.text
    java.time.format


    answer:
    DateTimeFormatter is a part of тАЬjava.time.formatтАЭ package, whereas LocalDate, LocalTime, LocalDateTime and Period are defined inside тАЬjava.timeтАЭ package.

16.import java.time.LocalDate;
    public class Test {
    public static void main(String [] args) {
    LocalDate date = LocalDate.parse(тАЬ2020-08-31тАЭ);
    System.out.println(date.plusMonths(-6));
    }
    }

    What is the result?

    2020-02-31
    2020-02-30
    2/29/2020
    43889
    An exception is thrown at runtime
    Compilation error


    Ans:
    For the given code,
    2020-08-31 plus -6 months would subtract 6 months from the given date and would reslut in the invalid date 2020-02-31. Instead of returning an invalid result, the last valid day of the month, 2020-02-29, is returned.
    Please note, 2020 is leap year and hence last day of February is 29 and not 28.




17. public class Test {
    private static int [] arr;
    public static void main(String [] args) {
    if(arr.length > 0 && arr != null) {
    System.out.println(arr[0]);
    }
    }
    }
    Predict Output, if the above code is run with given command?
    java Test

    Compilation error
    No Output
    NullPointerException is thrown at runtime
    ArrayIndexOutOfBoundsException is thrown at runtime


    Explanation:
    1.  `private static int [] arr;`: ржПржЦрж╛ржирзЗ `arr` ржирж╛ржорзЗ ржПржХржЯрж┐ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржЕрзНржпрж╛рж░рзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржПржЯрж┐ржХрзЗ ржХрзЛржирзЛ ржорж╛ржи ржжрж┐ржпрж╝рзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред рж╕рзБрждрж░рж╛ржВ, `arr` ржПрж░ ржорж╛ржи `null`ред
    2.  `if(arr.length > 0 && arr != null)`: `if` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗрж░ ржПржЗ рж╢рж░рзНрждржЯрж┐ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝, ржЬрж╛ржнрж╛ ржмрж╛ржо ржерзЗржХрзЗ ржбрж╛ржи ржжрж┐ржХрзЗ ржорзВрж▓рзНржпрж╛ржпрж╝ржи (evaluation) ржХрж░рзЗред
        * ржкрзНрж░ржержорзЗ `arr.length > 0` ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржиржЯрж┐ ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржХрж░рж╛ рж╣ржмрзЗред
        * ржпрзЗрж╣рзЗрждрзБ `arr` ржПрж░ ржорж╛ржи `null`, `arr.length` ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж▓рзЗ `NullPointerException` ржерзНрж░рзЛ рж╣ржмрзЗред
        * ржЬрж╛ржнрж╛ `&&` (рж▓ржЬрж┐ржХрзНржпрж╛рж▓ AND) ржЕржкрж╛рж░рзЗржЯрж░рзЗрж░ рж╢рж░рзНржЯ-рж╕рж╛рж░рзНржХрж┐ржЯ ржЖржЪрж░ржг (short-circuit behavior) ржЕржирзБрж╕рж░ржг ржХрж░рзЗред ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ, ржпржжрж┐ ржмрж╛ржо ржжрж┐ржХрзЗрж░ ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржиржЯрж┐ `false` рж╣ржпрж╝, рждржмрзЗ ржбрж╛ржи ржжрж┐ржХрзЗрж░ ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржиржЯрж┐ ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржХрж░рж╛ рж╣ржпрж╝ ржирж╛ред
        * ржХрж┐ржирзНрждрзБ ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, `arr.length` ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛рж░ рж╕ржоржпрж╝ржЗ ржПржХржЯрж┐ ржмрзНржпрждрж┐ржХрзНрж░ржо (exception) ржШржЯрзЗ, ржХрж╛рж░ржг `null` рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗрж░ ржХрзЛржирзЛ `length` ржирзЗржЗред

    рж╕рзБрждрж░рж╛ржВ, ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ рж╣ржмрзЗ, ржХрж┐ржирзНрждрзБ рж░рж╛ржи ржХрж░рж╛рж░ рж╕ржорзЯ `NullPointerException` ржерзНрж░рзЛ ржХрж░ржмрзЗред


18 package com.skillcertpro.oca;
        public class Test {
            private static void m1() {
                System.out.println(1 / 0);
            }

            public static void main(String[] args) {
                try {
                    m1();
                } finally {
                    System.out.println("A");
                }
            }
        }
    ```

    ржПржЗ ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржПржмржВ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж╛рж░ ржлрж▓рж╛ржлрж▓ ржХрзА рж╣ржмрзЗ?
    A is printed to the console and program ends normally.
    A is printed to the console, stack trace is printed and then program ends normally.
    A is printed to the console, stack trace is printed and then program ends abruptly.
    Compilation error.



    Explanation:
    1.  `m1()` ржорзЗржержбрзЗ `1 / 0` ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржиржЯрж┐ ржПржХржЯрж┐ `ArithmeticException` ржерзНрж░рзЛ ржХрж░ржмрзЗ, ржХрж╛рж░ржг рж╢рзВржирзНржп ржжрж┐ржпрж╝рзЗ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ржХрзЗ ржнрж╛ржЧ ржХрж░рж╛ рж╕ржорзНржнржм ржиржпрж╝ред
    2.  `main()` ржорзЗржержбрзЗ `m1()` ржорзЗржержбржЯрж┐ `try` ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    3.  ржпржЦржи `m1()` ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝ ржПржмржВ `ArithmeticException` ржерзНрж░рзЛ рж╣ржпрж╝, рждржЦржи `try` ржмрзНрж▓ржХрзЗрж░ ржПржХрзНрж╕рж┐ржХрж┐ржЙрж╢ржи ржмржирзНржз рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
    4.  ржЬрж╛ржнрж╛рж░ ржирж┐ржпрж╝ржо ржЕржирзБржпрж╛ржпрж╝рзА, ржПржХржЯрж┐ `try` ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ ржмрзНржпрждрж┐ржХрзНрж░ржо ржШржЯрж▓рзЗржУ, `finally` ржмрзНрж▓ржХржЯрж┐ рж╕ржмрж╕ржоржпрж╝ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржпрж╝, ржпржжрж┐ ржирж╛ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржПрж░ ржЖржЧрзЗржЗ ржмржирзНржз рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
    5.  рждрж╛ржЗ, `finally` ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ ржерж╛ржХрж╛ `System.out.println("A");` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржмрзЗ ржПржмржВ ржЖржЙржЯржкрзБржЯрзЗ `A` ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗред
    6.  `finally` ржмрзНрж▓ржХржЯрж┐ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржУржпрж╝рж╛рж░ ржкрж░, ржпрзЗрж╣рзЗрждрзБ `catch` ржмрзНрж▓ржХ ржирзЗржЗ, ржерзНрж░рзЛ рж╣ржУрзЯрж╛ ржмрзНржпрждрж┐ржХрзНрж░ржоржЯрж┐ (exception) рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ ржирж╛ред ржлрж▓рзЗ, ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржХрзНрж░рзНржпрж╛рж╢ ржХрж░ржмрзЗ ржПржмржВ ржмрзНржпрждрж┐ржХрзНрж░ржорзЗрж░ ржПржХржЯрж┐ рж╕рзНржЯрзНржпрж╛ржХ ржЯрзНрж░рзЗрж╕ (stack trace) ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗред

    рж╕рзБрждрж░рж╛ржВ, ржЪрзВржбрж╝рж╛ржирзНржд ржлрж▓рж╛ржлрж▓ рж╣ржмрзЗ: ржкрзНрж░ржержорзЗ "A" ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ, ржПржмржВ рждрж╛рж░ржкрж░рзЗ ржПржХржЯрж┐ `java.lang.ArithmeticException` ржПрж░ рж╕рзНржЯрзНржпрж╛ржХ ржЯрзНрж░рзЗрж╕ ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗред




19. public class Test {
        private static void m1() throws Exception {
        throw new Exception();
        }

        public static void main(String[] args) {
        try {
        m1();
        } finally {
        System.out.println(тАЬAтАЭ);
        }
        }
        }

        A is printed to the console and program ends normally.
        A is printed to the console, stack trace is printed and then program ends normally.
        A is printed to the console, stack trace is printed and then program ends abruptly.
        Compilation error.

Ans:
m1() ржорзЗржержбржЯрж┐ ржПржХржЯрж┐ Exception ржЫрзБржбрж╝рзЗ ржжрзЗржпрж╝, ржпрж╛ ржПржХржЯрж┐ checked exceptionред Java-ржПрж░ ржирж┐ржпрж╝ржо ржЕржирзБржпрж╛ржпрж╝рзА, ржХрзЛржирзЛ ржорзЗржержб ржпржжрж┐ ржПржХржЯрж┐ checked exception ржЫрзЛрзЬрзЗ, 
рждрж╛рж╣рж▓рзЗ ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ рж╕рзЗржЗ ржорзЗржержбржЯрж┐ ржХрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, рж╕рзЗржЦрж╛ржирзЗ рж╣рзЯ рж╕рзЗржЗ exception-ржХрзЗ try-catch ржмрзНрж▓ржХ ржжрж┐рзЯрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ рж╣ржмрзЗ, ржЕржержмрж╛ ржХрж▓ ржХрж░рж╛ ржорзЗржержбржХрзЗржУ throws ржХрж┐ржУржпрж╝рж╛рж░рзНржб ржжрж┐рзЯрзЗ рж╕рзЗржЗ exception-ржХрзЗ ржШрзЛрж╖ржгрж╛ ржХрж░рждрзЗ рж╣ржмрзЗред
ржЖржкржирж╛рж░ main ржорзЗржержбрзЗ m1() ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ рж╕рзЗржЦрж╛ржирзЗ ржХрзЛржирзЛ catch ржмрзНрж▓ржХ ржирзЗржЗ ржпрж╛ Exception ржХрзЗ ржзрж░рждрзЗ ржкрж╛рж░рзЗред finally ржмрзНрж▓ржХржЯрж┐ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣рж▓рзЗржУ, ржПржЯрж┐ exception-ржХрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред 
ржлрж▓рзЗ, ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржХржЯрж┐ ржПрж░рж░ ржжрзЗржЦрж╛ржмрзЗ ржПржмржВ ржХрзЛржбржЯрж┐ рж░рж╛ржи рж╣ржмрзЗ ржирж╛ред


20.import java.io.*;

    class ReadTheFile {
    static void print() { //Line 4
    throw new IOException(); //Line 5
    }
    }

    public class Test {
    public static void main(String[] args) { //Line 10
    ReadTheFile.print(); //Line 11
    //Line 12
    }
    }
    Which 2 changes are necessary so that code compiles successfully?

    Replace Line 4 with static void print() throws Exception { 
    Replace Line 4 with static void print() throws Throwable { 
    Replace Line 10 with public static void main(String[] args) throws IOException { 
    Surround Line 11 with below try-catch block: try { ReadTheFile.print(); } catch(IOException e) { e.printStackTrace(); }
    Surround Line 11 with below try-catch block: try { ReadTheFile.print(); } catch(IOException | Exception e) { e.printStackTrace(); }
    Surround Line 11 with below try-catch block: try { ReadTheFile.print(); } catch(Exception e) { e.printStackTrace(); }



рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрзБржЯрж┐ рж╣рж▓рзЛ:
1.  `Replace Line 4 with static void print() throws Exception {`
2.  `Surround Line 11 with below try-catch block: try { ReadTheFile.print(); } catch(Exception e) { e.printStackTrace(); }`

### ржХрзЗржи ржПржЗ ржжрзБржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржЬрж░рзБрж░рж┐?
ржХрзЛржбржЯрж┐рж░ ржорзВрж▓ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЛ `IOException`ред ржПржЯрж┐ ржПржХржЯрж┐ **checked exception**, ржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржЯрж┐ржХрзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржмрж╛ржзрзНржп ржХрж░рзЗред
* **ржкрзНрж░ржержо ржкрж░рж┐ржмрж░рзНрждржи:** `static void print() throws Exception`
    * ржЖрж╕рж▓ ржХрзЛржбрзЗ `print()` ржорзЗржержбржЯрж┐ `IOException` ржЫрзБржбрж╝рзЗ ржжрж┐ржЪрзНржЫрж┐рж▓, ржХрж┐ржирзНрждрзБ ржорзЗржержбрзЗрж░ рж╕рж┐ржЧржирзЗржЪрж╛рж░рзЗ рждрж╛ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ ржЫрж┐рж▓ ржирж╛ред `IOException` рж╣рж▓рзЛ `Exception` ржХрзНрж▓рж╛рж╕рзЗрж░ ржПржХржЯрж┐ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ред рждрж╛ржЗ `throws Exception` ржпрзБржХрзНржд ржХрж░рзЗ ржЖржорж░рж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржЪрзНржЫрж┐ ржпрзЗ ржПржЗ ржорзЗржержбржЯрж┐ ржПржХржЯрж┐ checked exception ржЫрзБржбрж╝рждрзЗ ржкрж╛рж░рзЗред ржПржЯрж┐ Line 5 ржПрж░ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржПрж░рж░ржЯрж┐ ржарж┐ржХ ржХрж░рзЗред
* **ржжрзНржмрж┐рждрзАржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи:** `try { ReadTheFile.print(); } catch(Exception e) { e.printStackTrace(); }`
    * ржПржЦржи `print()` ржорзЗржержбржЯрж┐ ржПржХржЯрж┐ `Exception` ржЫрзБржбрж╝рждрзЗ ржкрж╛рж░рзЗред рждрж╛ржЗ ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ ржПржЯрж┐ржХрзЗ ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ (main ржорзЗржержб ржерзЗржХрзЗ), рж╕рзЗржЦрж╛ржирзЗржУ ржПржЯрж┐ржХрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ рж╣ржмрзЗред ржПржЗ `try-catch` ржмрзНрж▓ржХржЯрж┐ `print()` ржорзЗржержб ржерзЗржХрзЗ ржЖрж╕рж╛ ржпрзЗржХрзЛржирзЛ `Exception` ржХрзЗ ржзрж░рждрзЗ ржПржмржВ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗред ржПржЯрж┐ Line 11 ржПрж░ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржПрж░рж░ржЯрж┐ ржарж┐ржХ ржХрж░рзЗред
### ржХрзЗржи ржЕржирзНржп ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рзЛ рж╕ржарж┐ржХ ржирзЯ?
* `try { ... } catch(IOException | Exception e) { ... }`: ржПржЗ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ржЯрж┐ ржнрзБрж▓ред ржПржХржЯрж┐ multi-catch ржмрзНрж▓ржХрзЗ ржПржХржЯрж┐ рж╕рзБржкрж╛рж░ржХрзНрж▓рж╛рж╕ (`Exception`) ржПржмржВ рждрж╛рж░ ржПржХржЯрж┐ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ (`IOException`) ржПржХрж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ред
* ржЕржирзНржпрж╛ржирзНржп ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ, ржпрж╛ ржкрзБрж░рзЛ ржХрзЛржбржЯрж┐ржХрзЗ ржХржорзНржкрж╛ржЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржиржпрж╝ред ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп `print()` ржорзЗржержб ржПржмржВ `main()` ржорзЗржержб ржЙржнржпрж╝ржХрзЗржЗ рждрж╛ржжрзЗрж░ ржирж┐ржЬ ржирж┐ржЬ рждрзНрж░рзБржЯрж┐ рж╕ржВрж╢рзЛржзржи ржХрж░рждрзЗ рж╣ржмрзЗред



21.public class Test {
    public static void main(String[] args) {
    try {
    main(args);
    } catch (Exception ex) {
    System.out.println(тАЬCATCH-тАЬ);
    }
    System.out.println(тАЬOUTтАЭ);
    }
    }

    CATCH-OUT
    OUT
    None of the System.out.println statement is executed
    Compilation error

    Explanation:
    ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ рж░рж┐ржХрж╛рж░рзНрж╕рж┐ржн (recursive) ржХрж▓ рждрзИрж░рж┐ ржХрж░ржЫрзЗ, ржпрзЗржЦрж╛ржирзЗ `main` ржорзЗржержбржЯрж┐ ржирж┐ржЬрзЗржХрзЗржЗ ржмрж╛рж░ржмрж╛рж░ ржХрж▓ ржХрж░ржЫрзЗред
    1.  `try` ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ `main(args)` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржЖржмрж╛рж░ `main` ржорзЗржержбржЯрж┐ржХрзЗ ржХрж▓ ржХрж░рзЗред
    2.  ржПржЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ ржмрж╛рж░ржмрж╛рж░ ржЪрж▓рждрзЗ ржерж╛ржХрзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржирждрзБржи `main` ржХрж▓ ржПржХржЯрж┐ ржирждрзБржи рж╕рзНржЯрзНржпрж╛ржХ ржлрзНрж░рзЗржо (stack frame) рждрзИрж░рж┐ ржХрж░рзЗред
    3.  ржпрзЗрж╣рзЗрждрзБ ржПржЗ рж░рж┐ржХрж╛рж░рзНрж╕рж┐ржн ржХрж▓ржЯрж┐ ржХржЦржирзЛ рж╢рзЗрж╖ рж╣ржпрж╝ ржирж╛ ржПржмржВ ржХрзЛржирзЛ ржмрзЗрж╕ ржХржирзНржбрж┐рж╢ржи (base condition) ржирзЗржЗ, рждрж╛ржЗ рж╕рзНржЯрзНржпрж╛ржХ ржлрзНрж░рзЗржоржЧрзБрж▓рзЛ ржорзЗржорзЛрж░рж┐ ржкрзВрж░рзНржг ржХрж░рзЗ ржлрзЗрж▓рзЗред
    4.  ржПржХ рж╕ржоржпрж╝, ржЬрж╛ржнрж╛ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржорзЗрж╢рж┐ржи (JVM) рж╕рзНржЯрзНржпрж╛ржХ ржорзЗржорзЛрж░рж┐ рж╢рзЗрж╖ ржХрж░рзЗ ржлрзЗрж▓ржмрзЗ ржПржмржВ `StackOverflowError` ржерзНрж░рзЛ ржХрж░ржмрзЗред
    `StackOverflowError` ржПржХржЯрж┐ `Error` ржХрзНрж▓рж╛рж╕, ржпрж╛ `Exception` ржХрзНрж▓рж╛рж╕рзЗрж░ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ ржиржпрж╝ред `catch (Exception ex)` ржмрзНрж▓ржХржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ `Exception` ржПржмржВ рждрж╛рж░ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ржЧрзБрж▓рзЛ ржзрж░рждрзЗ ржкрж╛рж░рзЗ, `Error` ржмрж╛ рждрж╛рж░ рж╕рж╛ржмржХрзНрж▓рж╛рж╕ржЧрзБрж▓рзЛ ржзрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред
    рж╕рзБрждрж░рж╛ржВ, ржпржЦржи `StackOverflowError` ржерзНрж░рзЛ рж╣ржмрзЗ, рждржЦржи `catch` ржмрзНрж▓ржХржЯрж┐ ржПржЯрж┐ржХрзЗ ржзрж░ржмрзЗ ржирж╛ред ржлрж▓рж╕рзНржмрж░рзВржк, ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ `StackOverflowError` рж╕рж╣ ржХрзНрж░рзНржпрж╛рж╢ ржХрж░ржмрзЗ ржПржмржВ `CATCH-` ржмрж╛ `OUT` ржХрзЛржирзЛ ржХрж┐ржЫрзБржЗ ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ ржирж╛ред
    ржЕрждржПржм, рж╕ржарж┐ржХ ржЙрждрзНрждрж░ рж╣рж▓рзЛ: **None of the System.out.println statement is executed**

22.What will be the result of compiling and executing Test class?
    //Test.java
    package com.skillcertpro.oca;

    import java.io.FileNotFoundException;

    public class Test {
    public static void main(String[] args) {
    try {
    System.out.println(1);
    } catch (NullPointerException ex) {
    System.out.println(тАЬONEтАЭ);
    } catch (FileNotFoundException ex) {
    System.out.println(тАЬTWOтАЭ);
    }
    System.out.println(тАЬTHREEтАЭ);
    }
    }

    ONE THREE
    TWO THREE
    THREE
    None of the System.out.println statements are executed
    Compilation error





  ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ:
FileNotFoundException рж╣рж▓рзЛ ржПржХржЯрж┐ checked exceptionред Java ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржирж┐ржпрж╝ржо ржЕржирзБржпрж╛ржпрж╝рзА, ржПржХржЯрж┐ catch ржмрзНрж▓ржХ ржХрзЗржмрж▓ рждржЦржиржЗ рж▓рзЗржЦрж╛ ржпрж╛ржпрж╝ ржпржЦржи рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ try ржмрзНрж▓ржХрзЗрж░ ржнрзЗрждрж░рзЗ рж╕рзЗржЗ ржзрж░ржирзЗрж░ exception ржШржЯрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржерж╛ржХрзЗред
ржЖржкржирж╛рж░ ржХрзЛржбрзЗрж░ try ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ System.out.println(1); рж▓рж╛ржЗржиржЯрж┐ ржХрзЛржирзЛржнрж╛ржмрзЗржЗ FileNotFoundException рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред
ржпрзЗрж╣рзЗрждрзБ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржжрзЗржЦрзЗржЫрзЗ ржпрзЗ catch (FileNotFoundException ex) ржмрзНрж▓ржХржЯрж┐ ржХржЦржирзЛ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржмрзЗ ржирж╛, рждрж╛ржЗ ржПржЯрж┐ ржПржХржЯрж┐ "unreachable catch block" рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзЗ ржПржмржВ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржПрж░рж░ рждрзИрж░рж┐ ржХрж░рзЗред


23.public class Test {
    static Double d1;
    static int x = d1.intValue();

    public static void main(String[] args) {
    System.out.println(тАЬHELLOтАЭ);
    }
    }
    On execution, does Test class print тАЬHELLOтАЭ on to the console?

    Yes, HELLO is printed on to the console
    No, HELLO is not printed on the console


    ANS:
    d1.intValue() ржХрж▓ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржпрзЗрж╣рзЗрждрзБ d1 ржПрж░ ржорж╛ржи null, ржПржХржЯрж┐ null рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗрж░ ржЙржкрж░ ржорзЗржержб ржХрж▓ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж▓рзЗ NullPointerException ржерзНрж░рзЛ рж╣ржпрж╝ред
    ржПржЗ ржмрзНржпрждрж┐ржХрзНрж░ржоржЯрж┐ ржХрзНрж▓рж╛рж╕ рж▓рзЛржбрж┐ржВржпрж╝рзЗрж░ рж╕ржоржпрж╝ржЗ ржШржЯрзЗ, main ржорзЗржержбржЯрж┐ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржУржпрж╝рж╛рж░ ржЖржЧрзЗржЗред
    ржлрж▓рж╕рзНржмрж░рзВржк, ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ main ржорзЗржержбрзЗ ржкрзМржБржЫрж╛ржирзЛрж░ ржЖржЧрзЗржЗ NullPointerException ржПрж░ ржХрж╛рж░ржгрзЗ ржХрзНрж░рзНржпрж╛рж╢ ржХрж░ржмрзЗред рждрж╛ржЗ "HELLO" ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ ржирж╛ред

-
