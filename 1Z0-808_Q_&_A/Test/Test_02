

Date: 29 July ,2025


### 1. Array Index Out of Bounds
- অ্যারের ইনডেক্স 0 থেকে (length - 1) পর্যন্ত হয়।  
- `arr[arr.length]` বা `arr[-1]` এক্সেস করলে `ArrayIndexOutOfBoundsException` আসবে।  
- লুপ চালানোর সময় `i < arr.length` ব্যবহার করুন ( `i <= arr.length` নয়)।  


### 2. Switch-Case Fall Through
- `switch`-এ `default` কেসটি যেকোনো জায়গায় থাকতে পারে, কিন্তু `break` না থাকলে নিচের `case` গুলোও রান করবে।  
-`case` লেবেল: `case` লেবেলের মান অবশ্যই একটি কনস্ট্যান্ট এক্সপ্রেশন হতে হবে এবং `switch` ভ্যারিয়েবলের ডেটা টাইপের সাথে সামঞ্জস্যপূর্ণ হতে হবে।
                 যদি `byte` ভ্যারিয়েবলের জন্য `case` লেবেল `200` হয়, যা `byte` এর সীমার বাইরে, তাহলে কম্পাইলেশন ত্রুটি হবে


### 3. Unreachable Code
- `while(true)` বা `return` এর পরে কোড লিখলে কম্পাইলার এরর দেবে।  
-`break`, `continue`, বা `return` এর পরের কোড চেক করুন।  


### 4. Post-Increment (i++) vs Pre-Increment (++i)   
- `i++` → প্রথমে মান ব্যবহার, তারপর ইনক্রিমেন্ট।  
- `++i` → প্রথমে ইনক্রিমেন্ট, তারপর মান ব্যবহার।  


### 5. Pass-by-Value vs Pass-by-Reference  
- জাভায় সবসময় Pass-by-Value হয় (অবজেক্টের রেফারেন্সও কপি হয়)।  
- মেথডের ভেতরে অ্যারে/অবজেক্ট মডিফাই করলে মূল ডাটা চেঞ্জ হবে, কিন্তু নতুন অবজেক্ট অ্যাসাইন করলে মূল রেফারেন্স অপরিবর্তিত থাকবে।  
- মেথডে কী পরিবর্তন হচ্ছে তা খেয়াল করুন।  


### 6. Ternary Operator Mistakes
- নেস্টেড টারনারি অপারেটরে `:` ভুলে গেলে কম্পাইলার এরর দেবে। 
-String amPm = time.getHour() >= 12 ? ((time.getHour() == 12) ? “PM” : “AM”) : “AM”;//compile 


### 7. Loop Control (break, continue)  
- `break` → লুপ থামিয়ে দেয়।  
- `continue` → বাকি কোড স্কিপ করে পরের ইটারেশনে যায়।  
 

### 8. Variable Scope and Shadowing  
- লোকাল ভ্যারিয়েবল ইনিশিয়ালাইজ না করলে ব্যবহার করা যাবে না।  
- `{}` ব্লকের ভেতরে ভ্যারিয়েবল ডিক্লেয়ার করলে বাইরে এক্সেস করা যাবে না।  


### 9. String Comparison   
- `==` → রেফারেন্স চেক করে, ভ্যালু নয়।  
- `.equals()` → ভ্যালু চেক করে।  
  

### 10. Compiler vs Runtime Errors   
- কম্পাইলেশন এরর: সিনট্যাক্স ভুল (যেমন `int x = "hello";`)।  
- রানটাইম এরর: লজিক ভুল (যেমন `NullPointerException`)।   


### 11. Final Variables   
- `final` ভ্যারিয়েবলের মান একবারই অ্যাসাইন করা যায়। মান পরিবর্তন করা যাবে না।  
- `final` ভ্যারিয়েবলের মান চেঞ্জ করার চেষ্টা করবেন না।  


### 12. Enhanced For Loop (For-Each)   
- ফর-ইচ লুপে ইনডেক্স এক্সেস করা যায় না, শুধু ভ্যালু এক্সেস করা যায়।  
- ইনডেক্স প্রয়োজন হলে সাধারণ `for` লুপ ব্যবহার করুন।  



### 13. অপারেটর এবং অপারেটরের অগ্রাধিকার(precedence): NOT-I'M-A-ELA
        1.  ! (Logical NOT)
        2.  ++/-- (Increment/Decrement)
        3.  */'/'/% (Multiplication/Division/Modulus)
        4.  +/- (Addition/Subtraction)
        5.  ==/!= (Equality/Inequality)
        6.  &&/|| (Logical AND/OR)
        7.  = (Assignment)
    (1-7)এই অগ্রাধিকারের অপারেটর মূল্যায়ন করা হয়।


### 14. Others
int var = '7'; //compile
System.out.println(status = false || status = true | status = false); //not compile as no ()bracket to separte
int a = 3; m(++a, a++); //new value generate here, does  not effect any changes inside m()


------------------------------------


1.-

2.What will be the output of compiling and executing the Test class?
    public class Test {
    public static void main(String[] args) {
    int a = 5;
    int x = 10;
    switch(x) {
    case 10:  a *= 2;
    case 20:  a *= 3;
    case 30:  a *= 4;
    }
    System.out.println(a);
    }}






### Question 2  
Output: 120
Explanation: `x = 10` matches `case 10`, then falls through `case 20` and `case 30` (no `break`).  
- `a` becomes `5  2  3  4 = 120`.


3.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    byte var = 100;
    switch(var) {
        case 100: System.out.println(“var is 100”);
        break;
        case 200: System.out.println(“var is 200”);
        break;
        default: System.out.println(“In default”);
    }}}






### Question 3  
Output: a compile-time error
Explanation: case 200:: সুইচ স্টেটমেন্টে, একটি case লেবেল হলো 200। যেহেতু 200 একটি byte ভ্যারিয়েবলের জন্য বৈধ সীমার(-128 to 127) বাইরে, তাই জাভা কম্পাইলার এটিকে "incompatible types" ত্রুটি হিসেবে চিহ্নিত করবে।




4. What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String fruit = “mango”;
    switch (fruit) {
    default:  System.out.println(“ANY FRUIT WILL DO”);
    case “Apple”:  System.out.println(“APPLE”);
    case “Mango”:  System.out.println(“MANGO”);
    case “Banana”: System.out.println(“BANANA”);
    break;
    }}}






### Question 4  
Output: ANY FRUIT WILL DO APPLE MANGO BANANA
Explanation: `fruit = "mango"` doesn’t match any case, so it executes `default` and falls through all cases until `break`.



5. What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String fruit = new String(new char[] {‘M’, ‘a’, ‘n’, ‘g’, ‘o’});
    switch (fruit) {
        default:  System.out.println(“ANY FRUIT WILL DO”);
        case “Apple”:  System.out.println(“APPLE”);
        case “Mango”:  System.out.println(“MANGO”);
        case “Banana”: System.out.println(“BANANA”);
        break;
    }}}





### Question 5  
Output: MANGO BANANA
Explanation: যখন আপনি `new String(char[] value)` ব্যবহার করে একটি `String` তৈরি করেন, তখন এটি নির্দিষ্ট ক্যারেক্টার অ্যারে থেকে অক্ষরগুলি কপি করে একটি নতুন `String` তৈরি করে।
             -`String fruit = new String(new char[] {'M', 'a', 'n', 'g', 'o'});` এই লাইনটির ফলে `fruit` নামক ভ্যারিয়েবলটিতে "Mango" স্ট্রিং মান ধারণকারী একটি `String` অবজেক্ট তৈরি হবে।


6. For the class Test, which options, if used to replace /*INSERT*/, will print TEN on to the console? Select 4 options.
    public class Test {
    public static void main(String[] args) {
    /*INSERT*/
    switch(var) {
    case 10: System.out.println(“TEN”);
    break;
    default: System.out.println(“DEFAULT”);
    }}}

     a.byte var = 10; 
     b.long var = 10; 
     c.Short var = 10; 
     d.Integer var = 10; 
     e.char var = 10; 
     f.double var = 0; 








### Question 6  
Correct Options (4):  - `byte var = 10;`  - `short var = 10;`  - `Integer var = 10;`  - `char var = 10;`  
Explanation: Any of these will match `case 10` and print `"TEN"`.
char var = 10;: char একটি বৈধ টাইপ। 10 হলো ASCII কোড, যা \n (newline) নির্দেশ করে, কিন্তু এটি একটি পূর্ণসংখ্যা হিসেবে case 10: এর সাথে তুলনা করার জন্য বৈধ। তাই এটি সঠিক।



7. For the class Test, which option, if used to replace /*INSERT*/, will print “Lucky no. 7” on to the console?
    public class Test {
        public static void main(String[] args) {
        /*INSERT*/
        switch(var) {
            case ‘7’: System.out.println(“Lucky no. 7”);
            break;
            default: System.out.println(“DEFAULT”);
    }}}
     A. int var = 7; 
     B. Integer var = 7; 
     C. int var = '7'; 
     D. None of the other options









### Question 7  
Correct Option: C. int var = '7';  
Explanation: char লিটারেলকে (যেমন '7') int ভ্যালুতে implicitly convert করা যায়, 



8. What will be the result of compiling and executing Test class?
    import java.time.LocalTime;
    public class Test {
    public static void main(String[] args) {
    LocalTime time = LocalTime.of(16, 40);
    String amPm = time.getHour() >= 12 ? (time.getHour() == 12) ? “PM” : “AM”;
    System.out.println(amPm);
    }}









### Question 8  
Output: Compilation Error  
Explanation: 
Ternary operator is incomplete (`?` without `:` for the second condition).
সঠিকভাবে কোডটি লিখতে হলে দুটি টারনারি অপারেটরের মাঝে একটি : দিতে হবে। যেমন:
String amPm = time.getHour() >= 12 ? ((time.getHour() == 12) ? “PM” : “AM”) : “AM”;
যেহেতু আপনার দেওয়া কোডে এই : চিহ্নটি নেই, তাই কম্পাইলার একটি সিনট্যাক্স এরর দেবে এবং কোডটি কম্পাইল হবে না।



9. --


10. What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String [] args) {
        int a = 2;
        boolean res = false;
        res = a++ == 2 || –a == 2 && –a == 2; // no any brackets No problem also works this condition fine with System.out.println()
        System.out.println(a);
    }}
    
     a.2
     b.3
     c.1
     d.Compilation error





### Question 10  
Output: 3
Explanation:  যেহেতু `a++ == 2` is `true`(true || -a == 2 && -a == 2), || এর বাম পাশে true আছে, তাই ডান পাশের পুরো অংশটি (-a == 2 && -a == 2) কখনোই মূল্যায়ন করা হবে না।


11. ---


12. What will be the result of compiling and executing Test class? 
    public class Test {
    public static void main(String [] args) {
    int a = 3;
    m(++a, a++);
    System.out.println(a);
    }
    private static void m(int i, int j) {
    i++;
    j--;
    }}

    a.4
    b.5
    c.6
    d.3






### Question 12  
কম্পাইল এবং এক্সিকিউট করলে ফলাফল হবে b. 5।

int a = 3; দিয়ে a-এর মান 3 সেট করা হয়।
m(++a, a++); লাইনে মেথড কল করার সময় আর্গুমেন্টগুলো বাম থেকে ডানে মূল্যায়ন করা হয়।

++a (প্রি-ইনক্রিমেন্ট): প্রথমে a-এর মান ১ বেড়ে ৪ হয়, তারপর সেই মান m মেথডের প্রথম আর্গুমেন্ট (i)-এ পাস করা হয়। তাই, i = 4।
a++ (পোস্ট-ইনক্রিমেন্ট): a-এর বর্তমান মান ৪, যা m মেথডের দ্বিতীয় আর্গুমেন্ট (j)-এ পাস করা হয়। তাই, j = 4। এরপর a-এর মান ১ বেড়ে ৫ হয়।

m(int i, int j) মেথডের ভেতরে i++ এবং j-- i এবং j-এর মান পরিবর্তন করে (যথাক্রমে ৫ এবং ৩)। 
কিন্তু, জাভাতে মেথডগুলো মান দ্বারা পাস (pass by value) হয়। এর মানে হলো, মেথডের ভেতরের পরিবর্তনগুলো মূল a ভেরিয়েবলের ওপর কোনো প্রভাব ফেলে না।
মেথড থেকে ফিরে আসার পর, a-এর মান সেই ৫-ই থাকে।



13.Consider below code of Test.java file:
        public class Test {
        public static void main(String [] args) {
        boolean status = true;
        System.out.println(status = false || status = true | status = false);
        System.out.println(status);
        }
        }

        What will be the result of compiling and executing Test class?
        a.TRUE FALSE
        b.FALSE TRUE
        c.TRUE TRUE
        d.FALSE FALSE
        e.Compilation error







### Question 13  
Output: Compilation Error  
Explanation: || এবং | অপারেটরগুলো বাম পাশে একটি বুলিয়ান মান (যেমন false) এবং ডান পাশে আরেকটি বুলিয়ান এক্সপ্রেশন আশা করে। 
            কিন্তু status = true বা status = false অ্যাসাইনমেন্টগুলো একটি বুলিয়ান মান তৈরি করে, যা সরাসরি লজিক্যাল অপারেটরের অপারেন্ড হিসেবে ব্যবহার করা সম্ভব হয় না যেভাবে এখানে লেখার চেষ্টা করা হয়েছে।
            - if I use (backet) like this, will work fine: System.out.println((status = false) || (status = true) | (status = false));


14.Consider below code snippet:
    int i = 10;
    System.out.println(i > 3 != false);
    What is the result?






### Question 14  
Output: true
Explanation: `i > 3` is `true`, and `true != false` is `true`.


**15.Consider below code of Test.java file:
    public class Test {
    public static void main(String [] args) {
    boolean flag1 = true;
    boolean flag2 = false;
    boolean flag3 = true;
    boolean flag4 = false;

    System.out.println(!flag1 == flag2 != flag3 == !flag4); //Line n1
    System.out.println(flag1 = flag2 != flag3 == !flag4); //Line n2
    }
    }

    What will be the result of compiling and executing Test class?





### Question 15  
Output: false true
Explanation: 
    এখানে জাভার অপারেটর অগ্রাধিকার (operator precedence) বোঝা খুবই গুরুত্বপূর্ণ।
        **যখন একই অগ্রাধিকারের একাধিক অপারেটর থাকে, তখন তারা বাম থেকে ডানে (left-to-right associativity) মূল্যায়ন করা হয়।
       
               - ইউনারি অপারেটর (`!`) এর অগ্রাধিকার সবার উপরে, তারপর তুলনা অপারেটর (`==`, `!=`), এবং সবশেষে অ্যাসাইনমেন্ট অপারেটর (`=`)।
                
                ### Line n1: `System.out.println(!flag1 == flag2 != flag3 == !flag4);`
                            1.  প্রথমে `!` অপারেটরগুলো কাজ করবে:
                                  * `!flag1` (মানে `!true`) হবে `false`।
                                  * `!flag4` (মানে `!false`) হবে `true`।
                            2.  এখন এক্সপ্রেশনটি হলো: `false == false != true == true`।
                            3.  বাম থেকে ডানে `==` এবং `!=` অপারেটরগুলো কাজ করবে:
                                  * `false == false` এটি `true`।
                                  * `true != true` এটি `false`।
                                  * `false == true` এটি `false`।
                               সুতরাং, `Line n1` এর আউটপুট হবে: `false`।
                
                ### Line n2: `System.out.println(flag1 = flag2 != flag3 == !flag4);`
                            এখানে `=` অ্যাসাইনমেন্ট অপারেটরটির অগ্রাধিকার সবচেয়ে কম, তাই এর ডান পাশের পুরো এক্সপ্রেশনটি আগে মূল্যায়ন করা হবে।
                            1.  প্রথমে ডান পাশের এক্সপ্রেশনের `!` অপারেটর কাজ করবে:
                                  * `!flag4` (মানে `!false`) হবে `true`।
                            2.  এখন ডান পাশের এক্সপ্রেশনটি হলো: `false != true == true`।
                            3.  বাম থেকে ডানে `!=` এবং `==` অপারেটরগুলো কাজ করবে:
                                  * `false != true` এটি `true`।
                                  * `true == true` এটি `true`।
                            4.  ডান পাশের এক্সপ্রেশনের ফলাফল `true`। এই `true` মানটি `flag1` ভ্যারিয়েবলে অ্যাসাইন করা হবে।
                            5.  একটি অ্যাসাইনমেন্ট এক্সপ্রেশনের ফলাফল হলো অ্যাসাইন করা মান।
                                সুতরাং, `Line n2` এর আউটপুট হবে: `true`।




16. public class Test {
    public static void main(String[] args) {
        int score = 30; // Line n1
        char grade = 'F'; // Line n2
        if (50 <= score < 60) // Line n3
            grade = 'D';
        else if (60 <= score < 70) // Line n4
            grade = 'C';
        else if (70 <= score < 80) // Line n5
            grade = 'B';
        else if (score >= 80)
            grade = 'A';
        System.out.println(grade);
    }}
    a.Compilation error
    b.A
    c.B
    d.C
    e.D
    What is the result of compiling and executing Test class?






### Question 16  
Output: Compilation Error  
Explanation:জাভাতে, আপনি গাণিতিক অসমতা (mathematical inequalities) যেমন 50 <= score < 60 সরাসরি লিখতে পারবেন না। 
            -এটি দুটি আলাদা শর্তের সম্মিলিত রূপ। জাভা কম্পাইলার এটিকে একটি একক বুলিয়ান এক্সপ্রেশন হিসেবে পার্স করবে না।


**17.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    char [][] arr = { {‘A’, ‘B’, ‘C’}, {‘D’, ‘E’, ‘F’}, {‘G’, ‘H’, ‘I’} };
      for(int i = 0; i < arr.length; i++) { 
         for(int j = 0; j < arr[i].length; j++) { 
              System.out.print(arr[i][1]); 
          } 
        System.out.println();
      } 
    } }

     -ABC DEF GHI
     -BBB EEE HHH
     -AAA DDD GGG
     -CCC FFF III






### Question 17  
Output: BBB EEE HHH
Explanation: -আউটার লুপ: for(int i = 0; i < arr.length; i++) এই লুপটি অ্যারের সারি (row) গুলোর উপর চলে। arr.length এর মান হলো 3 (কারণ তিনটি সারি আছে)। i এর মান 0, 1, 2 হবে।
             -ইনার লুপ: for(int j = 0; j < arr[i].length; j++)এই লুপটি প্রতিটি সারির কলাম (column) গুলোর উপর চলে। arr[i].length প্রতিটি সারির জন্য কলাম সংখ্যা, যা এখানে 3। j এর মান 0, 1, 2 হবে।
             ## প্রিন্টিং লজিক: System.out.print(arr[i][1]);
              এখানেই মূল বিষয়টা ঘটে। লক্ষ্য করুন, arr[i][1] প্রিন্ট করা হচ্ছে, arr[i][j] নয়। এর মানে হলো, প্রতিটি সারির শুধুমাত্র দ্বিতীয় উপাদান (index 1) বারবার প্রিন্ট করা হবে।
              ইনার লুপটি j এর মান 0, 1, 2 এর জন্য তিনবার ঘুরবে, কিন্তু প্রতিবারই arr[i][1] (অর্থাৎ বর্তমান সারির দ্বিতীয় কলামের উপাদান) প্রিন্ট করবে।



18.--


19.What will be the result of compiling and executing Test class?
        public class Test {
        public static void main(String[] args) {
        int [] arr1 = {1, 2, 3};
        char [] arr2 = {'A', 'B'}; //ASCII code of ‘A’ is 65, ‘B’ is 66
        arr1 = arr2;
        for(int i = 0; i < arr1.length; i++) { 
            System.out.print(arr1[i] + " "); 
         } } }

OR 
    System.out.println(arr1.length + arr2.length);

        -1 2 2003
        -A B
        -65 66
        -Compilation error








### Question 19  
Output: Compilation Error  
Explanation: জাভাতে, যেভাবে প্রিমিটিভ টাইপগুলো (যেমন char থেকে int ইমপ্লিসিট কাস্টিং) করে,  অ্যারে টাইপগুলো ইনহেরিটেন্স hierarchy (পদানুক্রম) মেনে চলে না । 
             -int[] এবং char[] দুটি সম্পূর্ণ ভিন্ন এবং অসামঞ্জস্যপূর্ণ (incompatible) অ্যারে টাইপ। 
if  int [] arr2 = {'A', 'B'}; instead of char [] arr2 = {'A', 'B'};

  System.out.println(arr1.length + arr2.length);=4;



20.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String [] arr = new String[1];
    System.out.println(arr[0].isEmpty());
    }
    }

     -TRUE
     -FALSE
     -NullPointerException is thrown at runtime
     -ArrayIndexOutOfBoundsException is thrown at runtime







### Question 20  
Output: NullPointerException  
যেহেতু arr[0] এর মান null, আপনি একটি null অবজেক্টের উপর কোনো Method কল করতে পারবেন না।
একটি null অবজেক্টের উপর মেথড কল করার চেষ্টা করলে জাভা একটি NullPointerException থ্রো করে।

21.Given code:
    public class Test {
    public static void main(String[] args) {
    String [] arr = {“I”, “N”, “S”, “E”, “R”, “T”};
    for(/*INSERT*/) {
    if (n % 2 == 0) {
    continue;
    }
    System.out.print(arr[n]); //Line n1
    }}}

    And below options:
    1. int n = 0; n < arr.length; n +=1
    2. int n = 0; n <= arr.length; n += 1
    3. int n = 1; n < arr.length; n += 2
    4. int n = 1; n <= arr.length; n += 2
    How many above options can be used to replace /*INSERT*/, such that on execution, code will print NET on to the console?
        -Only one option
        -Only two options
        -Only three options
        -All four options
        -None of the other options






### Question 21  
Correct Options: Only two options (1 and 3)  
Explanation: Options 1 (`n = 0; n < arr.length; n += 1`) and 3 (`n = 1; n < arr.length; n += 2`) print `NET` (indices 1, 3, 5).



22.public class Test {
        public static void main(String[] args) {
        int [] arr = {1, 2, 3, 4, 5};
        int x = 0;
        for(/*INSERT*/) {
        x += arr[n];
        }
        System.out.println(x);
        }
        }
        Which 3 options, if used to replace /*INSERT*/, on execution will print 9 on to the console?

        -int n = 0; n < arr.length; n++ 
        -int n = 0; n < arr.length; n += 2 
        -int n = 3; n < arr.length; n++ 
        -int n = 1; n < arr.length - 1; n++ 
        -int n = 1; n < arr.length; n += 2 







### Question 22  
Correct Options (3):  
- `int n = 0; n < arr.length; n += 2` (sums 1 + 3 + 5 = 9)  
- `int n = 1; n < arr.length - 1; n++` (sums 2 + 3 + 4 = 9)  
- `int n = 1; n < arr.length; n += 2` (sums 2 + 4 = 6, but not 9)  
Correction: Only 2 options actually sum to 9 (first and second).



23.What will be the result of compiling and executing Test class?
            public class Test {
            public static void main(String[] args) {
            String [] arr = {“A”, “B”, “C”, “D”};
            arr[0] = arr[1];
            arr[1] = “E”;
            for(String s : arr) {
            System.out.print(s + ” “);
            }
            }
            }
            -Compilation error
            -An exception is thrown at runtime
            -B E C D
            -E E C D
            -A E C D
            der below code of Test.java file:






### Question 23  
Output: B E C D
Explanation: `arr[0] = arr[1]` sets `arr[0] = "B"`, then `arr[1] = "E"`.

24.public class Test {
        public static void main(String[] args) {
        String arr1 [], arr2, arr3 = null; //Line n1
        arr1 = new String[2];
        arr1[0] = “A”;
        arr1[1] = “B”;
        arr2 = arr3 = arr1; //Line n2
        log(arr2); //Line n3
        }

        private static void log(String… vals) {
        for(String s : vals)
        System.out.print(s);
        }
        }

        What will be the result of compiling and executing Test class?

        -Line n1 causes compilation error
        -Line n2 causes compilation error
        -Line n3 causes compilation error
        -It executes successfully and prints AB on to the console
        -It executes successfully and prints BA on to the console
        -It executes successfully and prints A on to the console









### Question 24  
Output: AB
Explanation: `arr2` and `arr3` point to `arr1`, which holds `["A", "B"]`.




25.public class Test {
        public static void main(String[] args) {
        int [] arr = {10, 20, 30}; //Line n1
        int i = 0;
        arr[i++] = arr[++i] = 40; //Line n2
        for(int x : arr)
        System.out.println(x);
        }
        }

        What will be the result of compiling and executing Test class?

        -Compilation error at Line n2
        -An exception is thrown by Line n2
        -10 20 30
        -10 40 30
        -40 40 30
        -40 20 40







### Question 25  
Output: 40 40 30
Explanation: `arr[i++] = arr[++i] = 40` assigns `40` to `arr[0]` and `arr[2]`.


26.public class Test {
        public static void main(String[] args) {
        int var = 3;
        String [][] arr = new String[–var][var++]; //Line n1
        arr[1][1] = “X”; //Line n2
        arr[1][2] = “Y”; //Line n3
        for(String [] arr1 : arr) {
        for(String s : arr1) {
        if(s != null)
        System.out.print(s);
        }
        }
        }
        }

        What will be the result of compiling and executing Test class?
        -It causes compilation error at single statement
        -It causes compilation error at multiple statements
        -It throws an exception at runtime
        -It prints XY on to the console and program terminates successfully
        -It prints XY on to the console and program terminates abruptly






### Question 26  
Output: ArrayIndexOutOfBoundsException  
Explanation: `arr` is `2x2` (after `--var` and `var++`), so `arr[1][2]` is invalid.




27.public class Test {
    public static void main(String[] args) {
    int[][] arr = new int[x][y]; //Line n1
    arr[1][4] = 100;
    arr[6][6] = 200;
    arr[3][6] = 300;
    }
    }

    And below combination of x and y values:
    1. x = 6, y = 6
    2. x = 2, y = 5
    3. x = 4, y = 7
    4. x = 7, y = 7
    5. x = 8, y = 8
    6. x = 0, y = 0
    7. x = -1, y = -1

    How many of above x,y pair(s) can replace x and y at Line n1 such that Test.java file compiles successfully?

     All 7 pairs
     6 pairs
     5 pairs
     4 pairs
     3 pairs
     2 pairs






### Question 27  
Correct Pairs:  
4 pairs (3, 4, 5, 7)  
Explanation: Valid pairs must accommodate `arr[6][6]` (min size `7x7`). Pairs 3, 4, 5, and 7 work (but 7 is invalid due to negative size).


28.public class Test {
        public static void main(String[] args) {
        final boolean flag = false;
        while(flag) {
        System.out.println(“Good Morning!”);
        }
        }
        }

        -Program compiles and executes successfully but produces no output
        -Compilation error
        -Infinite loop
        -It will print "Good Morning!" once





### Question 28  
Output: No output (loop never executes)  
Explanation: `flag = false`, so `while(flag)` is skipped.


29.Which of the following statement is correct for below code?
        public class Test {
        public static void main(String[] args) {
        final boolean flag;
        flag = false;
        while(flag) {
        System.out.println(“Good Morning!”);
        }
        }
        }







### Question 29  
Output: No output (same as Q28)  
Explanation: `flag` is `final` and `false`, so the loop is skipped.

30.public class Test {
    public static void main(String[] args) {
    do {
    System.out.println(100);
    } while (true);

    System.out.println(“Bye”);
    }
    }

     a.Compiles successfully and prints "Bye"
     b.Compiles successfully and prints 100 in infinite loop
     c.Unreachable code compilation error
     d.100
     e.Bye





### Question 30  
Output: Unreachable code error  
Explanation: `while(true)` makes `System.out.println("Bye");` unreachable.




31.public class Test {
    public static void main(String[] args) {
    int start = 1;
    int sum = 0;
    do {
    if(start % 2 == 0) {
    continue;
    }
    sum += start;
    } while(++start <= 10); System.out.println(sum); } }

     -25
     -55
     -Compilation error
     -24






### Question 31  
Output: Infinite Loop  
Explanation: `continue` skips `sum += start`, but `start` never increments, causing an infinite loop.


32. public class Test {
    public static void main(String[] args) {
    int i;
    for(i=0; i<=2; i++){} System.out.println(i); } }

    - 0
    - 2
    - 3
    - Compilation error








### Question 32  
Output: 3
Explanation: Loop runs for `i = 0, 1, 2`, then exits when `i = 3`.



33.public class Test {
    public static void main(String[] args) {
    int i;
    outer:
    do {
    i = 5;
    inner:
    while (true) {
    System.out.println(i–);
    if (i == 4) {
    break outer;
    }
    }
    } while (true);
    }
    }

     -Prints 5 in an infinite loop.
     -Prints 5 once.
     -Compilation error.
     -5 3 2 1




### Question 33
Output: 5 4
Explanation:
1. The outer `do-while` loop sets `i = 5`
2. The inner `while` loop:
   - Prints `i--` (prints 5, then decrements to 4)
   - Checks `if (i == 4)` and executes `break outer`, terminating both loops
3. Correction to options: None of the given options are correct. The actual output is `5 4`.




34. public class Test {
    public static void main(String[] args) {
    String [][] fruits = {{“apple”, “mango”}, {“orange”, “grape”}};
    /*INSERT*/
    }
    }
    For the class Test, which options, if used to replace /*INSERT*/, will print “apple mango orange grape ” on to the console?
    Select ALL that apply.

     -for(int i = 0; i < fruits.length; i++) for(int j = 0; j < fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(int i = 1; i <= fruits.length; i++) for(int j = 1; j <= fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(int i = 1; i < fruits.length; i++) for(int j = 1; j < fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(String [] arr : fruits) for(String fruit : arr) System.out.print(fruit + " ");








### Question 34
Correct Options:
1. `for(int i = 0; i < fruits.length; i++) for(int j = 0; j < fruits[i].length; j++) System.out.print(fruits[i][j] + " ");`
4. `for(String[] arr : fruits) for(String fruit : arr) System.out.print(fruit + " ");`
Explanation:
- The array is `{{"apple","mango"}, {"orange","grape"}}`
- Option 1: Correctly iterates through all indices (0,0 → 0,1 → 1,0 → 1,1)
- Option 4: Enhanced for-loop correctly accesses all elements
- Options 2-3: Incorrect because:
  - They start from index 1, missing "apple" and "orange"
  - Option 2 will throw `ArrayIndexOutOfBoundsException` (using `<=`)







35. public class Test {
    public static void main(String[] args) {
    int [] arr = {2, 1, 0};
    for(int i : arr) {
    System.out.println(arr[i]);
    }
    }
    }

 -2 1 0
 -0 1 2
 -Compilation error
 -ArrayIndexOutOfBoundsException is thrown at runtime






### Question 35
Output: 0 1 2
Explanation:
1. The array is `{2, 1, 0}`
2. The for-each loop iterates with `i` taking values `2`, `1`, `0`:
   - `arr[2]` → `0`
   - `arr[1]` → `1`
   - `arr[0]` → `2`
3. Correction to options: The correct output is `0 1 2` (second option).
Key Notes:
- No compilation error or exception occurs
- The loop accesses valid indices because the array values themselves are valid indices

