
1.What will be the output of compiling and executing the Test class?
    public class Test {
    public static void main(String[] args) {
    int x = 2;
    switch (x) {
    default:
    System.out.println(“Still no idea what x is”);
    case 2:
    System.out.println(“x is equal to 2”);
    break;
2.What will be the output of compiling and executing the Test class?
    public class Test {
    public static void main(String[] args) {
    int a = 5;
    int x = 10;
    switch(x) {
    case 10:  a *= 2;
    case 20:  a *= 3;
    case 30:  a *= 4;
    }
    System.out.println(a);
    }
    }
3.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    byte var = 100;
    switch(var) {
    case 100:
    System.out.println(“var is 100”);
    break;
    case 200:
    System.out.println(“var is 200”);
    break;
    default:
    System.out.println(“In default”);
    }
    }
    }
4. What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String fruit = “mango”;
    switch (fruit) {
    default:  System.out.println(“ANY FRUIT WILL DO”);
    case “Apple”:  System.out.println(“APPLE”);
    case “Mango”:  System.out.println(“MANGO”);
    case “Banana”: System.out.println(“BANANA”);
    break;
    }
    }
    }
5. What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String fruit = new String(new char[] {‘M’, ‘a’, ‘n’, ‘g’, ‘o’});
    switch (fruit) {
    default:  System.out.println(“ANY FRUIT WILL DO”);
    case “Apple”:  System.out.println(“APPLE”);
    case “Mango”:  System.out.println(“MANGO”);
    case “Banana”: System.out.println(“BANANA”);
    break;
    }
    }
    }
6.For the class Test, which options, if used to replace /*INSERT*/, will print TEN on to the console? Select 4 options.
    public class Test {
    public static void main(String[] args) {
    /*INSERT*/
    switch(var) {
    case 10:
    System.out.println(“TEN”);
    break;
    default:
    System.out.println(“DEFAULT”);
    }
    }
    }

7.For the class Test, which option, if used to replace /*INSERT*/, will print “Lucky no. 7” on to the console?
    public class Test {
        public static void main(String[] args) {
        /*INSERT*/
    switch(var) {
        case ‘7’:
    System.out.println(“Lucky no. 7”);
    break;
    default:
    System.out.println(“DEFAULT”);
    }
    }
    }
     A. int var = 7; 
     B. Integer var = 7; 
     C. int var = '7'; 
     D. None of the other options
8. What will be the result of compiling and executing Test class?
    import java.time.LocalTime;
    public class Test {
    public static void main(String[] args) {
    LocalTime time = LocalTime.of(16, 40);
    String amPm = time.getHour() >= 12 ? (time.getHour() == 12) ? “PM” : “AM”;
    System.out.println(amPm);
    }
    }
9.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String [] args) {
    int a = 100;
    System.out.println(-a++);
    }
    }
    
    a.Compilation error
    b.-100
    c.-101
    d. 99
10. What will be the result of compiling and executing Test class?
package com.skillcertpro.oca;

public class Test {
public static void main(String [] args) {
int a = 2;
boolean res = false;
res = a++ == 2 || –a == 2 && –a == 2;
System.out.println(a);
}
}

 a.2
 b.3
 c.1
 d.Compilation error

11.What will be the result of compiling and executing Test class? 
    public class Test {
    public static void main(String [] args) {
    int a = 3;
    System.out.println(a++ == 3 || –a == 3 && –a == 3);
    }
    }
    a.TRUE
    b.FALSE
    c. Compilation error
12. What will be the result of compiling and executing Test class? 
    public class Test {
    public static void main(String [] args) {
    int a = 3;
    m(++a, a++);
    System.out.println(a);
    }

    private static void m(int i, int j) {
    i++;
    j–;
    }
    }

    a.4
    b.5
    c.6
    d.3

13.Consider below code of Test.java file:
        public class Test {
        public static void main(String [] args) {
        boolean status = true;
        System.out.println(status = false || status = true | status = false);
        System.out.println(status);
        }
        }

        What will be the result of compiling and executing Test class?

        a.TRUE FALSE
        b.FALSE TRUE
        c.TRUE TRUE
        d.FALSE FALSE
        e.Compilation error
14.Consider below code snippet:
    int i = 10;
    System.out.println(i > 3 != false);
    What is the result?

15.Consider below code of Test.java file:
    public class Test {
    public static void main(String [] args) {
    boolean flag1 = true;
    boolean flag2 = false;
    boolean flag3 = true;
    boolean flag4 = false;

    System.out.println(!flag1 == flag2 != flag3 == !flag4); //Line n1
    System.out.println(flag1 = flag2 != flag3 == !flag4); //Line n2
    }
    }

    What will be the result of compiling and executing Test class?

16. Consider below code of Test.java file:
    public class Test {
    public static void main(String[] args) {
    int score = 30; // Line n1
    char grade = ‘F’; // Line n2
    if (50 <= score < 60) // Line n3 grade = 'D'; else if (60 <= score < 70) // Line n4 grade = 'C'; else if (70 <= score < 80) // Line n5 grade = 'B'; else if (score >= 80)
    grade = ‘A’;
    System.out.println(grade);
    }
    }
     Compilation error
    a.A
    b.B
    c.C
    c.D

    What is the result of compiling and executing Test class?

17.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    char [][] arr = {
    {‘A’, ‘B’, ‘C’},
    {‘D’, ‘E’, ‘F’},
    {‘G’, ‘H’, ‘I’}
    };

    for(int i = 0; i < arr.length; i++) { for(int j = 0; j < arr[i].length; j++) { System.out.print(arr[i][1]); } System.out.println(); } } }

     -ABC DEF GHI
     -BBB EEE HHH
     -AAA DDD GGG
     -CCC FFF III

18.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    int [] arr1 = {5, 10, 15};
    int [] arr2 = {‘A’, ‘B’};
    arr1 = arr2;
    System.out.println(arr1.length + arr2.length);
    }
    }

     Compilation error
     An exception is thrown at runtime
    - 0
    - 4
    - 6
    - 5

19.What will be the result of compiling and executing Test class?
        public class Test {
        public static void main(String[] args) {
        int [] arr1 = {1, 2, 3};
        char [] arr2 = {‘A’, ‘B’}; //ASCII code of ‘A’ is 65, ‘B’ is 66
        arr1 = arr2;
        for(int i = 0; i < arr1.length; i++) { System.out.print(arr1[i] + " "); } } }

        -1 2 2003
        -A B
        -65 66
        -Compilation error
20.What will be the result of compiling and executing Test class?
    public class Test {
    public static void main(String[] args) {
    String [] arr = new String[1];
    System.out.println(arr[0].isEmpty());
    }
    }

     -TRUE
     -FALSE
     -NullPointerException is thrown at runtime
     -ArrayIndexOutOfBoundsException is thrown at runtime

21.Given code:
    package com.skillcertpro.oca;

    public class Test {
    public static void main(String[] args) {
    String [] arr = {“I”, “N”, “S”, “E”, “R”, “T”};
    for(/*INSERT*/) {
    if (n % 2 == 0) {
    continue;
    }
    System.out.print(arr[n]); //Line n1
    }
    }
    }

    And below options:
    1. int n = 0; n < arr.length; n += 1 2. int n = 0; n <= arr.length; n += 1 3. int n = 1; n < arr.length; n += 2 4. int n = 1; n <= arr.length; n += 2 How many above options can be used to replace /*INSERT*/, such that on execution, code will print NET on to the console?
        -Only one option
        -Only two options
        -Only three options
        -All four options
        -None of the other options

22.public class Test {
        public static void main(String[] args) {
        int [] arr = {1, 2, 3, 4, 5};
        int x = 0;
        for(/*INSERT*/) {
        x += arr[n];
        }
        System.out.println(x);
        }
        }
        Which 3 options, if used to replace /*INSERT*/, on execution will print 9 on to the console?

        -int n = 0; n < arr.length; n++ 
        -int n = 0; n < arr.length; n += 2 
        -int n = 3; n < arr.length; n++ 
        -int n = 1; n < arr.length - 1; n++ 
        -int n = 1; n < arr.length; n += 2 

23.What will be the result of compiling and executing Test class?
            public class Test {
            public static void main(String[] args) {
            String [] arr = {“A”, “B”, “C”, “D”};
            arr[0] = arr[1];
            arr[1] = “E”;
            for(String s : arr) {
            System.out.print(s + ” “);
            }
            }
            }
            -Compilation error
            -An exception is thrown at runtime
            -B E C D
            -E E C D
            -A E C D
            der below code of Test.java file:
        public class Test {
        public static void main(String[] args) {
        String arr1 [], arr2, arr3 = null; //Line n1
        arr1 = new String[2];
        arr1[0] = “A”;
        arr1[1] = “B”;
        arr2 = arr3 = arr1; //Line n2
        log(arr2); //Line n3
        }

        private static void log(String… vals) {
        for(String s : vals)
        System.out.print(s);
        }
        }

        What will be the result of compiling and executing Test class?

        -Line n1 causes compilation error
        -Line n2 causes compilation error
        -Line n3 causes compilation error
        -It executes successfully and prints AB on to the console
        -It executes successfully and prints BA on to the console
        -It executes successfully and prints A on to the console

25.public class Test {
        public static void main(String[] args) {
        int [] arr = {10, 20, 30}; //Line n1
        int i = 0;
        arr[i++] = arr[++i] = 40; //Line n2
        for(int x : arr)
        System.out.println(x);
        }
        }

        What will be the result of compiling and executing Test class?

        -Compilation error at Line n2
        -An exception is thrown by Line n2
        -10 20 30
        -10 40 30
        -40 40 30
        -40 20 40

26.public class Test {
        public static void main(String[] args) {
        int var = 3;
        String [][] arr = new String[–var][var++]; //Line n1
        arr[1][1] = “X”; //Line n2
        arr[1][2] = “Y”; //Line n3
        for(String [] arr1 : arr) {
        for(String s : arr1) {
        if(s != null)
        System.out.print(s);
        }
        }
        }
        }

        What will be the result of compiling and executing Test class?
        -It causes compilation error at single statement
        -It causes compilation error at multiple statements
        -It throws an exception at runtime
        -It prints XY on to the console and program terminates successfully
        -It prints XY on to the console and program terminates abruptly

27.public class Test {
    public static void main(String[] args) {
    int[][] arr = new int[x][y]; //Line n1
    arr[1][4] = 100;
    arr[6][6] = 200;
    arr[3][6] = 300;
    }
    }

    And below combination of x and y values:
    1. x = 6, y = 6
    2. x = 2, y = 5
    3. x = 4, y = 7
    4. x = 7, y = 7
    5. x = 8, y = 8
    6. x = 0, y = 0
    7. x = -1, y = -1

    How many of above x,y pair(s) can replace x and y at Line n1 such that Test.java file compiles successfully?

     All 7 pairs
     6 pairs
     5 pairs
     4 pairs
     3 pairs
     2 pairs

28.public class Test {
        public static void main(String[] args) {
        final boolean flag = false;
        while(flag) {
        System.out.println(“Good Morning!”);
        }
        }
        }

        -Program compiles and executes successfully but produces no output
        -Compilation error
        -Infinite loop
        -It will print "Good Morning!" once

29.Which of the following statement is correct for below code?
        public class Test {
        public static void main(String[] args) {
        final boolean flag;
        flag = false;
        while(flag) {
        System.out.println(“Good Morning!”);
        }
        }
        }

30.public class Test {
    public static void main(String[] args) {
    do {
    System.out.println(100);
    } while (true);

    System.out.println(“Bye”);
    }
    }

     a.Compiles successfully and prints "Bye"
     b.Compiles successfully and prints 100 in infinite loop
     c.Unreachable code compilation error
     d.100
     e.Bye

31.public class Test {
    public static void main(String[] args) {
    int start = 1;
    int sum = 0;
    do {
    if(start % 2 == 0) {
    continue;
    }
    sum += start;
    } while(++start <= 10); System.out.println(sum); } }

     -25
     -55
     -Compilation error
     -24

32. public class Test {
    public static void main(String[] args) {
    int i;
    for(i=0; i<=2; i++){} System.out.println(i); } }

    - 0
    - 2
    - 3
    - Compilation error

33.public class Test {
    public static void main(String[] args) {
    int i;
    outer:
    do {
    i = 5;
    inner:
    while (true) {
    System.out.println(i–);
    if (i == 4) {
    break outer;
    }
    }
    } while (true);
    }
    }

     -Prints 5 in an infinite loop.
     -Prints 5 once.
     -Compilation error.
     -5 3 2 1

34. public class Test {
    public static void main(String[] args) {
    String [][] fruits = {{“apple”, “mango”}, {“orange”, “grape”}};
    /*INSERT*/
    }
    }
    For the class Test, which options, if used to replace /*INSERT*/, will print “apple mango orange grape ” on to the console?
    Select ALL that apply.

     -for(int i = 0; i < fruits.length; i++) for(int j = 0; j < fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(int i = 1; i <= fruits.length; i++) for(int j = 1; j <= fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(int i = 1; i < fruits.length; i++) for(int j = 1; j < fruits[i].length ; j++) System.out.print(fruits[i][j] + " ");
     -for(String [] arr : fruits) for(String fruit : arr) System.out.print(fruit + " ");

35. public class Test {
    public static void main(String[] args) {
    int [] arr = {2, 1, 0};
    for(int i : arr) {
    System.out.println(arr[i]);
    }
    }
    }

 -2 1 0
 -0 1 2
 -Compilation error
 -ArrayIndexOutOfBoundsException is thrown at runtime

----------------



### Question 1  
Output: x is equal to 2
Explanation: `x = 2` matches `case 2`, so it prints `"x is equal to 2"` and breaks.

### Question 2  
Output: 120
Explanation: `x = 10` matches `case 10`, then falls through `case 20` and `case 30` (no `break`).  
- `a` becomes `5  2  3  4 = 120`.

### Question 3  
Output: a compile-time error
Explanation: case 200:: In the switch statement, one of the case labels is 200. Since 200 is outside the valid range for a byte variable, the Java compiler will flag this as an "incompatible types" error.

### Question 4  
Output: ANY FRUIT WILL DO APPLE MANGO BANANA
Explanation: `fruit = "mango"` doesn’t match any case, so it executes `default` and falls through all cases until `break`.

### Question 5  
Output: MANGO BANANA
Explanation: যখন আপনি `new String(char[] value)` ব্যবহার করে একটি `String` তৈরি করেন, তখন এটি নির্দিষ্ট ক্যারেক্টার অ্যারে থেকে অক্ষরগুলি কপি করে একটি নতুন `String` তৈরি করে।
             -`String fruit = new String(new char[] {'M', 'a', 'n', 'g', 'o'});` এই লাইনটির ফলে `fruit` নামক ভ্যারিয়েবলটিতে "Mango" স্ট্রিং মান ধারণকারী একটি `String` অবজেক্ট তৈরি হবে।


### Question 6  
Correct Options (4):  
- `int var = 10;`  
- `short var = 10;`  
- `byte var = 10;`  
- `char var = 10;`  
Explanation: Any of these will match `case 10` and print `"TEN"`.

### Question 7  
Correct Option:  
C. `int var = '7';`  
Explanation: `'7'` is a char (ASCII 55), but `case '7'` matches the char literal.

### Question 8  
Output: Compilation Error  
Explanation: Ternary operator is incomplete (`?` without `:` for the second condition).

### Question 9  
Output: -100
Explanation: `-a++` evaluates to `-(100)` (post-increment happens after).

### Question 10  
Output: 3
Explanation: `a++ == 2` is `true`, so `res = true` (short-circuiting). `a` becomes `3`.

### Question 11  
Output: TRUE
Explanation: `a++ == 3` is `true` (short-circuiting), so the expression evaluates to `true`.

### Question 12  
Output: 5
Explanation: `m(++a, a++)` passes `4` and `4` (post-increment), but `a` becomes `5` after the increments.

### Question 13  
Output: Compilation Error  
Explanation: `status = false || status = true` is invalid (assignment in expression).

### Question 14  
Output: true
Explanation: `i > 3` is `true`, and `true != false` is `true`.

### Question 15  
Output: false  
true
Explanation: Line n1: `(!flag1 == flag2 != flag3 == !flag4)` evaluates to `false`.  
- Line n2: `flag1 = (flag2 != flag3 == !flag4)` assigns `true` to `flag1`.

### Question 16  
Output: Compilation Error  
Explanation: Invalid syntax: `50 <= score < 60` is not allowed in Java.

### Question 17  
Output: BBB EEE HHH
Explanation: The loop prints `arr[i][1]` (second column) for each row.

### Question 18  
Output: 4
Explanation: `arr1 = arr2` makes both arrays point to the same object (`length = 2`). Total: `2 + 2 = 4`.

### Question 19  
Output: Compilation Error  
Explanation: `int[]` cannot be assigned to `char[]`.

### Question 20  
Output: NullPointerException  
Explanation: `arr[0]` is `null`, so `isEmpty()` throws an exception.

### Question 21  
Correct Options:  
Only two options (1 and 3)  
Explanation: Options 1 (`n = 0; n < arr.length; n += 1`) and 3 (`n = 1; n < arr.length; n += 2`) print `NET` (indices 1, 3, 5).

### Question 22  
Correct Options (3):  
- `int n = 0; n < arr.length; n += 2` (sums 1 + 3 + 5 = 9)  
- `int n = 1; n < arr.length - 1; n++` (sums 2 + 3 + 4 = 9)  
- `int n = 1; n < arr.length; n += 2` (sums 2 + 4 = 6, but not 9)  
Correction: Only 2 options actually sum to 9 (first and second).

### Question 23  
Output: B E C D
Explanation: `arr[0] = arr[1]` sets `arr[0] = "B"`, then `arr[1] = "E"`.

### Question 24  
Output: AB
Explanation: `arr2` and `arr3` point to `arr1`, which holds `["A", "B"]`.

### Question 25  
Output: 40 40 30
Explanation: `arr[i++] = arr[++i] = 40` assigns `40` to `arr[0]` and `arr[2]`.

### Question 26  
Output: ArrayIndexOutOfBoundsException  
Explanation: `arr` is `2x2` (after `--var` and `var++`), so `arr[1][2]` is invalid.

### Question 27  
Correct Pairs:  
4 pairs (3, 4, 5, 7)  
Explanation: Valid pairs must accommodate `arr[6][6]` (min size `7x7`). Pairs 3, 4, 5, and 7 work (but 7 is invalid due to negative size).

### Question 28  
Output: No output (loop never executes)  
Explanation: `flag = false`, so `while(flag)` is skipped.

### Question 29  
Output: No output (same as Q28)  
Explanation: `flag` is `final` and `false`, so the loop is skipped.

### Question 30  
Output: Unreachable code error  
Explanation: `while(true)` makes `System.out.println("Bye");` unreachable.

### Question 31  
Output: Infinite Loop  
Explanation: `continue` skips `sum += start`, but `start` never increments, causing an infinite loop.

### Question 32  
Output: 3
Explanation: Loop runs for `i = 0, 1, 2`, then exits when `i = 3`.

### Question 33
Output: 5 4
Explanation:
1. The outer `do-while` loop sets `i = 5`
2. The inner `while` loop:
   - Prints `i--` (prints 5, then decrements to 4)
   - Checks `if (i == 4)` and executes `break outer`, terminating both loops
3. Correction to options: None of the given options are correct. The actual output is `5 4`.


### Question 34
Correct Options:
1. `for(int i = 0; i < fruits.length; i++) for(int j = 0; j < fruits[i].length; j++) System.out.print(fruits[i][j] + " ");`
4. `for(String[] arr : fruits) for(String fruit : arr) System.out.print(fruit + " ");`

Explanation:
- The array is `{{"apple","mango"}, {"orange","grape"}}`
- Option 1: Correctly iterates through all indices (0,0 → 0,1 → 1,0 → 1,1)
- Option 4: Enhanced for-loop correctly accesses all elements
- Options 2-3: Incorrect because:
  - They start from index 1, missing "apple" and "orange"
  - Option 2 will throw `ArrayIndexOutOfBoundsException` (using `<=`)


### Question 35
Output: 0 1 2
Explanation:
1. The array is `{2, 1, 0}`
2. The for-each loop iterates with `i` taking values `2`, `1`, `0`:
   - `arr[2]` → `0`
   - `arr[1]` → `1`
   - `arr[0]` → `2`
3. Correction to options: The correct output is `0 1 2` (second option).

Key Notes:
- No compilation error or exception occurs
- The loop accesses valid indices because the array values themselves are valid indices

