
Date: 1 Auguest,2025


### ржХржоржи ржкрж┐ржЯржлрж▓рж╕ ржПржмржВ ржкрж░рзАржХрзНрж╖рж╛рзЯ ржЙрждрзНрждрж░ ржжрзЗрзЯрж╛рж░ ржЯрж┐ржкрж╕ (Common Pitfalls & Exam Answering Techniques)
ржПржЗ ржкрзНрж░рж╢рзНржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржпрзЗ рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ржЧрзБрж▓рзЛ ржкрж░рзАржХрзНрж╖рж╛рзЯ ржжрзЗржЦрж╛ ржпрж╛рзЯ ржПржмржВ ржХрзАржнрж╛ржмрзЗ ржПржЧрзБрж▓рзЛ ржПрзЬрж┐рзЯрзЗ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрзЗржмрзЗржи, рждрж╛ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:


### 1. ржЕрзНржпрж╛рж░рзЗ ржЗржиржбрзЗржХрзНрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ (Array Index Management)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q1, Q17, Q26  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- ржЕрзНржпрж╛рж░рзЗрж░ ржЗржиржбрзЗржХрзНрж╕ 0 ржерзЗржХрзЗ (length - 1) ржкрж░рзНржпржирзНржд рж╣рзЯред  
- `arr[arr.length]` ржмрж╛ `arr[-1]` ржПржХрзНрж╕рзЗрж╕ ржХрж░рж▓рзЗ `ArrayIndexOutOfBoundsException` ржЖрж╕ржмрзЗред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: рж▓рзБржк ржЪрж╛рж▓рж╛ржирзЛрж░ рж╕ржорзЯ `i < arr.length` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи (`i <= arr.length` ржирзЯ)ред  

ржЙржжрж╛рж╣рж░ржг (Q1):  
int[] arr = {3, 2, 1};
for(int i : arr) {
   System.out.println(arr[i]); // i=3 рж╣рж▓рзЗ ржЕрзНржпрж╛рж░рзЗрждрзЗ рзй ржиржВ ржЗржиржбрзЗржХрзНрж╕ ржирзЗржЗ!
}
```
ржЖржЙржЯржкрзБржЯ: `ArrayIndexOutOfBoundsException`  


### 2. рж▓рзБржк ржХржирзНржЯрзНрж░рзЛрж▓ (Loop Control)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q3, Q7, Q31  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- `break` тЖТ рж▓рзБржк ржерж╛ржорж┐рзЯрзЗ ржжрзЗрзЯред  
- `continue` тЖТ ржмрж╛ржХрж┐ ржХрзЛржб рж╕рзНржХрж┐ржк ржХрж░рзЗ ржкрж░рзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржирзЗ ржпрж╛рзЯред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `break` ржмрж╛ `continue` ржПрж░ ржкрж░рзЗрж░ ржХрзЛржб ржЪрзЗржХ ржХрж░рзБржи (Unreachable рж╣рждрзЗ ржкрж╛рж░рзЗ)ред  

ржЙржжрж╛рж╣рж░ржг (Q7):  
do {
   if(flag = !flag) {
      System.out.print(1);
      continue; // Line n3
   }
   System.out.print(2); // Unreachable ржпржжрж┐ continue ржХрж╛рж░рзНржпржХрж░ рж╣рзЯ!
} while(flag);
```
ржЖржЙржЯржкрзБржЯ: `12` (ржкрзНрж░ржержо ржЗржЯрж╛рж░рзЗрж╢ржирзЗ `1`, ржжрзНржмрж┐рждрзАрзЯрждрзЗ `2`)  


### 3. рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ vs ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ (Static vs Instance Variables)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q17, Q30  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзЗрж░рж┐рзЯрзЗржмрж▓: рж╕ржм ржЕржмржЬрзЗржХрзНржЯрзЗ рж╢рзЗрзЯрж╛рж░ рж╣рзЯред  
- ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзЗрж░рж┐рзЯрзЗржмрж▓: ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЖрж▓рж╛ржжрж╛ ржХржкрж┐ ржерж╛ржХрзЗред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `static` ржнрзЗрж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржорж╛ржи рж╢рзЗрж╖ ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ ржЕржирзБржпрж╛рзЯрзА ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рзЯред  

ржЙржжрж╛рж╣рж░ржг (Q30):  
static int ctr = 0; // рж╢рзЗрзЯрж╛рж░рзНржб
int count = 0; // ржЖрж▓рж╛ржжрж╛
```
ржЖржЙржЯржкрзБржЯ: `15:5` (рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ `ctr` рззрзл ржмрж╛рж░ ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ, ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ `count` рзл ржмрж╛рж░)ред  


### 4. ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ ржЪрзЗржЗржирж┐ржВ (Constructor Chaining)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q8, Q24  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- ржПржХ ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ ржерзЗржХрзЗ ржЕржирзНржп ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ ржХрж▓ ржХрж░рждрзЗ `this()` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `this()` ржЕржмрж╢рзНржпржЗ ржкрзНрж░ржержо рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ рж╣рждрзЗ рж╣ржмрзЗред  

ржЙржжрж╛рж╣рж░ржг (Q24):  
Student() {
   Student("James", 25); // ржХржорзНржкрж╛ржЗрж▓ ржПрж░рж░! this("James", 25); рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗред
}
```
ржЖржЙржЯржкрзБржЯ: `Compilation error`  


### 5. ржорзЗржержб ржУржнрж╛рж░рж▓рзЛржбрж┐ржВ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи (Method Overloading Resolution)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q15, Q21, Q22  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- `int` тЖТ `double` тЖТ `Double` ржЕржЯрзЛ-ржХржиржнрж╛рж░рзНрж╕ржирзЗрж░ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `null` ржкрж╛рж╕ ржХрж░рж▓рзЗ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ `Double` ржнрж╛рж░рзНрж╕ржи ржкржЫржирзНржж ржХрж░рзЗ (ржпржжрж┐ `int` ржнрж╛рж░рзНрж╕ржи ржирж╛ ржерж╛ржХрзЗ)ред  

ржЙржжрж╛рж╣рж░ржг (Q22):  
add(10.0, null); // Double ржнрж╛рж░рзНрж╕ржи ржХрж▓, NullPointerException
```
ржЖржЙржЯржкрзБржЯ: `Runtime Exception`  


### 6. рж╕рзБржЗржЪ-ржХрзЗрж╕ ржлрж▓ ржерзНрж░рзБ (Switch-Case Fall Through)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q4, Q5  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- `break` ржирж╛ ржжрж┐рж▓рзЗ ржкрж░рзЗрж░ рж╕ржм `case` ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржмрзЗред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `default` ржпрзЗржХрзЛржирзЛ ржЬрж╛рзЯржЧрж╛рзЯ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред  

ржЙржжрж╛рж╣рж░ржг (Q4):  
switch(fruit) {
   default: System.out.println("ANY FRUIT");
   case "Apple": System.out.println("APPLE"); // ржлрж▓ ржерзНрж░рзБ!
}
```
ржЖржЙржЯржкрзБржЯ: `ANY FRUIT APPLE`  


### 7. ржкрж╛рж╕-ржмрж╛ржЗ-ржнрзНржпрж╛рж▓рзБ (Pass-by-Value)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q10, Q28  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- ржЬрж╛ржнрж╛рзЯ рж╕ржмрж╕ржорзЯ ржкрж╛рж╕-ржмрж╛ржЗ-ржнрзНржпрж╛рж▓рзБ рж╣рзЯ (ржЕржмржЬрзЗржХрзНржЯрзЗрж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржУ ржХржкрж┐ рж╣рзЯ)ред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: ржорзЗржержбрзЗ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯ ржЕрзНржпрж╛рж╕рж╛ржЗржи ржХрж░рж▓рзЗ ржорзВрж▓ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗред  

ржЙржжрж╛рж╣рж░ржг (Q28):  
void evaluate(Threat t) {
   t = new Threat(); // ржорзВрж▓ ржЕржмржЬрзЗржХрзНржЯрзЗ ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ!
}
```
ржЖржЙржЯржкрзБржЯ: `VIRUS VIRUS`  


### 8. ржУрзЯrapper ржХрзНрж▓рж╛рж╕ ржУ NullPointerException
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q18, Q19, Q21  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- `Boolean.valueOf("TrUe")` тЖТ `true` (ржХрзЗрж╕-ржЗржирж╕рзЗржирж╕рж┐ржЯрж┐ржн)ред  
- `Boolean[] arr` тЖТ ржбрж┐ржлрж▓рзНржЯ ржорж╛ржи `null`ред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `null` рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗ ржорзЗржержб ржХрж▓ ржХрж░рж▓рзЗ `NullPointerException`ред  

ржЙржжрж╛рж╣рж░ржг (Q21):  
Double[] arr = new Double[2];
System.out.println(arr[0] + arr[1]); // arr[0].doubleValue() тЖТ NPE
```
ржЖржЙржЯржкрзБржЯ: `NullPointerException`  


### 9. ржлрж░-рж▓рзБржкрзЗрж░ ржмрж┐рж╣рзЗржнрж┐рзЯрж╛рж░ (For-Loop Behavior)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q6, Q6.1, Q6.2  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- `for(initialization; condition; increment)` ржПрж░ рж╕ржм ржЕржВрж╢ ржЕржкрж╢ржирж╛рж▓ред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬрзЗрж╢ржирзЗ `System.out.print` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ!  

ржЙржжрж╛рж╣рж░ржг (Q6):  
for(System.out.print(i++); i < 2; System.out.print(i++)) {
   System.out.print(i);
}
```
ржЖржЙржЯржкрзБржЯ: `011`  


### 10. рж╢рзНржпрж╛ржбрзЛржЗржВ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ (Variable Shadowing)
ржпрзЗрж╕ржм ржкрзНрж░рж╢рзНржирзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ: Q25  
ржоржирзЗ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:  
- рж▓рзЛржХрж╛рж▓ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржХрзНрж▓рж╛рж╕ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ржХрзЗ рж╢рзНржпрж╛ржбрзЛ ржХрж░рждрзЗ ржкрж╛рж░рзЗред  
- ржкрж░рзАржХрзНрж╖рж╛рж░ ржЯрж┐ржк: `String str = str + "X";` тЖТ ржХржорзНржкрж╛ржЗрж▓ ржПрж░рж░ (рж▓рзЛржХрж╛рж▓ `str` ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬржб ржирж╛)ред  

ржЙржжрж╛рж╣рж░ржг (Q25):  
static String str = "A";
String str = str + "B"; // рж╢рзНржпрж╛ржбрзЛржЗржВ, ржХржорзНржкрж╛ржЗрж▓ ржПрж░рж░
```
ржЖржЙржЯржкрзБржЯ: `Compilation error`  


### ржорзБржЦрж╕рзНрже рж░рж╛ржЦрж╛рж░ ржЯрж┐ржкрж╕:  
1. ржЕрзНржпрж╛рж░рзЗ ржЗржиржбрзЗржХрзНрж╕ рж╕рж░рзНржмржжрж╛ `0` ржерзЗржХрзЗ рж╢рзБрж░рзБред  
2. `switch`-ржП `break` ржнрзБрж▓рзЗ ржЧрзЗрж▓рзЗ fall through рж╣ржмрзЗред  
3. `static` ржнрзЗрж░рж┐рзЯрзЗржмрж▓ рж╕ржм ржЕржмржЬрзЗржХрзНржЯрзЗ рж╢рзЗрзЯрж╛рж░ рж╣рзЯред  
4. `null` рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗ ржорзЗржержб ржХрж▓ тЖТ `NullPointerException`ред  
5. `==` vs `.equals()` ржПрж░ ржкрж╛рж░рзНржержХрзНржп ржоржирзЗ рж░рж╛ржЦрзБржиред  

ржПржЗ ржЧрж╛ржЗржбрж▓рж╛ржЗржи ржлрж▓рзЛ ржХрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛рзЯ ржХржоржи ржнрзБрж▓ржЧрзБрж▓рзЛ ржПрзЬрж┐рзЯрзЗ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрж┐ржи! ЁЯЪА
-----


ржПржЗ ржкрзНрж░рж╢рзНржиржЧрзБрж▓рзЛ рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЬрж╛ржнрж╛ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВрзЯрзЗрж░ ржмрзЗрж╢ ржХрж┐ржЫрзБ ржорзМрж▓рж┐ржХ ржПржмржВ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржзрж╛рж░ржгрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржЬрж╛ржирждрзЗ рж╣ржмрзЗред ржПржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи ржЕржирзБржпрж╛ржпрж╝рзА ржоржирзЗ рж░рж╛ржЦрж╛рж░ ржорждрзЛ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рзЛ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:

### рж▓рзБржк (Loops) ржПржмржВ ржЕрзНржпрж╛рж░рзЗ (Arrays)
* For-each рж▓рзБржкрзЗрж░ ржмрзНржпржмрж╣рж╛рж░ (For-each Loop): `for(int i : arr)` рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ржЯрж┐ `arr` ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЙржкрж╛ржжрж╛ржиржХрзЗ ржПржХрзЗ ржПржХрзЗ `i` ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржоржзрзНржпрзЗ рж░рж╛ржЦрзЗред 
  `i` ржПржЦрж╛ржирзЗ ржЕрзНржпрж╛рж░рзЗрж░ ржЗржиржбрзЗржХрзНрж╕ ржиржпрж╝, ржмрж░ржВ ржЕрзНржпрж╛рж░рзЗрж░ ржнрзЗрждрж░рзЗрж░ ржорж╛ржиред рждрж╛ржЗ `arr[i]` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ `ArrayIndexOutOfBoundsException` рж╣рждрзЗ ржкрж╛рж░рзЗ (ржкрзНрж░рж╢рзНржи рзз)ред

* рж▓рзБржк ржПржмржВ `continue`/`break`:
    * `break` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ рж╕ржмржЪрзЗржпрж╝рзЗ ржХрж╛ржЫрзЗрж░ рж▓рзБржк ржерзЗржХрзЗ ржмрзЗрж░ ржХрж░рзЗ ржжрзЗрзЯред ржирзЗрж╕рзНржЯрзЗржб рж▓рзБржкрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржПржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржнрзЗрждрж░рзЗрж░ рж▓рзБржкржХрзЗ ржерж╛ржорж╛ржпрж╝, ржмрж╛ржЗрж░рзЗрж░ рж▓рзБржкржХрзЗ ржиржпрж╝ (ржкрзНрж░рж╢рзНржи рзй ржУ рзл)ред
    * `continue` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржмрж░рзНрждржорж╛ржи ржЗржЯрж╛рж░рзЗрж╢ржиржХрзЗ ржерж╛ржорж┐рзЯрзЗ ржкрж░рзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржирзЗ ржЪрж▓рзЗ ржпрж╛рзЯ (ржкрзНрж░рж╢рзНржи рзи)ред ржПржЯрж┐ рж▓рзБржкрзЗрж░ рж╢рж░рзНржд ржкрзБржирж░рж╛рзЯ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗред
* рж▓рзЗржмрзЗрж▓ рж╕рж╣ рж▓рзБржк (Labeled Loops): ржПржХржЯрж┐ рж▓рзБржкржХрзЗ рж▓рзЗржмрзЗрж▓ ржжрж┐ржпрж╝рзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзЗ `break` ржмрж╛ `continue` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж▓рзЗржмрзЗрж▓рзЗрж░ рж▓рзБржкржЯрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред ржпрзЗржоржи, `break A;` `A` ржирж╛ржоржХ рж▓рзЗржмрзЗрж▓ржпрзБржХрзНржд рж▓рзБржк ржерзЗржХрзЗ ржмрзЗрж░ ржХрж░рзЗ ржжрзЗрзЯ (ржкрзНрж░рж╢рзНржи рзк)ред
* `for` рж▓рзБржкрзЗрж░ ржЕржВрж╢рж╕ржорзВрж╣: `for` рж▓рзБржкрзЗрж░ ржоржзрзНржпрзЗ рждрж┐ржиржЯрж┐ ржЕржВрж╢ржЗ (initialization, condition, update) ржРржЪрзНржЫрж┐ржХред ржПржЗ ржЕржВрж╢ржЧрзБрж▓рзЛрждрзЗ ржПржХрж╛ржзрж┐ржХ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ ржХржорж╛ ржжрж┐рзЯрзЗ рж▓рзЗржЦрж╛ ржпрж╛рзЯ (ржкрзНрж░рж╢рзНржи рзм)ред

### ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржПржмржВ рж╕рзНржХрзЛржк (Variables and Scope)
* рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ (Local Variables): ржорзЗржержб ржмрж╛ ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ ржШрзЛрж╖рж┐ржд ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЧрзБрж▓рзЛ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ред ржПржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЕржмрж╢рзНржпржЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рждрзЗ рж╣ржпрж╝, ржЕржирзНржпржерж╛ржпрж╝ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи рждрзНрж░рзБржЯрж┐ рж╣рзЯ (ржкрзНрж░рж╢рзНржи рззрзи ржУ рззрзп)ред
* ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржУ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓:
    * ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝ред
    * рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржХрзНрж▓рж╛рж╕-рж▓рзЗржнрзЗрж▓рзЗрж░, ржпрж╛ рж╕ржорж╕рзНржд ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ржЗ ржХржкрж┐ ржерж╛ржХрзЗред ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЗ рждрж╛ рж╕ржм ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЬржирзНржп ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ (ржкрзНрж░рж╢рзНржи рззрзн ржУ рзйрзж)ред
* рж╢рзНржпрж╛ржбрзЛржЗржВ (Shadowing): ржпржЦржи ржПржХржЯрж┐ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржирж╛ржо ржХрзЛржирзЛ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржмрж╛ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржирж╛ржорзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗ ржпрж╛ржпрж╝, рждржЦржи рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ ржкрзНрж░рж┐ржлрж╛рж░рзЗржирзНрж╕ ржкрж╛рзЯред 
  ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржорзЗржержбрзЗрж░ ржнрзЗрждрж░рзЗ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рждрзЗ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи рзирзл)ред

### ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ (Constructors)
* `this()` ржмрзНржпржмрж╣рж╛рж░: `this()` ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЗ ржХрзНрж▓рж╛рж╕рзЗрж░ ржЕржирзНржп ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ржХрзЗ ржХрж▓ ржХрж░рж╛ ржпрж╛ржпрж╝ред ржПржЯрж┐ ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ ржЪрзЗржЗржирж┐ржВ (constructor chaining) ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред `this()` ржХрж▓ржЯрж┐ ржЕржмрж╢рзНржпржЗ ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░рзЗрж░ ржкрзНрж░ржержо рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ рж╣рждрзЗ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи рзо ржУ рзирзк)ред
* ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи: ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░рзЗрж░ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржПржмржВ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржирж╛ржо ржПржХржЗ рж╣рж▓рзЗ, `this.variableName` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рждрзЗ рж╣рзЯред 
  рж╢рзБржзрзБ `variableName` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржХрзЗржЗ ржмрзЛржЭрж╛ржирзЛ рж╣ржпрж╝, ржлрж▓рзЗ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬржб рж╣ржпрж╝ ржирж╛ (ржкрзНрж░рж╢рзНржи рзйрзи)ред

### ржорзЗржержб ржПржмржВ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ (Methods and References)
* ржкрж╛рж╕-ржмрж╛ржЗ-ржнрзНржпрж╛рж▓рзБ (Pass-by-Value): ржЬрж╛ржнрж╛рждрзЗ рж╕ржмрж╕ржоржпрж╝ржЗ ржЖрж░рзНржЧрзБржорзЗржирзНржЯржЧрзБрж▓рзЛ ржкрж╛рж╕-ржмрж╛ржЗ-ржнрзНржпрж╛рж▓рзБ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржЕржмржЬрзЗржХрзНржЯ рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗрж░ ржПржХржЯрж┐ ржХржкрж┐ ржкрж╛рж╕ рж╣ржпрж╝ред 
   ржПрж░ ржлрж▓рзЗ ржорзЗржержбрзЗрж░ ржоржзрзНржпрзЗ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЯрж┐ржХрзЗ ржПржХржЯрж┐ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржжрж┐ржХрзЗ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рж╛ рж╣рж▓рзЗржУ ржорзВрж▓ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗ (ржкрзНрж░рж╢рзНржи рзирзо)ред
    * рждржмрзЗ, ржорзЗржержбрзЗрж░ ржоржзрзНржпрзЗ ржпржжрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржХрзЛржирзЛ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯ, рждржмрзЗ рждрж╛ ржорзВрж▓ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ржХрзЗржЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ (ржкрзНрж░рж╢рзНржи рзп ржУ рззрзж)ред
* рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржорзЗржержб ржХрж▓ ржХрж░рж╛: рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржорзЗржержбржЧрзБрж▓рзЛ ржХрзНрж▓рж╛рж╕-рж▓рзЗржнрзЗрж▓рзЗ ржерж╛ржХрзЗ ржПржмржВ ржХрзЛржирзЛ ржЕржмржЬрзЗржХрзНржЯ ржЫрж╛ржбрж╝рж╛ржЗ рж╕рж░рж╛рж╕рж░рж┐ ржХрзНрж▓рж╛рж╕ ржирж╛ржо ржжрж┐ржпрж╝рзЗ ржХрж▓ ржХрж░рж╛ ржпрж╛ржпрж╝ред ржПржоржиржХрж┐ ржПржХржЯрж┐ `null` рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржжрж┐ржпрж╝рзЗржУ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржорзЗржержб ржХрж▓ ржХрж░рж╛ рж╕ржорзНржнржм (ржкрзНрж░рж╢рзНржи рззрзз)ред
* ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржоржбрж┐ржлрж╛ржпрж╝рж╛рж░ (Access Modifiers): ржПржХржЯрж┐ ржорзЗржержбрзЗрж░ рж░рж┐ржЯрж╛рж░рзНржи ржЯрж╛ржЗржк ржПржмржВ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░рзЗрж░ рж╕ржВржЦрзНржпрж╛ ржУ ржзрж░ржи (`method signature`) ржПрж░ ржЕржВрж╢ред ржорзЗржержб ржХрж▓ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржЯрж┐ ржХржорзНржкрж╛ржЗрж▓-ржЯрж╛ржЗржорзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржпрж╝ред 
   рж╕ржарж┐ржХ ржорзЗржержб ржбрзЗржлрж┐ржирж┐рж╢ржи ржирж╛ ржерж╛ржХрж▓рзЗ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝ (ржкрзНрж░рж╢рзНржи рззрзм)ред
* ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржЖрж░рзНржЧрзБржорзЗржирзНржЯ (Varargs): ржПржХржЯрж┐ ржорзЗржержб ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░рзЗ `...` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗред ржПржЯрж┐ ржорзЗржержб ржУржнрж╛рж░рж▓рзЛржбрж┐ржВржпрж╝рзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржХржо ржкрзНрж░рж╛ржзрж╛ржирзНржп ржкрж╛ржпрж╝ред 
  ржпржжрж┐ ржПрж░ ржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ рждрж╛рж▓рж┐ржХрж╛ржпрзБржХрзНржд ржорзЗржержб ржерж╛ржХрзЗ (ржпрзЗржоржи `(char)` ржмрж╛ `(char, char)`), рждрж╛рж╣рж▓рзЗ рж╕рзЗржЧрзБрж▓рж┐ржЗ ржЖржЧрзЗ ржХрж▓ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи рзйрзз)ред

### ржбрзЗржЯрж╛ ржЯрж╛ржЗржк ржПржмржВ ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ
* ржкрзНрж░рж┐ржорж┐ржЯрж┐ржн ржЯрж╛ржЗржк ржПржмржВ рж░рзЗржкрж╛рж░ ржХрзНрж▓рж╛рж╕ (Primitive vs. Wrapper Classes): ржорзЗржержб ржУржнрж╛рж░рж▓рзЛржбрж┐ржВрзЯрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржЬрж╛ржнрж╛ ржкрзНрж░ржержорзЗ рж╕ржарж┐ржХ ржорзНржпрж╛ржЪ ржЦрзЛржБржЬрзЗред ржпржжрж┐ ржПржХржЯрж┐ ржкрзНрж░рж┐ржорж┐ржЯрж┐ржн ржЯрж╛ржЗржк ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝,
   рждржмрзЗ ржПржЯрж┐ `varargs` ржПрж░ ржЪрзЗржпрж╝рзЗ ржПржХржЯрж┐ ржЙржкржпрзБржХрзНржд ржкрзНрж░рж┐ржорж┐ржЯрж┐ржн ржЯрж╛ржЗржк ржмрж╛ рждрж╛рж░ рж░рзЗржкрж╛рж░ ржХрзНрж▓рж╛рж╕ржХрзЗ ржмрзЗрж╢рж┐ ржкрзНрж░рж╛ржзрж╛ржирзНржп ржжрзЗржмрзЗред ржпрзЗржоржи, `byte` ржХрзЗ ржкрзНрж░ржержорзЗ `Byte` ржмрж╛ `int` ржЯрж╛ржЗржкрзЗрж░ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░рзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи рзирзж, рзирзз, рзирзи)ред
* ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓: ржПржХржЗ рж╕рзНржХрзЛржкрзЗ ржПржХржЗ ржирж╛ржорзЗрж░ ржжрзБржЯрж┐ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ред `main` ржорзЗржержбрзЗрж░ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ `String[] args` ржПржХржЯрж┐ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ, 
  рждрж╛ржЗ ржПржХржЗ ржирж╛ржорзЗрж░ ржЖрж░рзЗржХржЯрж┐ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ (`short[] args`) ржШрзЛрж╖ржгрж╛ ржХрж░рж▓рзЗ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи рждрзНрж░рзБржЯрж┐ рж╣ржмрзЗ (ржкрзНрж░рж╢рзНржи рззрзо)ред




1. What will be the result of compiling and executing Test class?
   public class Test {
   public static void main(String[] args) {
   int [] arr = {3, 2, 1};
   for(int i : arr) {
   System.out.println(arr[i]);
   }}}


1. Answer: 
   `int[] arr = {3, 2, 1};` ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рж┐ рж╣рж▓рзЛ 3, 2, 1ред 
    ** `arr[0]` рж╣рж▓рзЛ 3   * `arr[1]` рж╣рж▓рзЛ 2   * `arr[2]` рж╣рж▓рзЛ 1            
    ** ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐рждрзЗ, `i` ржПрж░ ржорж╛ржи рж╣ржмрзЗ ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░ржержо ржЙржкрж╛ржжрж╛ржи, ржпрж╛ 3ред ржПрж░ржкрж░ `System.out.println(arr[i]);` ржЕрж░рзНржерж╛рзО `System.out.println(arr[3]);` ржХрж╛рж░рзНржпржХрж░ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржмрзЗред
    ржпрзЗрж╣рзЗрждрзБ ржЕрзНржпрж╛рж░рзЗрж░ ржмрзИржз ржЗржиржбрзЗржХрзНрж╕ржЧрзБрж▓рж┐ 0, 1, 2 ржкрж░рзНржпржирзНржд, ржПржмржВ 3 ржПржХржЯрж┐ ржЕржмрзИржз ржЗржиржбрзЗржХрзНрж╕, 
    рждрж╛ржЗ ржЬрж╛ржнрж╛ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржорзЗрж╢рж┐ржи (`JVM`) ржПржХржЯрж┐ `ArrayIndexOutOfBoundsException` ржирж┐ржХрзНрж╖рзЗржк ржХрж░ржмрзЗ ржПржмржВ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржмржирзНржз рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред

----------

2. Consider below code of Test.java file:
   public class Test {
   public static void main(String[] args) {
   int elements = 0;
   Object [] arr = {тАЬAтАЭ, тАЬEтАЭ, тАЬIтАЭ, new Object(), тАЬOтАЭ, тАЬUтАЭ}; //Line n1
   for(Object obj : arr) { //Line n2
      if(obj instanceof String) {
      continue;
      } else {
      break;
      }
   elements++; //Line n3
   }
   System.out.println(elements); //Line n4
   }}
   What will be the result of compiling and executing Test class?
    Compilation error at Line n1
    Compilation error at Line n2
    Compilation error at Line n3
    Compilation error at Line n4



2.Answer: 
   ржпрзЗрж╣рзЗрждрзБ elements++ рж▓рж╛ржЗржиржЯрж┐ ржХрзЛржирзЛ ржЕржмрж╕рзНржерж╛рждрзЗржЗ ржХрж╛рж░рзНржпржХрж░ ржХрж░рж╛ рж╕ржорзНржнржм ржиржпрж╝ (ржХрж╛рж░ржг ржПрж░ ржарж┐ржХ ржЙржкрж░рзЗ continue ржЕржержмрж╛ break рж╕рж░рзНржмржжрж╛ ржХрж╛рж░рзНржпржХрж░ рж╣ржмрзЗ), рждрж╛ржЗ ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржЯрж┐ржХрзЗ ржПржХржЯрж┐ "unreachable statement" рждрзНрж░рзБржЯрж┐ рж╣рж┐рж╕рзЗржмрзЗ ржзрж░ржмрзЗред
   ржЕрждржПржм, рж╕ржарж┐ржХ ржЙрждрзНрждрж░ржЯрж┐ рж╣рж▓рзЛ: Line n3 рждрзЗ ржПржХржЯрж┐ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи рждрзНрж░рзБржЯрж┐ рж╣ржмрзЗ, ржХрж╛рж░ржг elements++; рж▓рж╛ржЗржиржЯрж┐ Unreachable statementред
   **ржЪрждрзБрж░рзНрже ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐: obj ржПрж░ ржорж╛ржи new Object()ред
   new Object() ржПржХржЯрж┐ String ржиржпрж╝ред
   if(obj instanceof String) рж╢рж░рзНрждржЯрж┐ ржорж┐ржерзНржпрж╛ рж╣ржпрж╝ред
   else ржмрзНрж▓ржХ ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ ржПржмржВ break рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ рж▓рзБржкржЯрж┐ржХрзЗ рж╕ржорзНржкрзВрж░рзНржгрж░рзВржкрзЗ ржмржирзНржз ржХрж░рзЗ ржжрзЗржпрж╝ред

----------

3. Consider below code of Test.java file:
  public class Test {
   public static void main(String[] args) {
   String [][] arr = { {тАЬ%тАЭ, тАЬ$$тАЭ}, {тАЬ***тАЭ, тАЬ@@@@тАЭ, тАЬ#####тАЭ}};
   for(String [] str : arr) {
         for(String s : str) {
         System.out.println(s);
         if(s.length() == 4) //Line n1
         break; //Line n2
         }
   break; //Line n3
  }}}
   What will be the result of compiling and executing Test class?
    %
    % $$
    % $$ ***
    % $$ *** @@@@
    % $$ *** @@@@ #####


3. Answer: 
      Setp_1.ржЕрзНржпрж╛рж░рзЗрж░ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи (Array Initialization): `String [][] arr = { {"%", "$$"}, {"", "@@@@", "#####"}};`  ржПржЯрж┐ ржПржХржЯрж┐ ржжрзНржмрж┐-ржорж╛рждрзНрж░рж┐ржХ (two-dimensional) ржЕрзНржпрж╛рж░рзЗред
              arr[0] рж╣рж▓рзЛ {"%", "$$"};  
              arr[1] рж╣рж▓рзЛ {"", "@@@@", "#####"}

      Setp_2.ржЖржЙржЯрж╛рж░ рж▓рзБржк (Outer Loop): `for(String [] str : arr)`: ржПржЗ рж▓рзБржкржЯрж┐ `arr` ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржнрзЗрждрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж░ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (iterate) ржХрж░рзЗред
             ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐: `str` ржПрж░ ржорж╛ржи рж╣ржмрзЗ `{"%", "$$"}`ред  

      Setp_3.ржЗржирж╛рж░ рж▓рзБржк (Inner Loop): `for(String s : str)`:  ржПржЗ рж▓рзБржкржЯрж┐ `str` (ржмрж░рзНрждржорж╛ржирзЗ `{"%", "$$"}`) ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржЙржкрж╛ржжрж╛ржирзЗрж░ ржЙржкрж░ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржХрж░рзЗред
             ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЗржирж╛рж░ рж▓рзБржк): `s` ржПрж░ ржорж╛ржи рж╣ржмрзЗ `"%"`ред
                 `System.out.println(s);` ржЖржЙржЯржкрзБржЯ ржХрж░ржмрзЗ: `%`
                 `if(s.length() == 4)`: `"%"` ржПрж░ ржжрзИрж░рзНржШрзНржп 1, ржпрж╛ 4 ржПрж░ рж╕ржорж╛ржи ржиржпрж╝ред рждрж╛ржЗ `if` рж╢рж░рзНрждржЯрж┐ ржорж┐ржерзНржпрж╛ рж╣ржпрж╝ред         
             ржжрзНржмрж┐рждрзАржпрж╝ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЗржирж╛рж░ рж▓рзБржк): `s` ржПрж░ ржорж╛ржи рж╣ржмрзЗ `"$$"`ред
                 `System.out.println(s);` ржЖржЙржЯржкрзБржЯ ржХрж░ржмрзЗ: `$$`
                 `if(s.length() == 4)`: `"$$"` ржПрж░ ржжрзИрж░рзНржШрзНржп $, ржпрж╛ 4 ржПрж░ рж╕ржорж╛ржи ржиржпрж╝ред рждрж╛ржЗ `if` рж╢рж░рзНрждржЯрж┐ ржорж┐ржерзНржпрж╛ рж╣ржпрж╝ред
                 ржЗржирж╛рж░ рж▓рзБржкрзЗрж░ ржПржЗ `str` ржЕрзНржпрж╛рж░рзЗрж░ ржЖрж░ ржХрзЛржирзЛ ржЙржкрж╛ржжрж╛ржи ржирзЗржЗ, рждрж╛ржЗ ржЗржирж╛рж░ рж▓рзБржкржЯрж┐ рж╢рзЗрж╖ рж╣ржпрж╝ред         
      Setp_4.ржЖржЙржЯрж╛рж░ рж▓рзБржкрзЗрж░ `break` (Line n3): ржЗржирж╛рж░ рж▓рзБржк рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ ржкрж░, ржХржирзНржЯрзНрж░рзЛрж▓ `break;` (Line n3) рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗ ржЖрж╕рзЗред ржПржЗ `break` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржЖржЙржЯрж╛рж░ рж▓рзБржкржХрзЗ рж╕ржорзНржкрзВрж░рзНржгрж░рзВржкрзЗ ржмржирзНржз ржХрж░рзЗ ржжрзЗржпрж╝ред         
      
      ### ржлрж▓рж╛ржлрж▓ (Result)
      ржпрзЗрж╣рзЗрждрзБ ржЖржЙржЯрж╛рж░ рж▓рзБржкржЯрж┐ ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐рж░ ржкрж░рзЗржЗ `break` рж╣ржпрж╝рзЗ ржпрж╛ржЪрзНржЫрзЗ, ржжрзНржмрж┐рждрзАржпрж╝ ржнрзЗрждрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗ (`{"", "@@@@", "#####"}`) ржХржЦржирзЛржЗ ржкрзНрж░рж╕рзЗрж╕ рж╣ржмрзЗ ржирж╛ред
      ржЕрждржПржм, ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржУ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж▓рзЗ ржпрзЗ ржЖржЙржЯржкрзБржЯ ржжрзЗржмрзЗ рждрж╛ рж╣рж▓рзЛ:
      %
      $$

----------

4. public class Test {
   public static void main(String[] args) {
   int i = 1;
   int j = 5;
   int k = 0;
   A: while(true) { i++;
   B: while(true) { j--;
   C: while(true) {
       k += i + j;
       if(i == j) break A;
       else if (i > j) continue A;
       else continue B;
      }}}
       System.out.println(k);
      }}   
   What will be the result of compiling and executing Test class?   
    Compilation error
    Program never terminates as above code causes infinite loop
    6
    11
    15



4. Answer: 
 ржЖржорж░рж╛ `i`, `j`, ржПржмржВ `k` ржПрж░ ржорж╛ржиржЧрзБрж▓рзЛ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░ржм, ржПржмржВ ржжрзЗржЦржм ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржлрзНрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝ред
      ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи:  * `i = 1`  * `j = 5`  * `k = 0`
      рззржо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЖржЙржЯрж╛рж░ рж▓рзБржк A):
      1.  `i++` рж╣ржпрж╝, рждрж╛ржЗ `i` ржПрж░ ржорж╛ржи рж╣ржпрж╝ 2ред
      2.  рззржо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржорж╛ржЭрзЗрж░ рж▓рзБржк B):
            * `j--` рж╣ржпрж╝, рждрж╛ржЗ `j` ржПрж░ ржорж╛ржи рж╣ржпрж╝ 4ред
            * рззржо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЗржирж╛рж░ рж▓рзБржк C):
                * `k += i + j` ржорж╛ржирзЗ `k = k + (2 + 4) = 0 + 6 = 6`ред ржПржЦржи `k` ржПрж░ ржорж╛ржи 6ред
                * `if(i == j)` (2 == 4)? `false`ред
                * `else if (i > j)` (2 \> 4)? `false`ред
                * `else` ржмрзНрж▓ржХрзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗ (`i < j` рж╕рждрзНржп)ред `continue B;` ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ред
                * ржПржЯрж┐ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорж╛ржЭрзЗрж░ рж▓рзБржк (B) ржПрж░ ржкрж░ржмрж░рзНрждрзА ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐рждрзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржпрж╝ред
      -----      
      рзиржпрж╝ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржорж╛ржЭрзЗрж░ рж▓рзБржк B):
      1.  `j--` рж╣ржпрж╝, рждрж╛ржЗ `j` ржПрж░ ржорж╛ржи рж╣ржпрж╝ 3ред (`i` ржПрж░ ржорж╛ржи 2 ржЗ ржерж╛ржХрзЗ)
      2.  рззржо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЗржирж╛рж░ рж▓рзБржк C):
            * `k += i + j` ржорж╛ржирзЗ `k = k + (2 + 3) = 6 + 5 = 11`ред ржПржЦржи `k` ржПрж░ ржорж╛ржи 11ред
            * `if(i == j)` (2 == 3)? `false`ред
            * `else if (i > j)` (2 \> 3)? `false`ред
            * `else` ржмрзНрж▓ржХрзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗ (`i < j` рж╕рждрзНржп)ред `continue B;` ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ред
            * ржПржЯрж┐ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорж╛ржЭрзЗрж░ рж▓рзБржк (B) ржПрж░ ржкрж░ржмрж░рзНрждрзА ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐рждрзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржпрж╝ред
      -----
      рзйржпрж╝ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржорж╛ржЭрзЗрж░ рж▓рзБржк B):
      1.  `j--` рж╣ржпрж╝, рждрж╛ржЗ `j` ржПрж░ ржорж╛ржи рж╣ржпрж╝ 2ред (`i` ржПрж░ ржорж╛ржи 2 ржЗ ржерж╛ржХрзЗ)
      2.  рззржо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ (ржЗржирж╛рж░ рж▓рзБржк C):
            * `k += i + j` ржорж╛ржирзЗ `k = k + (2 + 2) = 11 + 4 = 15`ред ржПржЦржи `k` ржПрж░ ржорж╛ржи 15ред
            * `if(i == j)` (2 == 2)? рж╣рзНржпрж╛ржБ, рж╕рждрзНржп\!
            * `break A;` ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ред
            * ржПржЗ `break` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ рж▓рзЗржмрзЗрж▓ `A` ржжрзНржмрж╛рж░рж╛ ржЪрж┐рж╣рзНржирж┐ржд ржЖржЙржЯрж╛рж░ `while(true)` рж▓рзБржк ржерзЗржХрзЗ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржХрзЗ ржмрзЗрж░ ржХрж░рзЗ ржжрзЗржпрж╝ред      
      -----      
      ### ржлрж▓рж╛ржлрж▓:  рж▓рзБржк ржерзЗржХрзЗ ржмрзЗрж░рж┐ржпрж╝рзЗ ржЖрж╕рж╛рж░ ржкрж░, `System.out.println(k);` ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ред `k` ржПрж░ ржЪрзВржбрж╝рж╛ржирзНржд ржорж╛ржи рж╣рж▓рзЛ 15ред


----------

5. public class Test {
       public static void main(String[] args) {
           String [][] arr = { {"%", ""}, {"", "@@@@", "#####"}};
           for(String [] str : arr) { // Outer loop
               for(String s : str) { // Inner loop
                   System.out.println(s);
                   if(s.length() == 4) { // Line n1
                       break; // Line n2: Breaks out of the INNER loop
                   }
               }
               break; // Line n3: Breaks out of the OUTER loop
           }
       }
   }


5. Answer: 
    1.  ржЕрзНржпрж╛рж░рзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи:
    `String [][] arr = { {"%", ""}, {"", "@@@@", "#####"}};`
    ржПржЦрж╛ржирзЗ ржПржХржЯрж┐ ржжрзНржмрж┐-ржорж╛рждрзНрж░рж┐ржХ ржЕрзНржпрж╛рж░рзЗ (`2D array`) рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ:
      * `arr[0]` рж╣рж▓ `{"%", ""}`
      * `arr[1]` рж╣рж▓ `{"", "@@@@", "#####"}`
   2. ржЖржЙржЯрж╛рж░ рж▓рзБржк (`for(String [] str : arr)`): ржПржЗ рж▓рзБржкржЯрж┐ `arr` ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржнрзЗрждрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж░ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржХрж░рзЗред
      * ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐: `str` ржПрж░ ржорж╛ржи рж╣ржпрж╝ `{"%", ""}`ред
   3. ржЗржирж╛рж░ рж▓рзБржк (`for(String s : str)`): ржПржЗ рж▓рзБржкржЯрж┐ ржмрж░рзНрждржорж╛ржи `str` ржЕрзНржпрж╛рж░рзЗрж░ рж╕рзНржЯрзНрж░рж┐ржВ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рж┐рж░ ржЙржкрж░ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржХрж░рзЗред
      * ржЗржирж╛рж░ рж▓рзБржкрзЗрж░ ржкрзНрж░ржержо ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐: `s` ржПрж░ ржорж╛ржи рж╣ржпрж╝ ` "%"  `ред
          * `System.out.println(s);` ржЖржЙржЯржкрзБржЯ ржХрж░ржмрзЗ: `%`
          * `if(s.length() == 4)`: `"%"` ржПрж░ ржжрзИрж░рзНржШрзНржп 1ред 1 == 4 ржорж┐ржерзНржпрж╛ред
      * ржЗржирж╛рж░ рж▓рзБржкрзЗрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐: `s` ржПрж░ ржорж╛ржи рж╣ржпрж╝ `""` (ржПржХржЯрж┐ ржЦрж╛рж▓рж┐ рж╕рзНржЯрзНрж░рж┐ржВ)ред
          * `System.out.println(s);` ржЖржЙржЯржкрзБржЯ ржХрж░ржмрзЗ: (ржПржХржЯрж┐ ржЦрж╛рж▓рж┐ рж▓рж╛ржЗржи)
          * `if(s.length() == 4)`: `""` ржПрж░ ржжрзИрж░рзНржШрзНржп 0ред 0 == 4 ржорж┐ржерзНржпрж╛ред
          * `{"%", ""}` ржЕрзНржпрж╛рж░рзЗрждрзЗ ржЖрж░ ржХрзЛржирзЛ ржЙржкрж╛ржжрж╛ржи ржирж╛ ржерж╛ржХрж╛ржпрж╝, ржПржЗ ржЗржирж╛рж░ рж▓рзБржкржЯрж┐ рж╢рзЗрж╖ рж╣ржпрж╝ред
   4. ржЖржЙржЯрж╛рж░ рж▓рзБржкрзЗрж░ `break` (Line n3):
    ржЗржирж╛рж░ рж▓рзБржк рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ ржкрж░, ржХржирзНржЯрзНрж░рзЛрж▓ `break;` (Line n3) рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗ ржЖрж╕рзЗред ржПржЗ `break` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржЖржЙржЯрж╛рж░ рж▓рзБржкржХрзЗ рж╕ржорзНржкрзВрж░рзНржгрж░рзВржкрзЗ ржмржирзНржз ржХрж░рзЗ ржжрзЗржпрж╝ред
   ### ржлрж▓рж╛ржлрж▓
   ржпрзЗрж╣рзЗрждрзБ ржЖржЙржЯрж╛рж░ рж▓рзБржкржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзНрж░ржержо ржнрзЗрждрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗ (`{"%", ""}`) ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛рж░ ржкрж░рзЗржЗ `break` рж╣ржпрж╝рзЗ ржпрж╛ржЪрзНржЫрзЗ, рждрж╛ржЗ ржжрзНржмрж┐рждрзАржпрж╝ ржнрзЗрждрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗ (`{"", "@@@@", "#####"}`) ржХржЦржирзЛржЗ ржкрзНрж░рж╕рзЗрж╕ рж╣ржмрзЗ ржирж╛ред
   ржХржорзНржкрж╛ржЗрж▓ ржПржмржВ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж╛рж░ ржкрж░, ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ: %


-------------
6.   int i = 0;
      for(System.out.print(i++); i < 2; System.out.print(i++)) {
      System.out.print(i);
   }
   What will be the result of compiling and executing the Test class?


6. Answer: 
   int i = 0; // i ржПрж░ ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи 0
      for(
          System.out.print(i++); // рзз. ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржкрж╛рж░рзНржЯ: рж▓рзБржк рж╢рзБрж░рзБ рж╣ржУржпрж╝рж╛рж░ ржЖржЧрзЗ ржПржЗ ржЕржВрж╢ржЯрж┐ ржПржХржмрж╛рж░ ржЪрж▓рзЗред ржкрзНрж░ржержорзЗ i (0) ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗ, рждрж╛рж░ржкрж░ i ржХрзЗ 1 ржмрж╛ржбрж╝рж╛ржпрж╝ред
          i < 2;                   // рзи. ржХржирзНржбрж┐рж╢ржи ржкрж╛рж░рзНржЯ: ржкрзНрж░рждрж┐ржмрж╛рж░ рж▓рзБржкрзЗрж░ ржмржбрж┐ ржЪрж▓рж╛рж░ ржЖржЧрзЗ ржПржЗ рж╢рж░рзНрждржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржпрж╝ред (ржпрзЗржоржи: 1 < 2 ржмрж╛ 2 < 2)
          System.out.print(i++)    // рзй. ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ/ржбрж┐ржХрзНрж░рж┐ржорзЗржирзНржЯ ржкрж╛рж░рзНржЯ: рж▓рзБржкрзЗрж░ ржмржбрж┐ ржПржХржмрж╛рж░ ржЪрж▓рж╛рж░ ржкрж░ ржПржЗ ржЕржВрж╢ржЯрж┐ ржЪрж▓рзЗред ржкрзНрж░ржержорзЗ i ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗ, рждрж╛рж░ржкрж░ i ржХрзЗ 1 ржмрж╛ржбрж╝рж╛ржпрж╝ред ржПржЦрж╛ржирзЗ i ржПрж░ ржмрж░рзНрждржорж╛ржи ржорж╛ржи (1) ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝ ржПржмржВ рждрж╛рж░ржкрж░ i ржПрж░ ржорж╛ржи ржмрзЗржбрж╝рзЗ 2 рж╣ржпрж╝ред
      ){
          System.out.print(i); // рзк. рж▓рзБржкрзЗрж░ ржмржбрж┐: ржпржжрж┐ ржХржирзНржбрж┐рж╢ржи рж╕рждрзНржп рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржПржЗ ржЕржВрж╢ржЯрж┐ ржЪрж▓рзЗред ржПржЦрж╛ржирзЗ i ржПрж░ ржмрж░рзНрждржорж╛ржи ржорж╛ржи ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝ред
      }

### ржПржХрзНрж╕рж┐ржХрж┐ржЙрж╢ржи ржЯрзНрж░рзЗрж╕
рзз. `for` рж▓рзБржкрзЗрж░ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржкрж╛рж░рзНржЯ (`System.out.print(i++)`): ржкрзНрж░ржержорзЗ `i` ржПрж░ ржорж╛ржи `0` ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ, рждрж╛рж░ржкрж░ `i` ржПрж░ ржорж╛ржи ржмрзЗржбрж╝рзЗ `1` рж╣ржмрзЗред
рзи. рж▓рзБржкрзЗрж░ ржкрзНрж░ржержо ржЗржЯрж╛рж░рзЗрж╢ржи:
  - ржХржирзНржбрж┐рж╢ржи `i < 2` (ржЕрж░рзНржерж╛рзО `1 < 2`) рж╕рждрзНржпред
  - рж▓рзБржкрзЗрж░ ржмржбрж┐рж░ ржнрж┐рждрж░рзЗ `System.out.print(i)` ржерж╛ржХрж╛ржпрж╝ `i` ржПрж░ ржмрж░рзНрждржорж╛ржи ржорж╛ржи `1` ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗред
  - рж▓рзБржкрзЗрж░ ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ ржкрж╛рж░рзНржЯ (`System.out.print(i++)`): `i` ржПрж░ ржмрж░рзНрждржорж╛ржи ржорж╛ржи `1` ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ, рждрж╛рж░ржкрж░ `i` ржПрж░ ржорж╛ржи ржмрзЗржбрж╝рзЗ `2` рж╣ржмрзЗред
рзй. рж▓рзБржкрзЗрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржЗржЯрж╛рж░рзЗрж╢ржи:
  - ржХржирзНржбрж┐рж╢ржи `i < 2` (ржЕрж░рзНржерж╛рзО `2 < 2`) ржорж┐ржерзНржпрж╛ред
  - рж▓рзБржк рж╢рзЗрж╖ рж╣ржмрзЗред

рж╕ржм ржорж┐рж▓рж┐рзЯрзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ `011`ред

####6.1 extension part of question no. 6  to clarify FOR-LOOP.
           int i = 5;
             for(System.out.print(i++); i < 2; System.out.print(i++)) {
             System.out.print(i);
          }
      Test ржХрзНрж▓рж╛рж╕ржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржПржмржВ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж▓рзЗ ржлрж▓рж╛ржлрж▓ рж╣ржмрзЗ: 5

####6.2 extension part of question no. 6  to clarify FOR-LOOP.   
         int i = 5;
         for(i++; i < 2; System.out.print(i++)) {
         System.out.print(i);
         }
   Test ржХрзНрж▓рж╛рж╕ржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржПржмржВ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж▓рзЗ ржХрзЛржирзЛ ржЖржЙржЯржкрзБржЯ ржкрзНрж░рж┐ржирзНржЯ рж╣ржмрзЗ ржирж╛ред
            ржПрж░ ржХрж╛рж░ржг рж╣рж▓рзЛ:
            рзз.  `int i = 5;`: ржкрзНрж░ржержорзЗ `i` ржПрж░ ржорж╛ржи `5` ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржпрж╝ред
            рзи.  `for` рж▓рзБржкрзЗрж░ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржкрж╛рж░рзНржЯ (`i++;`): рж▓рзБржк рж╢рзБрж░рзБ рж╣ржУржпрж╝рж╛рж░ ржЖржЧрзЗ `i` ржПрж░ ржорж╛ржи `1` ржмрзЗржбрж╝рзЗ `6` рж╣ржпрж╝ред
            рзй.  рж▓рзБржкрзЗрж░ ржХржирзНржбрж┐рж╢ржи ржкрж╛рж░рзНржЯ (`i < 2;`): ржПржЦржи `i` ржПрж░ ржорж╛ржи `6`ред рж▓рзБржкрзЗрж░ ржХржирзНржбрж┐рж╢ржи `6 < 2` ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржпрж╝ред ржПржЗ ржХржирзНржбрж┐рж╢ржиржЯрж┐ -ржорж┐ржерзНржпрж╛ (`false`)ред
            ржпрзЗрж╣рзЗрждрзБ рж▓рзБржкрзЗрж░ рж╢рзБрж░рзБрждрзЗржЗ ржХржирзНржбрж┐рж╢ржи ржорж┐ржерзНржпрж╛ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗ, рждрж╛ржЗ рж▓рзБржкрзЗрж░ ржмржбрж┐ (`System.out.print(i);`) ржПржмржВ рж▓рзБржкрзЗрж░ ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ ржкрж╛рж░рзНржЯ (`System.out.print(i++);`) 
            - ржХрзЛржиржЯрж┐ржЗ ржЖрж░ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣ржмрзЗ ржирж╛ред ржлрж▓рж╕рзНржмрж░рзВржк, ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржХрзЛржирзЛ ржХрж┐ржЫрзБ ржкрзНрж░рж┐ржирзНржЯ ржирж╛ ржХрж░рзЗржЗ рж╢рзЗрж╖ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред

##ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп(6.1 vs 6.2):for рж▓рзБржкрзЗрж░ ржкрзНрж░ржержо ржЕржВрж╢рзЗ (ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи)ред
      6.1_ржкрзНрж░ржержо ржХрзЛржбрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ: for(System.out.print(i++); ...)
            ржПржЦрж╛ржирзЗ initialization ржЕржВрж╢рзЗ System.out.print(i++); ржЖржЫрзЗред
            ржпржЦржи ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржПржЗ рж▓рзБржкрзЗ ржЖрж╕рзЗ, рждржЦржи рж╕ржмрж╛рж░ ржЖржЧрзЗ ржПржЗ System.out.print(i++); ржЕржВрж╢ржЯрж┐ ржЪрж▓рзЗред
            i++ рж╣рж▓рзЛ ржкрзЛрж╕рзНржЯ-ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ (post-increment)ред ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ, ржкрзНрж░ржержорзЗ i ржПрж░ ржмрж░рзНрждржорж╛ржи ржорж╛ржи (5) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗ (ржЕрж░рзНржерж╛рзО ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ рж╣ржмрзЗ), рждрж╛рж░ржкрж░ i ржПрж░ ржорж╛ржи ржПржХ ржмрж╛ржбрж╝рж╛ржирзЛ рж╣ржмрзЗред
            рждрж╛ржЗ, рж▓рзБржкрзЗрж░ ржЕржирзНржп ржХрзЛржирзЛ ржЕржВрж╢ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЖржЧрзЗржЗ 5 ржкрзНрж░рж┐ржирзНржЯ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
            ржПрж░ржкрж░ i ржПрж░ ржорж╛ржи ржмрзЗржбрж╝рзЗ 6 рж╣ржпрж╝ред
      
      6.2_ржжрзНржмрж┐рждрзАржпрж╝ ржХрзЛржбрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ: for(i++; ...)
            ржПржЦрж╛ржирзЗ initialization ржЕржВрж╢рзЗ рж╢рзБржзрзБ i++; ржЖржЫрзЗред
            ржпржЦржи ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржПржЗ рж▓рзБржкрзЗ ржЖрж╕рзЗ, рждржЦржи рж╕ржмрж╛рж░ ржЖржЧрзЗ ржПржЗ i++; ржЕржВрж╢ржЯрж┐ ржЪрж▓рзЗред
            i++ ржПржЦрж╛ржирзЗржУ ржкрзЛрж╕рзНржЯ-ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ, ржХрж┐ржирзНрждрзБ ржПржЯрж┐ рж╢рзБржзрзБ i ржПрж░ ржорж╛ржи ржмрж╛ржбрж╝рж╛ржпрж╝, ржХрзЛржирзЛ ржХрж┐ржЫрзБ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗ ржирж╛ред
            рждрж╛ржЗ, i ржПрж░ ржорж╛ржи 5 ржерзЗржХрзЗ ржмрзЗржбрж╝рзЗ 6 рж╣ржпрж╝ред
            ржлрж▓рж╛ржлрж▓: ржпрзЗрж╣рзЗрждрзБ ржХрзЛржирзЛ ржкрзНрж░рж┐ржирзНржЯ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ ржЪрж▓рждрзЗржЗ ржкрж╛рж░рзЗржирж┐, рждрж╛ржЗ ржХрзЛржирзЛ ржЖржЙржЯржкрзБржЯржУ ржЖрж╕рзЗ ржирж╛ред


##6.3  ┬а int i = 0;
      ┬а ┬а ┬а ┬а for(i; i < 2; System.out.print(i++)) { 
      ┬а ┬а ┬а ┬а ┬а ┬а System.out.print(i);
      ┬а ┬а ┬а ┬а }
   -for(i; ...) ржЕржВрж╢рзЗ, i ржПржХрж╛ ржХрзЛржирзЛ ржмрзИржз рж╕рзНржЯрзЗржЯржорзЗржирзНржЯ ржмрж╛ ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржи ржиржпрж╝ ржпрж╛ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржкрж╛рж░рзНржЯрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝ред 
   -ржПржЯрж┐ ржПржХржЯрж┐ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржирзЗржо ржорж╛рждрзНрж░ред ржПржЦрж╛ржирзЗ ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ (i = 0;), ржкрзЛрж╕рзНржЯ/ржкрзНрж░рж┐-ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ/ржбрж┐ржХрзНрж░рж┐ржорзЗржирзНржЯ (i++; ржмрж╛ ++i;), ржЕржержмрж╛ ржПржХржЯрж┐ ржорзЗржержб ржХрж▓ (System.out.print(...)) ржПрж░ ржорждрзЛ ржХрж┐ржЫрзБ ржерж╛ржХрж╛ ржкрзНрж░ржпрж╝рзЛржЬржиред
   -рждрж╛ржЗ, ржПржЗ ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржХржЯрж┐ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ ржПрж░рж░ (compile-time error) ржжрзЗржЦрж╛ржмрзЗред
   -рж╢рзБржзрзБржорж╛рждрзНрж░ i ржПрж░ ржорждрзЛ ржПржХржЯрж┐ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржирж╛ржо ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржЕржВрж╢рзЗ рж░рж╛ржЦрж▓рзЗ ржХрзЛржирзЛ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржмрж╛ ржЕржкрж╛рж░рзЗрж╢ржи рж╣ржпрж╝ ржирж╛, ржпрж╛ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНржЯрж┐ржХрзНржпрж╛рж▓рж┐ ржнрзБрж▓ред
   -ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржмрзНрж▓ржХрзЗ ржПржХржЯрж┐ ржмрзИржз ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржи ржмрж╛ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж╢ржи ржирж╛ ржерж╛ржХрж▓рзЗ, ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржмрзБржЭрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ ржХрзА ржХрж░рждрзЗ рж╣ржмрзЗ ржПржмржВ ржПрж░рж░ ржжрзЗржмрзЗред


##6.4  int i = 0; // i ржПрж░ ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи 0
        for(i = 0; i < 2; System.out.print(i++)) { 
            System.out.print(i);
        }
ржЖржкржирж┐ ржпржжрж┐ ржПржЗ Test ржХрзНрж▓рж╛рж╕ржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржПржмржВ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ: 011

-----------
7. public class Test {
   public static void main(String[] args) {
      boolean flag = false;
      do {
         if(flag = !flag) { //Line n1     *** do{ if(flag = !flag) } ржПрж░ ржнрзЗрждрж░рзЗ flag ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж┐ рж╢рзБржзрзБ ржУржЗ do{} ржмрзНрж▓ржХрзЗрж░ ржоржзрзНржпрзЗ рж╕рзАржорж╛ржмржжрзНржз ржерж╛ржХржмрзЗ ржирж╛ржХрж┐ ржкрзБрж░рзЛ ржХрзНрж▓рж╛рж╕/while рж▓рзБржкржХрзЗ ржкрзНрж░ржнрж╛ржмрж┐ржд ржХрж░ржмрзЗ?
         System.out.print(1); //Line n2
         continue; //Line n3
         }
         System.out.print(2); //Line n4
      } while(flag); //Line n5
   }}   
   What will be the result of compiling and executing Test class?   
    1
    2
    12
    21
    212
    121

7. Answer: Output:  12
         -flag ржПрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи рждрж╛рж░ рж╕рзНржХрзЛржкрзЗрж░ ржоржзрзНржпрзЗ ржпрзЗржЦрж╛ржирзЗржЗ ржШржЯрзБржХ ржирж╛ ржХрзЗржи, рж╕рзЗржЯрж┐ рж╕рзЗржЗ ржПржХржЗ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржиржХрзЗ ржЖржкржбрзЗржЯ ржХрж░рзЗ, ржпрж╛рж░ ржлрж▓рзЗ ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░рж╢рзАрж▓ ржпрзЗржХрзЛржирзЛ ржЕржВрж╢рзЗрж░ (ржпрзЗржоржи while рж▓рзБржкрзЗрж░ рж╢рж░рзНржд) ржЖржЪрж░ржг ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝ред
         -continue ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ "ржПржЗ ржЗржЯрж╛рж░рзЗрж╢ржирзЗрж░ ржмрж╛ржХрж┐ржЯрж╛ ржмрж╛ржж ржжрж╛ржУ ржПржмржВ ржкрж░рзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржирзЗ ржпрж╛ржУред"

      -ржкрзНрж░ржержо ржЗржЯрж╛рж░рзЗрж╢ржирзЗ:
         * `if(flag = !flag)` рж╢рж░рзНрждржЯрж┐ `true` рж╣ржпрж╝ред
         * `System.out.print(1);` (Line n2) ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝ред
         * ржПрж░ржкрж░ ржпржЦржи `continue;` (Line n3) ржХрж╛рж░рзНржпржХрж░ рж╣ржпрж╝, рждржЦржи ржПржЯрж┐ ржирж┐рж░рзНржжрзЗрж╢ ржжрзЗржпрж╝ ржпрзЗ ржПржЗ ржЗржЯрж╛рж░рзЗрж╢ржирзЗрж░ ржЖрж░ ржХрзЛржирзЛ ржХрзЛржб (ржЕрж░рзНржерж╛рзО `System.out.print(2);` - Line n4) ржЪрж╛рж▓рж╛ржирзЛрж░ ржжрж░ржХрж╛рж░ ржирзЗржЗред
         * ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржирж┐ржпрж╝ржирзНрждрзНрж░ржг рж╕рж░рж╛рж╕рж░рж┐ `while(flag);` (Line n5) ржЕржВрж╢рзЗ ржЪрж▓рзЗ ржпрж╛ржпрж╝ рж╢рж░рзНржд ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛рж░ ржЬржирзНржп, ржПржмржВ ржкрж░рзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржирзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирзЗржпрж╝ред
            ржпржжрж┐ `continue` ржирж╛ ржерж╛ржХржд:
                  * ржпржжрж┐ `continue` ржирж╛ ржерж╛ржХржд, рждрж╛рж╣рж▓рзЗ ржкрзНрж░ржержо ржЗржЯрж╛рж░рзЗрж╢ржирзЗ `System.out.print(1);` ржПрж░ ржкрж░ `System.out.print(2);` рж▓рж╛ржЗржиржЯрж┐ржУ ржХрж╛рж░рзНржпржХрж░ рж╣рждрзЛред 
                    ржлрж▓рзЗ ржЖржЙржЯржкрзБржЯ ржнрж┐ржирзНржи рж╣рждрзЛ (`12` ржПрж░ ржмржжрж▓рзЗ `122` ржЖрж╕ржд, ржпржжрж┐ рж▓рзБржк ржжрзНржмрж┐рждрзАржпрж╝ржмрж╛рж░ ржЪрж▓ржд)ред
            
            `continue` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЯрж┐ ржорзВрж▓ржд рж▓рзБржкрзЗрж░ ржоржзрзНржпрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж┐ржЫрзБ рж╢рж░рзНрждрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржХрж┐ржЫрзБ ржХрзЛржб ржмрзНрж▓ржХ ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝, ржпрж╛рждрзЗ рж▓рзБржкржЯрж┐ рждрж╛рж░ ржкрж░ржмрж░рзНрждрзА ржЗржЯрж╛рж░рзЗрж╢ржирзЗ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред 
            ржПржЯрж┐ `break` рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗрж░ ржерзЗржХрзЗ ржнрж┐ржирзНржи, ржХрж╛рж░ржг `break` ржкрзБрж░рзЛ рж▓рзБржкржЯрж┐ржХрзЗржЗ ржерж╛ржорж┐ржпрж╝рзЗ ржжрзЗржпрж╝, ржХрж┐ржирзНрждрзБ `continue` рж╢рзБржзрзБ ржмрж░рзНрждржорж╛ржи ржЗржЯрж╛рж░рзЗрж╢ржиржХрзЗ ржерж╛ржорж┐ржпрж╝рзЗ ржкрж░рзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржирзЗ ржпрж╛ржпрж╝ред
         * ржжрзНржмрж┐рждрзАржпрж╝ рж▓рзБржкрзЗрж░ ржЗржЯрж╛рж░рзЗрж╢ржи, do рж▓рзБржкрзЗ ржЖржмрж╛рж░ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗред ржПржмрж╛рж░ if ржмрзНрж▓ржХ ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ рж╣ржпрж╝(ржХрж╛рж░ржг, ржПржЦржи flag ржПрж░ ржорж╛ржи false(flag= !true)) ред

---
8.public class Greetings {
   String msg = null;
      public Greetings() {
      this(тАЬGood Morning!тАЭ);
      }
      public Greetings(String str) {
      msg = str;
      }   
      public void display() {
        System.out.println(msg);
      }

      public static void main(String [] args) {
      Greetings g1 = new Greetings();
      Greetings g2 = new Greetings(тАЬGood Evening!тАЭ);
      g1.display();
      g2.display();
      }}
   
    -null Good Evening!
    -Good Morning! Good Evening!
    -Good Morning! null
    -null null





8. Output: Good Morning! Good Evening! 
   (Constructor chaining sets `msg` correctly.)

-----
9. Test.java
  class Message {
   String msg = тАЬHappy New Year!тАЭ;
   public void print() {
      System.out.println(msg);
   }}
   
   public class Test {
   public static void change(Message m) {
      m.msg = тАЬHappy Holidays!тАЭ;
   }
   
   public static void main(String[] args) {
      Message obj = new Message();
      obj.print();
      change(obj);
      obj.print();
   }}
   
    -null Happy Holidays!
    -Happy Holidays! Happy Holidays!
    -null null
    -Happy New Year! Happy Holidays!


9. Output: 
   Happy New Year! Happy Holidays! 
   (Method `change` modifies the objectтАЩs `msg`.)


---

10. Test.java 
   class Message {
      String msg = тАЬHappy New Year!тАЭ;   
      public void print() {
      System.out.println(msg);
    }}
   
   public class Test {
      public static void change(Message m) {
      m = new Message();
      m.msg = тАЬHappy Holidays!тАЭ;
   }
   
   public static void main(String[] args) {
      Message obj = new Message();
      obj.print();
      change(obj);
      obj.print();
   }}
   
    Happy New Year! Happy Holidays!
    Happy Holidays! Happy Holidays!
    Happy New Year! Happy New Year!
    null Happy New Year!

10. Output: 
    Happy New Year! Happy New Year! 
    (Method `change` creates a new object, original `obj` unchanged.)

---------

11.public class Test {
public static void print() {
System.out.println(тАЬstatic methodтАЭ);
}

public static void main(String[] args) {
Test obj = null;
obj.print();
}
}



11. Output: 
    static method 
    (Static method called even with `obj = null`.)

-------

12. public class Wall {
      public static void main(String args[]) {
      double area = 5.7;
      String color;
      if (area < 7) color = "green"; 
         System.out.println(color); 
     } }
      
       green
       NullPointerException
       Compilation error


12. Answer:
      if (area < 7) // ржПржЗ рж╢рж░рзНрждржЯрж┐ (5.7 < 7) рж╕рждрзНржпред
       color = "green"; // рждрж╛ржЗ color ржПрж░ ржорж╛ржи "green" рж╣ржмрзЗред
        System.out.println(color); // ржПржЦрж╛ржирзЗ color ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред ржХрж┐ржирзНрждрзБ ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржирж┐рж╢рзНржЪрж┐ржд ржиржпрж╝ ржпрзЗ, рж╕ржм ржкрж░рж┐рж╕рзНржерж┐рждрж┐рждрзЗ color ржПрж░ ржПржХржЯрж┐ ржорж╛ржи ржерж╛ржХржмрзЗред
 ** ржпржжрж┐ ржЖржкржирж┐ String color = null; ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ greenред ржЖрж░ ржпржжрж┐ String color; рж░рзЗржЦрзЗржЗ ржХржорзНржкрж╛ржЗрж▓ ржХрж░рждрзЗ ржЪрж╛ржи, рждрж╛рж╣рж▓рзЗ Compilation error ржкрж╛ржмрзЗржиред
-------

13. public class Test {
      public static void main(String[] args) {
      double price = 90000;
      String model;
         if(price > 100000) {  model = тАЬTesla Model XтАЭ;
         }else if(price <= 100000) { model = "Tesla Model S"; } 
      System.out.println(model); 
      } }
      
       Tesla Model X
       Tesla Model S
       Compilation Error

13. Output: 
Tesla Model S 
**ржпржжрж┐ ржПржоржи ржкрж░рж┐рж╕рзНржерж┐рждрж┐ ржерж╛ржХрзЗ, ржпрзЗржЦрж╛ржирзЗ  if-else if ржЪрзЗржЗржи рж╕ржм рж╕ржорзНржнрж╛ржмрзНржп рж╢рж░рзНрждржХрзЗ ржХржнрж╛рж░ ржХрж░ржЫрзЗ ржирж╛ред ржПржЗ ржкрж░рж┐рж╕рзНржерж┐рждрж┐рждрзЗ, ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржХржЯрж┐ ржХржорзНржкрж╛ржЗрж▓-ржЯрж╛ржЗржо ржПрж░рж░ ржжрзЗржмрзЗред

-------------
14. Following statement in a Java program compiles successfully:
student.report(course); 
What can you say for sure?

 student is the reference variable name
 student is the class name
 report is the method name
 course must be of String type



14. Answer: 
    `report` is the method name 
    (Valid method call syntax.)

-------
15.public class Test {
private static void m(int x) {
System.out.println(тАЬint versionтАЭ);
}

private static void m(char x) {
System.out.println(тАЬchar versionтАЭ);
}

public static void main(String [] args) {
int i = тАШ5тАЩ;
m(i);
m(тАШ5тАЩ);
}
}

 int version int version
 char version char version
 int version char version
 char version int version
 Compilation error



15. Output: 
    int version char version 
    (`m(i)` calls `int` version, `m('5')` calls `char` version.)
    int i = '5';: ржПржЦрж╛ржирзЗ `'5'` ржПржХржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж▓рж┐ржЯрж╛рж░рж╛рж▓ред ржЬрж╛ржнрж╛рждрзЗ, ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ржЧрзБрж▓рзЛ рждрж╛ржжрзЗрж░ ржЕрзНржпрж╛рж╕ржХрж┐ (ASCII) ржмрж╛ ржЗржЙржирж┐ржХрзЛржб (Unicode) ржорж╛ржи ржжрзНржмрж╛рж░рж╛ржУ ржкрзНрж░ржХрж╛рж╢ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ `'5'` ржПрж░ ржЕрзНржпрж╛рж╕ржХрж┐ ржорж╛ржи рж╣рж▓рзЛ `53`ред
    * ржЖржкржирж┐ ржпржЦржи ржПржХржЯрж┐ `char` ржЯрж╛ржЗржкрзЗрж░ ржорж╛ржиржХрзЗ ржПржХржЯрж┐ `int` ржЯрж╛ржЗржкрзЗрж░ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗ ржЕрзНржпрж╛рж╕рж╛ржЗржи ржХрж░рзЗржи (`int i = '5';`), рждржЦржи рж╕рзЗржЗ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░рзЗрж░ ржЕрзНржпрж╛рж╕ржХрж┐ ржорж╛ржиржЯрж┐ `i` ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝ред рж╕рзБрждрж░рж╛ржВ, `i` ржПрж░ ржорж╛ржи ржПржЦржи `53`ред
--------



16.public class Test {
public static void main(String [] args) {
int [] arr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
System.out.println(process(arr, 3, 8)); //Line 5
}
/*INSERT*/
}
Line 5 causes compilation error as process method is not found. 
Which of the following method definitions, if used to replace /*INSERT*/, will resolve the compilation error?

Select ALL that apply:-
 private static int[] process(int [] arr, int start, int end) { return null; }
 private static String process(int [] arr, int start, int end) { return null; }
 private static int process(int [] arr, int start, int end) { return null; }
 private static String[] process(int [] arr, int start, int end) { return null; }

16.Answer:
It is clear from Line 5 that- 
method name should be process, it should be a STATIC method, it should accept 3 parameters (int[], int, int), and its RETURN TYPE must be String.

------------

17.class Point {
   static int x;
   int y, z;

   public String toString() { return тАЬPoint(тАЭ + x + тАЬ, тАЭ + y + тАЬ, тАЭ + z + тАЬ)тАЭ; }
   }
   
   public class Test {
   public static void main(String[] args) {
   Point p1 = new Point();
   p1.x = 17;  p1.y = 35;  p1.z = -1;
   
   Point p2 = new Point();
   p2.x = 19;  p2.y = 40;  p2.z = 0;
   
   System.out.println(p1); //Line n1
   System.out.println(p2); //Line n2
   }
   }   
    Point(17, 35, -1) Point(19, 40, 0)
    Point(19, 35, -1) Point(19, 40, 0)
    Point(17, 35, -1) Point(17, 40, 0)
    Point(19, 40, 0) Point(19, 40, 0)



Ans: Point(19, 35, -1) Point(19, 40, 0)
**static value effect last assigned one.


----
18.public class Test {
   public static void main(String[] args) {
   short [] args = new short[]{50, 50};
   args[0] = 5;
   args[1] = 10;
   System.out.println(тАЬ[тАЭ + args[0] + тАЬ, тАЭ + args[1] + тАЬ]тАЭ);
   }
   }
   
    Compilation error
    An exception is thrown at runtime
    [50, 50]
    [5, 10]


Ans: 
Compilation error for duplicate args from psvm(argument)


---
19.public class Test {
   static String msg; //Line 2
   public static void main(String[] args) {
   String msg; //Line 4
   if(args.length > 0) {
   msg = args[0]; //Line 6
   }
   System.out.println(msg); //Line 8
   }
   }
   
    Line 2 causes compilation failure
    Line 4 causes compilation failure
    An exception is thrown at runtime by Line 6
    Line 8 causes compilation failure


Ans:
    Line 4 causes compilation failur, LOCAL variable must initialize while declare.

---
20. public class Test {
   private static void add(int i, int j) {
   System.out.println(тАЬint versionтАЭ);
   }
   
   private static void add(Integer i, Integer j) {
   System.out.println(тАЬInteger versionтАЭ);
   }
   
   public static void main(String[] args) {
   add(10, 20);
   }
   
   }
   Which modifications, done independently, print тАЬInteger versionтАЭ on to the console? Select ALL that apply.   
    Remove add(int i, int j)  method declaration and definition.
    Replace add(10, 20);  by add(new Integer(10), new Integer(20)); 
    Replace add(10, 20);  by add(10.0, 20.0); 
    Replace add(10, 20);  by add(null, null); 




Ans:
ржпрзЗ ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рзЛ "Integer version" ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗ рждрж╛ рж╣рж▓рзЛ:
add(int i, int j) ржорзЗржержб ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж╢ржи ржПржмржВ ржбрзЗржлрж┐ржирж┐рж╢ржи ржорзБржЫрзЗ ржлрзЗрж▓рзБржиред
add(10, 20); ржХрзЗ add(new Integer(10), new Integer(20)); ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржиред
add(10, 20); ржХрзЗ add(null, null); ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржиред


----
21. public class Test {
   private static void add(double d1, double d2) {
   System.out.println(тАЬdouble version: тАЭ + (d1 + d2));
   }
   
   private static void add(Double d1, Double d2) {
   System.out.println(тАЬDouble version: тАЭ + (d1 + d2));
   }
   
   public static void main(String[] args) {
   add(10.0, new Integer(10));
   }
   
   }
   
    Compilation error
    double version: 20.0
    Double version: 20.0
    An exception is thrown at runtime

Ans:
add(10.0, new Integer(10)); => 1st parameter is tagged to double primitive type and 2nd parameter is converted to int, is tagged to double primitive type as well. 
So, add(double, double); method is invoked( double version: 20.0).


22.public class Test {
   private static void add(double d1, double d2) {
      System.out.println(тАЬdouble version: тАЭ + (d1 + d2));
   }
   
   private static void add(Double d1, Double d2) {
      System.out.println(тАЬDouble version: тАЭ + (d1 + d2));
   }
   
   public static void main(String[] args) {
      add(10.0, new Double(10.0));
   }   
   }
   
    Compilation error
    double version: 20.0
    Double version: 20.0
    An exception is thrown at runtime


Ans:
ржХржорзНржкрж╛ржЗрж▓рж╛рж░ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирж┐рждрзЗ ржкрж╛рж░рзЗ ржирж╛, whether   add(10.0, new Double(10.0)); to convert 1st argument to Double reference type or 2nd argument to double primitive type.
рждрж╛ржЗ ржПржЯрж┐ ржПржХржЯрж┐ ржХржорзНржкрж╛ржЗрж▓-ржЯрж╛ржЗржо ржПрж░рж░ ржжрзЗрзЯред

--

23. public class Test {
   public static void main(String[] args) {
   int x = 1;
   while(checkAndIncrement(x)) {
      System.out.println(x);
   }}
   
   private static boolean checkAndIncrement(int x) {
      if(x < 5) { x++; return true; } 
      else { return false; } 
   } }
   
    2 3 4 5
    1 2 3 4
    1 2 3 4 5
    Infinite loop



Ans:
ржПржЯрж┐ ржкрж╛рж╕-ржмрж╛ржЗ-ржнрзНржпрж╛рж▓рзБ (pass-by-value) ржкржжрзНржзрждрж┐рж░ ржПржХржЯрж┐ ржЙржжрж╛рж╣рж░ржгред checkAndIncrement ржорзЗржержбрзЗрж░ x ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ржЯрж┐ main ржорзЗржержбрзЗ рж╕ржВржЬрзНржЮрж╛рзЯрж┐ржд x ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржПржХржЯрж┐ ржХржкрж┐ ржзрж╛рж░ржг ржХрж░рзЗред
рж╕рзБрждрж░рж╛ржВ, checkAndIncrement ржорзЗржержбрзЗ x ржПрж░ ржпрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯ, рждрж╛ main ржорзЗржержбрзЗрж░ x ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ ржкрзНрж░рждрж┐ржлрж▓рж┐ржд рж╣рзЯ ржирж╛ред main ржПрж░ x ржПрж░ ржорж╛ржи 1-ржЗ ржерж╛ржХрзЗ, ржХрж╛рж░ржг main ржПрж░ ржнрзЗрждрж░рзЗрж░ ржХрзЛржб ржПрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржЫрзЗ ржирж╛ред
ржкрзНрж░рждрж┐ржмрж╛рж░ checkAndIncrement ржорзЗржержбржЯрж┐ 1 ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржорж╛ржи ржжрж┐рзЯрзЗ ржХрж▓ ржХрж░рж╛ рж╣рзЯ, рждрж╛ржЗ рж╕рж░рзНржмржжрж╛ true ржлрзЗрж░ржд ржЖрж╕рзЗ ржПржмржВ ржлрж▓рж╕рзНржмрж░рзВржк while рж▓рзБржкржЯрж┐ ржЕржирж┐рж░рзНржжрж┐рж╖рзНржЯржХрж╛рж▓рзЗрж░ ржЬржирзНржп ржХрж╛рж░рзНржпржХрж░ рж╣рждрзЗ ржерж╛ржХрзЗред

--
24.class Student {
   String name;
   int age;
   
   Student() {
   Student(тАЬJamesтАЭ, 25);
   }
   
   Student(String name, int age) {
   this.name = name;
   this.age = age;
   }
   }
   
   public class Test {
   public static void main(String[] args) {
   Student s = new Student();
   System.out.println(s.name + тАЬ:тАЭ + s.age);
   }
   }
   What will be the result of compiling and executing Test class?
   
    Compilation error
    null:0
    James:25
    An exception is thrown at runtime




Ans:
-ржПржХржЯрж┐ ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ ржерзЗржХрзЗ ржЕржирзНржп ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ржХрзЗ ржХрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ this() ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ, ржпрзЗржоржи: this("James", 25);ред
-ржПржЗ ржХрзЛржбржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржХржорзНржкрж╛ржЗрж▓ рж╣ржмрзЗ ржирж╛, рждрж╛ржЗ рж░рж╛ржиржЯрж╛ржЗржорзЗ ржХрзЛржирзЛ ржЖржЙржЯржкрзБржЯ ржмрж╛ ржмрзНржпрждрж┐ржХрзНрж░ржо (exception) ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ ржирж╛ред ржПржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ ржХржорзНржкрж╛ржЗрж▓рзЗрж╢ржи ржзрж╛ржкрзЗржЗ ржмрзНржпрж░рзНрже рж╣ржмрзЗред

---
25.public class Test {
   static String str = тАЬKEEP IT тАЬ; //Line n1
      public static void main(String[] args) {
         String str = str + тАЬSIMPLEтАЭ; //Line n2
         System.out.println(str);
      }
   }
   
   What will be the result of compiling and executing Test class?
   
    KEEP IT
    KEEP IT SIMPLE
    SIMPLE
    Compilation error

Ans:
String str = str + тАЬSIMPLEтАЭ; // Line n2: ржПржЦрж╛ржирзЗ ржорзВрж▓ рж╕ржорж╕рзНржпрж╛|
ржЬрж╛ржнрж╛ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПржЦрж╛ржирзЗ ржмрж┐ржнрзНрж░рж╛ржирзНржд рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред ржпржЦржи String str = str + "SIMPLE"; рж▓рж╛ржЗржиржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ рж╣ржпрж╝, рждржЦржи ржбрж╛ржи ржкрж╛рж╢рзЗрж░ str (ржпрзЗржЯрж┐ str + "SIMPLE" ржПрж░ ржЕржВрж╢) ржЖрж╕рж▓рзЗ ржХрзЛржи str ржХрзЗ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░ржЫрзЗ рждрж╛ ржирж┐ржпрж╝рзЗ ржЕрж╕рзНржкрж╖рзНржЯрждрж╛ ржжрзЗржЦрж╛ ржжрзЗржпрж╝ред 
ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржоржирзЗ ржХрж░рзЗ ржЖржкржирж┐ рж╕рзЗржЗ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ str ржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░ржЫрзЗржи ржпрж╛ ржЖржкржирж┐ ржПржХржЗ рж▓рж╛ржЗржирзЗ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржЫрзЗржи, ржХрж┐ржирзНрждрзБ рж╕рзЗржЯрж┐ рждржЦржиржУ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬржб (initialized) рж╣ржпрж╝ржирж┐ред

ржПржЗ ржкрж░рж┐рж╕рзНржерж┐рждрж┐ржХрзЗ ржирж╛ржорзЗрж░ ржжрзНржмржирзНржжрзНржм (name conflict) ржмрж╛ рж╢рзНржпрж╛ржбрзЛржЗржВ (shadowing) ржмрж▓рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ, ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржПржХржЯрж┐ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржХрзЗ "ржврзЗржХрзЗ" ржжрзЗржпрж╝ред 
ржХрж┐ржирзНрждрзБ ржЬрж╛ржнрж╛ ржПржЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ржХрзЗ ржПржХржЯрж┐ рж▓рзЛржХрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржирж┐ржЬрзЗржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗржЦрзЗ, ржпрж╛ ржПрж░рж░ ржжрзЗржпрж╝ред 
ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржПрж░рж░ ржжрзЗржмрзЗ ржпрзЗ "variable str might not have been initialized" ржЕржержмрж╛ "cannot reference str before it is defined/initialized."

26.class Square {
   int length;
   Square sq; //does it allow length for String, but what about sq?
   
   Square(int length) {
   this.length = length;
   }
   
   void setInner(Square sq) {
   this.sq = sq;
   }
   
   int getLength() {
   return this.length;
   }
   }
   
   public class TestSquare {
   public static void main(String[] args) {
   Square sq1 = new Square(10); //Line n1
   Square sq2 = new Square(5); //Line n2
   sq1.setInner(sq2); //Line n3
   System.out.println(sq1.sq.length); //Line n4
   }
   }
   
   What will be the result of compiling and executing TestSquare class?
   
    It prints 0 on to the console
    It prints 5 on to the console
    It prints 10 on to the console
    It prints null on to the console
    Compilation error
    An exception is thrown at runtime



Ans: 
рждрж╛ ржХржорзНржкрж╛ржЗрж▓ ржХрж░рзЗ ржЪрж╛рж▓рж╛рж▓рзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ: 5
----
27. class Car {
   void speed(Byte val) { //Line n1
     System.out.println(тАЬDARKтАЭ); //Line n2
   } //Line n3
   
   void speed(byteтАж vals) {
   System.out.println(тАЬLIGHTтАЭ);
   }
   }
   
   public class Test {
   public static void main(String[] args) {
   byte b = 10; //Line n4
   new Car().speed(b); //Line n5
   }
   }
   
   Which of the following needs to be done so that LIGHT is printed on to the console?
   
    No changes are required as given code prints LIGHT on execution
    Delete Line n1, Line n2 and Line n3
    Replace Line n4 with byte... b = 10;
    Replace Line n5 with new Car().speed((byte...)b);



Ans:
"LIGHT" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп void speed(Byte val) ржорзЗржержбржЯрж┐ (Line n1, Line n2, Line n3) ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ рж╣ржмрзЗред
--
28.Consider below code of AvoidThreats.java file:
   public class AvoidThreats {
   public static void evaluate(Threat t) { //Line n5
   t = new Threat(); //Line n6
   t.name = тАЬPHISHINGтАЭ; //Line n7
   }
   
   public static void main(String[] args) {
   Threat obj = new Threat(); //Line n1
   obj.print(); //Line n2
   evaluate(obj); //Line n3
   obj.print(); //Line n4
   }
   }
   
   class Threat {
   String name = тАЬVIRUSтАЭ;
   
   public void print() {
   System.out.println(name);
   }
   }

What will be the result of compiling and executing AvoidThreats class?
 VIRUS PHISHING
 PHISHING PHISHING
 VIRUS VIRUS
 null VIRUS
 null null
 None of the other options





Ans: 
ржПржЗ ржлрж▓рж╛ржлрж▓рзЗрж░ ржХрж╛рж░ржг рж╣рж▓рзЛ ржЬрж╛ржнрж╛рждрзЗ ржЕржмржЬрзЗржХрзНржЯ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЧрзБрж▓рзЛ ржорзЗржержбрзЗ ржХрж▓ ржХрж░рж╛рж░ рж╕ржорзЯ ржорж╛ржи ржжрзНржмрж╛рж░рж╛ ржкрж╛рж╕ рж╣рзЯ (pass-by-value)ред ржпржжрж┐ржУ ржЖржкржирж┐ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржкрж╛рж╕ ржХрж░ржЫрзЗржи, рж╕рзЗржЗ рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗрж░ ржПржХржЯрж┐ ржХржкрж┐ ржорзЗржержбрзЗ ржпрж╛рзЯред 
ржорзЗржержбрзЗрж░ ржнрзЗрждрж░рзЗ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЯрж┐ржХрзЗ ржирждрзБржи ржЕржмржЬрзЗржХрзНржЯрзЗ ржкржпрж╝рзЗржирзНржЯ ржХрж░рж╛рж▓рзЗ, ржорзВрж▓ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ржЯрж┐ ржкрзНрж░ржнрж╛ржмрж┐ржд рж╣рзЯ ржирж╛ред
ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ:
VIRUS
VIRUS


----

29.public class Test {
   int i1 = 10;
   static int i2 = 20;
   
   private void change1(int val) {
   i1 = ++val; //Line n1
   i2 = val++; //Line n2
   }
   
   private static void change2(int val) {
   i1 = тАУval; //Line n3
   i2 = valтАУ; //Line n4
   }
   
   public static void main(String[] args) {
   change1(5); //Line n5
   change2(5); //Line n6
   System.out.println(i1 + i2); //Line n7
   }
   }
   
   Which of the following statements are correct regarding above code?
   Select ALL that apply.
   
    Line n1 causes compilation error
    Line n2 causes compilation error
    Line n3 causes compilation error
    Line n4 causes compilation error
    Line n5 causes compilation error
    Line n7 causes compilation error



Ans:
Line n3 causes compilation error (ржХрж╛рж░ржг static ржорзЗржержб change2 ржерзЗржХрзЗ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ i1 ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ)ред
Line n5 causes compilation error (ржХрж╛рж░ржг static ржорзЗржержб main ржерзЗржХрзЗ ржиржи-рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржорзЗржержб change1 ржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржХрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ)ред
Line n7 causes compilation error (ржХрж╛рж░ржг static ржорзЗржержб main ржерзЗржХрзЗ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ i1 ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ)ред

--
30. class Counter {
   static int ctr = 0;
   int count = 0;
   }
   
   public class Test {
   public static void main(String[] args) {
   Counter ctr1 = new Counter();
   Counter ctr2 = new Counter();
   Counter ctr3 = new Counter();
   
   for(int i = 1; i <= 5; i++ ) { 
   ctr1.ctr++; ctr1.count++; ctr2.ctr++; ctr2.count++; ctr3.ctr++; ctr3.count++; 
   } 
   System.out.println(ctr3.ctr + ":" + ctr3.count); } 
   } 
   What will be the result of compiling and executing Test class?


Ans:
ржЖржкржирж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЬрж╛ржнрж╛ ржХрзЛржбржЯрж┐ ржХржорзНржкрж╛ржЗрж▓ ржХрж░рзЗ ржЪрж╛рж▓рж╛рж▓рзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ:15:5
ржХрзЗржи ржПржоржи рж╣рзЯ?
ржПржЗ ржлрж▓рж╛ржлрж▓ржЯрж┐ ржмрзЛржЭрж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ (static) ржПржмржВ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ (instance) ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ржЧрзБрж▓рзЛрж░ ржкрж╛рж░рзНржержХрзНржп ржЬрж╛ржирждрзЗ рж╣ржмрзЗред
рзз.  static int ctr = 0;:
* ctr ржПржХржЯрж┐ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ (Static Variable)ред ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ, Counter ржХрзНрж▓рж╛рж╕рзЗрж░ ржпрждржЧрзБрж▓рзЛржЗ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ рж╣рзЛржХ ржирж╛ ржХрзЗржи (ctr1, ctr2, ctr3), рждрж╛ржжрзЗрж░ рж╕ржмрж╛рж░ ржЬржирзНржп ctr ржПрж░ ржПржХржЯрж┐ржЗ рж╕рж╛ржзрж╛рж░ржг ржХржкрж┐ ржерж╛ржХржмрзЗред
* ржпржЦржи ctr1.ctr++, ctr2.ctr++, ржмрж╛ ctr3.ctr++ ржПрж░ ржорждрзЛ ржХрзЛржирзЛ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ctr ржПрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝, рждржЦржи ржЖрж╕рж▓рзЗ рж╕рзЗржЗ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ctr ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржиржЗ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝ред
рзи.  int count = 0;:
* count ржПржХржЯрж┐ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ (Instance Variable)ред ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ, Counter ржХрзНрж▓рж╛рж╕рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЬржирзНржп (ctr1, ctr2, ctr3) count ржПрж░ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржХржкрж┐ ржерж╛ржХржмрзЗред
* ржпржЦржи ctr1.count++ ржХрж░рж╛ рж╣ржпрж╝, рждржЦржи рж╢рзБржзрзБржорж╛рждрзНрж░ ctr1 ржЕржмржЬрзЗржХрзНржЯрзЗрж░ count ржмрж╛ржбрж╝рзЗред ctr2 ржмрж╛ ctr3 ржПрж░ count ржкрзНрж░ржнрж╛ржмрж┐ржд рж╣ржпрж╝ ржирж╛ред

System.out.println(ctr3.ctr + ":" + ctr3.count);:
* ctr3.ctr: ctr3 ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ctr ржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред ctr ржПрж░ рж╕рж░рзНржмрж╢рзЗрж╖ ржорж╛ржи 15ред
* ctr3.count: ctr3 ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржирж┐ржЬрж╕рзНржм count ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржи 5ред

рждрж╛ржЗ, System.out.println() ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗ 15:5ред


   
31.public class Test {
   private static void m(int i) {
   System.out.print(1);
   }
   
   private static void m(int i1, int i2) {
   System.out.print(2);
   }
   
   private static void m(charтАж args) {
   System.out.print(3);
   }
   
   public static void main(StringтАж args) {
   m(тАШAтАЩ);
   m(тАШAтАЩ, тАШBтАЩ);
   m(тАШAтАЩ, тАШBтАЩ, тАШCтАЩ);
   m(тАШAтАЩ, тАШBтАЩ, тАШCтАЩ, тАШDтАЩ);
   }
   }
   
   What will be the result of compiling and executing Test class?
   
    Above code causes compilation error
    It compiles successfully and on execution prints 3333 on to the console
    It compiles successfully and on execution prints 1233 on to the console
    It compiles successfully and on execution prints 1333 on to the console


Ans:
It compiles successfully and on execution prints 1233 on to the console
   
32.class Book {
   private String name;
   private String author;
   
   Book() {}
   
   Book(String name, String author) {
   name = name;
   author = author;
   }
   
   String getName() {
   return name;
   }
   
   String getAuthor() {
   return author;
   }
   }
   
   public class TestBook {
   public static void main(String[] args) {
   private Book book = new Book(тАЬHead First JavaтАЭ, тАЬKathy SierraтАЭ);
   System.out.println(book.getName());
   System.out.println(book.getAuthor());
   }
   }
   
   What will be the result of compiling and executing above code?
   
    Compilation error in Book class
    Compilation error in TestBook class
    null null
    Head First Java Kathy Sierra


Ans: 
  Compilation error in TestBook class 
 (`private` modifier not allowed for local variable `book`.)





-
