Date: 1-2Aug-2024


=======================Topics =========

01. Declare and initialize variables (including casting of primitive data types)
02. Differentiate between object reference variables and primitive variables
03. Know how to read or write to object fields
04. Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)
05. Develop code that uses wrapper classes such as Boolean, Double, and Integer  

=======================================

-----------01. Declare and initialize variables (including casting of primitive data types)---------------------

* What is a variable?
* What are the different data types in Java?
* What is the difference between implicit and explicit casting?
* How do you declare and initialize a variable?
* What are the rules for naming variables?


######## Understanding Variables ################
    * A variable is a named storage location that holds a value.
    * In Java, variables must be declared before use.
    * The data type of a variable determines the type of data it can hold.

######## Primitive Data Types ################
Java has eight primitive data types:
    > byte: 8-bit signed integer (-128 to 127)
    > short: 16-bit signed integer (-32768 to 32767)
    > int: 32-bit signed integer (-2147483648 to 2147483647)
    > long: 64-bit signed integer (-9223372036854775808 to 9223372036854775807)
    > float: 32-bit single-precision floating-point number
    > double: 64-bit double-precision floating-point number
    > char: 16-bit Unicode character
    > boolean: true or false

######## Declaration and Initialization 
**Declaration:** Specifies the data type and name of the variable.
    int age;
    double salary;
    char initial;
    boolean isStudent;

**Initialization:** Assigns a value to the variable.
    int age = 25;
    double salary = 45000.50;
    char initial = 'A';
    boolean isStudent = true;

######## Casting Primitive Data Types ################
    * Casting is converting a value from one data type to another.
    * Implicit casting (widening) happens automatically for compatible types (e.g., int to double).
    * Explicit casting (narrowing) requires a cast operator to prevent data loss.

        int num = 10;
        double d = num; // Implicit casting (int to double)

        double pi = 3.14159;
        int i = (int) pi; // Explicit casting (double to int, potential data loss)

######## Important Considerations ################
    * Variable names must start with a letter, underscore (_), or dollar sign ($).
    * Variable names are case-sensitive.
    * Keywords cannot be used as variable names.
    * Use meaningful variable names to improve code readability.
    * Initialize variables before using them to avoid errors.

######## Example 
    public class VariableExample {
        public static void main(String[] args) {
            byte age = 25;
            short population = 32767;
            int salary = 50000;
            long worldPopulation = 7000000000L; // L suffix for long
            float pi = 3.14159f; // f suffix for float
            double gravity = 9.8;
            char initial = 'J';
            boolean isEmployed = true;

            // Casting example
            int x = (int) 3.14; // x will be 3
        }
    }







-----------02. Differentiate between object reference variables and primitive variables-------------------------

## Object Reference Variables vs Primitive in Java

####### Object Reference Variables ##########
    * Store references (memory addresses) to objects.
    * Objects are instances of classes.
    * Data types are class names (e.g., `String`, `Integer`, `ArrayList`).
    * Occupy variable-size memory locations.
    * References are copied when assigned, but the underlying object is not.
    * Access object's properties and methods using the dot operator (.).

####### Primitive Variables  #######
    * Store simple values directly.
    * Data types include: `byte`, `short`, `int`, `long`, `float`, `double`, `char`, and `boolean`.
    * Occupy fixed-size memory locations.
    * Values are copied when assigned to another variable.
    * No methods or properties associated with them.



**Example:**
    String name = "Alice"; // Object reference variable
    String anotherName = name; // Both variables refer to the same object

    int x = 10; // Primitive variable
    int y = x; // Copies the value 10 to y

    name = "Bob"; // Changes the reference to a new object, but anotherName still points to "Alice"
    x = 20; // Changes the value of x, but y remains 10


### Key Differences #######

    Feature     | Primitive Variables           | Object Reference Variables 
    ---------------------------------------------------------------------------
    Storage     | Direct value storage          | Reference to object location 
    Data Types  | Built-in types                | Class names 
    Memory      | Fixed size                    | Variable size 
    Assignment  | Value copying                 | Reference copying 
    Operations  | Basic arithmetic, comparison  | Object methods and properties 

### Additional Points for 1Z0-808 #######
    > Null values:** Object reference variables can be assigned `null` to indicate that they don't refer to any object. Primitive variables cannot be null.
    > Wrapper classes:** Primitive types have corresponding wrapper classes (e.g., `Integer`, `Double`) that allow them to be treated as objects.
    > Autoboxing and unboxing:** Java automatically converts between primitive types and their wrapper classes.
    > Memory management:** Primitive variables are managed by the JVM, while object memory is managed by the garbage collector.



-----------03. Know how to read or write to object fields-------------------------
-----------04. Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)---
-----------05. Develop code that uses wrapper classes such as Boolean, Double, and Integer ---------------------

