Date: 1-2Aug-2024(Thursday-Friday)


=======================Chapter:02 Working With Java Data Types(05) =========

01. Declare and initialize variables (including casting of primitive data types)
02. Differentiate between object reference variables and primitive variables
03. Know how to read or write to object fields
04. Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)
05. Develop code that uses wrapper classes such as Boolean, Double, and Integer  

=======================================

=====================================================================================================================
-----------01. Declare and initialize variables (including casting of primitive data types)---------------------
=====================================================================================================================

######## Primitive Data Types with Size
######## Declaration and Initialization
######## What is casting, why casting, 01. Implicit casting (widening), 02.Explicit casting (narrowing)?
######## Casting Primitive Data Types 
######## How to name a variable with DATA TYPE?


######## Primitive Data Types ################
Java has eight primitive data types:
------------------------------------------------------------------------------------------------------------
Data Type |	Size (bits) |	Default Value         |	Range
------------------------------------------------------------------------------------------------------------
byte        |	8       |	0                     |	-128 to 127
short       |	16      |	0                     |	-2^15 (-32,768) to 2^15 - 1 (32,767).
int         |	32	    |   0                     |	-2^31 (-2,147,483,648) to 2^31 - 1 (2,147,483,647).
long        |	64      |	0                     |	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float       |	32      |	0.0f                  |	Approximately ±3.4E-38 to ±3.4E+38
double      |	64      |	0.0d                  |	Approximately ±1.7E-308 to ±1.7E+308
char        |	16      |'\u0000'(null character) | 0 to 65,535 (Unicode code points)
boolean     |	1       |	false                 |	true or false
------------------------------------------------------------------------------------------------------------

######## Declaration and Initialization 
Declaration: Specifies the data type and name of the variable.
    int age;    double salary;    char initial;    boolean isStudent;

Initialization: Assigns a value to the variable.
    int age = 25;    double salary = 45000.50;    char initial = 'A';    boolean isStudent = true;

######## What is Casting(Primitive Data Types) and Why casting, ################
    * Casting is converting a value from one data type to another.
         Question: int a = 10/3 Result is an int of double? If I want to show the result in int than? 
         Ans: That is why casting.
######## 01. Implicit casting (widening), 02.Explicit casting (narrowing) ################
     01. Implicit casting (widening) happens automatically for compatible types (e.g., int to double).
        int num = 10/3;
        double d = (double) num; // Implicit casting (int to double)

    02. Explicit casting (narrowing) requires a cast operator to prevent data loss.
        double pi = 3.14159;
        int i = (int) pi; // Explicit casting (double to int, potential data loss)

        ***inside double int exists but inside int double is not exist

######## How to name a variable  ################
    * Variable names must start with a letter, underscore (_), or dollar sign ($).
    * Variable names are case-sensitive.
    * Keywords cannot be used as variable names.
    * Use meaningful variable names to improve code readability.
    * Initialize variables before using them to avoid errors.

######## Example 
    public class VariableExample {
        public static void main(String[] args) {
            byte age = 25;
            short population = 32767;
            int salary = 50000;
            long worldPopulation = 7000000000L; // L suffix for long
            float pi = 3.14159f; // f suffix for float
            double gravity = 9.8;
            char initial = 'J';
            boolean isEmployed = true;

            // Casting example
            int x = (int) 3.14; // x will be 3
        }
    }

=====================================================================================================================
-----------02. Differentiate between object reference variables and primitive variables-------------------------
=====================================================================================================================
####### What is an Instance?
####### Understanding Object References:
####### Key Differences between object reference variables and primitive variables
####### ->Null values ->Memory Management for Object Reference and Primitive Variables 


############# What is an Instance? =====================
Instance in Java refers to a specific copy of a class. When you create an object from a class, you create an instance of that class.
ClassName instanceName = new ClassName();

#############  Understanding Object References #############
1. Declaration and Initialization:
   - When you declare a variable of a class type, you are actually declaring an object reference. For example:
     MyClass obj;
     Here, `obj` is a reference to an object of type `MyClass`, but it does not point to any actual object yet.

   - To initialize the reference, you need to create an object and assign it to the reference:
     obj = new MyClass();
     Now, `obj` holds the memory address of the newly created `MyClass` object.

Example Code:
class Person {
    String name;
    void setName(String name) { this.name = name; }
    String getName() {return name; }
}

public class Main {
    public static void main(String[] args) {
        // Create a new Person object
        Person person1 = new Person();
        
        // Use the reference to call methods on the object
        person1.setName("Alice");
        System.out.println(person1.getName()); // Outputs: Alice

        // Create another reference to the same object
        Person person2 = person1;

        // Modify through the second reference
        person2.setName("Bob");

        // Changes are reflected through the first reference
        System.out.println(person1.getName()); // Outputs: Bob
    }
}

### Key Differences #######

    Feature     | Primitive Variables           | Object Reference Variables 
    ---------------------------------------------------------------------------
    Storage     | Direct value storage          | Reference to object location 
    Data Types  | Built-in types (int, char)    | Class names (Integer, Charecter) 
    Memory      | Fixed size                    | Variable size 
    Assignment  | Value copying                 | Reference copying 
    Operations  | Basic arithmetic, comparison  | Object methods and properties 



Example:
    String name = "Alice"; // Object reference variable
    String anotherName = name; // Both variables refer to the same object

    int x = 10; // Primitive variable
    int y = x; // Copies the value 10 to y

    name = "Bob"; // Changes the reference to a new object, but anotherName still points to "Alice"
    x = 20; // Changes the value of x, but y remains 10




### Additional Points #######
    > Null values: Object reference variables can be assigned `null` to indicate that they don't refer to any object. Primitive variables cannot be null.
    > Memory management: Primitive variables are managed by the JVM, while object memory is managed by the garbage collector.


=====================================================================================
-----------03. Know how to read or write to object fields-------------------------
======================================================================================

######## Fields(Static, Transient, and Volatile Field) and Object
######## Accessing Object Fields:
                01. Direct Access, 
                02. Using Accessor Methods

Fields: are variables declared within a class. They represent the data associated with an object.

------------------------------------------------------------------------------------------
Feature             |	Static Field(স্থির)       |Transient Field(ক্ষণস্থায়ী)  |	Volatile Field(অস্থির)
------------------------------------------------------------------------------------------
Scope               |	Class                   |	Object                |	Object
Lifetime            |	Class's lifetime        |	Object's lifetime     |	Object's lifetime
Sharing             |	Shared by all instances |	Not shared            |	Not shared
Serialization       |	Included                |	Excluded              |	Included
Memory Consistency  |	No guarantee            |	No guarantee	      | Guaranteed
Modifier            |	static                  |	transient             |	volatile
------------------------------------------------------------------------------------------

  01. Static(স্থির) Fields:                   
                   Example: public static final double PI = 3.14159;
  02. Transient(ক্ষণস্থায়ী) Fields:                   
                   Example: private transient String password; // Password shouldn't be serialized
  03. Volatile(অস্থির) Fields                   
                Example:
                    public class Counter {
                        private volatile int count = 0;                            
                            public void increment() { count++; }
                            public int getCount() {  return count; }
                    }        
        ****In this example, the count variable is marked as volatile. 
        This guarantees that any changes made to count by one thread will be immediately visible to other threads. 
        Without volatility, there's a risk of inconsistent values due to caching.


Object: is an instance of a class. It holds the values of its fields.

######### Accessing Object Fields ##########
There are primarily two ways to access object fields:

1. Direct Access (Using Dot Operator)
    This method is straightforward but has limitations due to encapsulation.
    It's suitable for public fields.
        class Person {
            public String name;
            int age; // Default access (package-private)
        }

        public class Main {
            public static void main(String[] args) {
                Person person = new Person();
                person.name = "Alice"; // Direct access to public field
                // person.age = 30; // Error: age is not public
            }
        }


2. Using Accessor Methods (Getters and Setters)
    This is the preferred approach for encapsulating data and providing controlled access.
    It allows you to validate input and perform additional logic.

        class Person {
            private String name;
            private int age;

            public String getName() { return name; }
            public void setName(String name) { this.name = name; }
            public int getAge() { return age; }

            public void setAge(int age) {
                if (age>= 0) {this.age= age; 
                }else { // Handle invalid age
                }
            }
        }

        public class Main {
            public static void main(String[] args) {
                Person person = new Person();
                person.setName("Bob");
                person.setAge(25);
                System.out.println(person.getName());
                System.out.println(person.getAge());
            }
        }


=====================================================================================================================
-----------04. Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)---
=====================================================================================================================
######## What is an Object and Class what it contain?
######## Creation
######## Dereference by Reassignment
######## Garbage Collection
######## Answer the below questions:
            -What are `System.gc()` and `finalize()` method
            -Why object's lifecycle is so important?
            -why garbage collection, is so important?
            -what is a memory leak?
            -Where object does live?
            -What does a Reference variable hold?
            -Assigning a new value to a reference variable destroys the old object?

######## Object and it contains
 Object: -All That we can see, touch, and feel are Objects.
        -An instance of a class.
        -Contains: 01. Data (Attributes or Fields) 02.Behavior (Methods):

######## Class
Objects and classes are closely related concepts in object-oriented programming (OOP).
    Class:
   -A blueprint or template that defines the structure and behavior of objects.
   -It specifies the attributes (data members) and methods (functions) that objects of that class will have.

######## Creation ########
    An object is created using the `new` keyword followed by the constructor of the class. The constructor initializes the object's state.
    String name = new String("Alice");

    * The `new String("Alice")` part creates a new `String` object in the heap memory.
    * The `name` variable holds a reference to this object.

######## Dereference by Reassignment ########
    Dereferencing means breaking the link between a reference variable and the object it points to. This usually happens through reassignment.
    name = "Bob";

    * A new `String` object "Bob" is created.
    * The `name` variable now points to this new object.
    * The old "Alice" object is no longer referenced by any variable.

######## Garbage Collection ########
    Java employs automatic garbage collection to reclaim memory occupied by objects that are no longer in use.
    * The garbage collector periodically scans the heap for objects that are unreachable. 
    * An object becomes unreachable when there are no active references to it.
    * Once an object is determined to be garbage, its memory is reclaimed for future use.
    * Garbage collection is automatic, but its timing is unpredictable.

######## Important Notes:
* While `System.gc()` can be used to suggest garbage collection, it's not guaranteed to run immediately.
* The `finalize()` method is called before garbage collection, but its use is generally discouraged.
* Understanding object lifetimes is crucial for preventing memory leaks.
* Memory Leak: it occurs when objects are no longer in use but still referenced.
* Garbage Collection behaviors for referenced objects are: Strong, Weak, Soft and Phandom.

* Where object does live?
    * Objects live in the heap memory.
* What does a Reference variable hold?
    * Reference variables hold addresses of objects.
* Assigning a new value to a reference variable destroys the old object.
    * Assigning a new value to a reference variable doesn't destroy the old object but breaks the link.

    Example:
    public class ObjectLifecycle {
        public static void main(String[] args) {
            String name1 = new String("Alice"); // Object creation
            String name2 = name1; // Both references point to the same object

            name1 = "Bob"; // Dereference of "Alice" object

            // At this point, the "Alice" object is eligible for garbage collection
        }
    }


=====================================================================================================================
-----------05. Develop code that uses wrapper classes such as Boolean, Double, and Integer ---------------------
=====================================================================================================================

######## What and Why Wrapper Classes in Java
         ***Why convert primitive data type into Object and vice-versa?
######## How:  -Autoboxing and unboxing
               -Using wrapper classes in collections(Arraylist)
########  What are these:
               -Each primitive type has its wrapper class.
               -Null values 
               -Performance 
               -Caching
######### How to convert String to Integer?
######### How to convert Integer to String?
######### How to declare wrapper class as constants?


########  What and Why Using Wrapper Classes in Java ###### 
    Wrapper classes in Java provide a way to convert primitive data types into objects. 
    ***This is essential for using primitive data types in collections, as collections can only store objects.

################################################## 
       How:    -Creating wrapper class objects, 
               -Using wrapper class methods 
               -Autoboxing and unboxing           
               -Using wrapper classes in collections 
#################################################### 

                import java.util.ArrayList;
                import java.util.Iterator;
                
                public class WrapClass {                
                    public static void main(String[] args){
                        // Boxing and Auto Boxing
                        int iValue= 10;
                        // Integer Boxing= new Integer(iValue); //Boxing  (This Integer() is depricated)
                        Integer AutoBoxing= iValue; //Auto Boxing
                        // System.out.println(AutoBoxing);
                        
                        // Unboxing and Auto Unboxing
                        // int UnBoxing = AutoBoxing.intValue(); //Unboxing
                        int AutoUnBoxing = AutoBoxing; //Auto Unboxing
                        // System.out.println(AutoUnBoxing);
                                        
                         // Using wrapper classes in collections
                        ArrayList<Integer> numbers = new ArrayList<>();
                        numbers.add(AutoBoxing);
                        numbers.add(20); 
                        numbers.add(30); 
                
                        System.out.println("Numbers: " + numbers);
                        
                        //extendent for loop
                        // for (Integer num : numbers) {
                        //     System.out.println(num);
                        // }


                        // foreach
                        // numbers.forEach(System.out::println);
                              
                        // Lambda Expression with for
                        // numbers.forEach(num->System.out.println(num));
                        
                        //While loop
                        Iterator<Integer> num= numbers.iterator();
                        while (num.hasNext()) {
                            System.out.println(num.next());
                            
                        }
                
                
                    }
                }

#########  Explanation: ###### 
    -Each primitive type has its Wrapper Class Ex: int to Integer, double to Double.
    -Null values: Wrapper classes can hold null values, unlike primitive types.
    -Performance: While autoboxing and unboxing are convenient, they can have a slight performance impact compared to using primitive types directly.
    -Caching: Some wrapper classes (like Integer and Byte) have a cache for commonly used values to optimize performance.


### How to convert String to Integer and Integer to String ###### 
    Parsing strings to primitive types:
        String strInt = "123";
        int parsedInt = Integer.parseInt(strInt);

### How to convert Integer to String ###### 
            class Person {
            private String name;
            private int age;
        
            public Person(String name, int age) {
                this.name = name;
                this.age = age;
            }
        
            @Override
            public String toString() {
                return "Person{"   
         +
                        "name='" + name + '\'' +
                        ", age=" + age +
                        '}';
            }
        }
                

######### How to declare wrapper class as constants: #########
  boolean isTrue = Boolean.TRUE;
  double pi = Double.PI;



   
---
