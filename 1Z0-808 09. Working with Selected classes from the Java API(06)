
===========09. Working with Selected classes from the Java API(06) String, StringBuilder, ArrayList, DataTime, Lamda Expression: ======= 10-12Aug-24(Wednesday)

---- String  ----- 
01. length() 02. charAt() 03. indexOf() 04. substring() 05.toLowerCase() and toUpperCase 06. equals() and equalsIgnoreCase()
07. startsWith() and endsWith() 08. contains() 09. replace() 10. trim()

---- Creating a String  ----- 
01. length() 02. charAt() 03. indexOf() 
04. substring() 
         {
         String string = "animals";
         System.out.println(string.substring(3)); // mals
         System.out.println(string.substring(string.indexOf('m'))); // mals
         System.out.println(string.substring(3, 4)); // m
         }
05.toLowerCase() and toUpperCase 06. equals() and equalsIgnoreCase()
07. startsWith() and endsWith() 08. contains() 09. replace() 10. trim()

----------Creating a StringBuilder --------------
01. length() 02. charAt() 03. indexOf() 04. substring() 05. append() 06. insert() (Ex: sb.insert(7, "-");)
07. delete() and deleteCharAt() Ex: sb.delete(1, 3); sb.deleteCharAt(5); // throws an exception
08. reverse() 09. toString() 

---------











01. Manipulate data using the StringBuilder class and its methods
02. Create and manipulate Strings
03. Create and manipulate calendar data using classes from java.time.LocalDateTime,  java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period
04. Write a simple Lambda expression that consumes a Lambda Predicate expression

================================================================================
---------01. Manipulate data using the StringBuilder class and its methods -----
================================================================================

###### Why StringBuilder? StringBuilder vs String
###### Key Features of `StringBuilder` 
###### Common Methods and Use


###### Why StringBuilder ######
- `StringBuilder` allows for efficient, mutable string manipulation.
- Common methods include `append()`, `insert()`, `delete()`, `replace()`, `reverse()`, and `toString()`.
- `StringBuilder` is preferred over `String` when performing many modifications to strings due to its performance benefits.

###### Key Features of `StringBuilder` ######
1. Mutability:
   - Unlike `String`, which is immutable (cannot be changed once created), `StringBuilder` allows modifications to its content without creating new objects.

2. Performance:
   - `StringBuilder` is designed for scenarios where frequent modifications to strings are required, making it more performance-efficient than using `String` for such operations.

###### Common Methods of `StringBuilder` ######
Hereâ€™s a breakdown of some commonly used methods in the `StringBuilder` class:

1. `append()`
   - Appends the specified data (string, character, integer, etc.) to the end of the `StringBuilder` object.   
   StringBuilder sb = new StringBuilder("Hello");
   sb.append(" World");
   System.out.println(sb); // Output: Hello World
   

2. `insert(int offset, String str)`
   - Inserts the specified string at the specified position (`offset`).   
   StringBuilder sb = new StringBuilder("Hello World");
   sb.insert(6, "Java ");
   System.out.println(sb); // Output: Hello Java World
   

3. `delete(int start, int end)`
   - Deletes the characters between the specified `start` and `end` positions (end is exclusive).   
   StringBuilder sb = new StringBuilder("Hello Java World");
   sb.delete(6, 11);
   System.out.println(sb); // Output: Hello World
   

4. `replace(int start, int end, String str)`
   - Replaces the characters from the specified `start` to `end` with the specified string.   
   StringBuilder sb = new StringBuilder("Hello World");
   sb.replace(6, 11, "Java");
   System.out.println(sb); // Output: Hello Java
   

5. `reverse()`
   - Reverses the sequence of characters in the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   sb.reverse();
   System.out.println(sb); // Output: olleH
   

6. `toString()`
   - Converts the `StringBuilder` to a `String`. This is useful when you need to retrieve the string representation of the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   String str = sb.toString();
   System.out.println(str); // Output: Hello
   

7. `charAt(int index)`
   - Returns the character at the specified index.  
   StringBuilder sb = new StringBuilder("Hello");
   char ch = sb.charAt(1);
   System.out.println(ch); // Output: e
   

8. `length()`
   - Returns the length (number of characters) of the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   int length = sb.length();
   System.out.println(length); // Output: 5
   

9. `capacity()`
   - Returns the current capacity of the `StringBuilder`. The capacity is the amount of space allocated for characters.   
   StringBuilder sb = new StringBuilder("Hello");
   int capacity = sb.capacity();
   System.out.println(capacity); // Output may vary; default capacity is 16 + length
   




================================================================================
----------------- 02. Create and manipulate Strings ---------------------------
================================================================================

###### What and Why Strings?
###### Key Features of `Strings` 
###### Common Methods and Use


###### What is Strings, how to Create, and Why String? +++++++++++++++++++
strings are instances of the `String` class, which is part of the `java.lang` package. Strings can be created in several ways:

1. Using String Literals:
   - Strings are typically created using string literals, which are enclosed in double quotes.
   String str1 = "Hello, World!";

   Explanation:
   - The literal `"Hello, World!"` is automatically interned, meaning it's stored in a common pool of string literals to save memory.

2. Using the `new` Keyword:
   - You can also create strings using the `new` keyword and the `String` constructor.
   String str2 = new String("Hello, World!");

- Performance Considerations:
  - While strings are immutable, frequent modifications can lead to performance issues. For extensive modifications, consider using `StringBuilder`.

   Explanation:
   - This creates a new `String` object with the content `"Hello, World!"`, regardless of whether an identical string already exists in the pool.

###### Common Methods for Manipulating Strings ######
Here are some commonly used methods of the `String` class:

1. `length()`
   - Returns the number of characters in the string.
   String str = "Hello";
   int length = str.length(); // Output: 5

2. `charAt(int index)`
   - Returns the character at the specified index.
   char ch = str.charAt(1); // Output: 'e'

3. `substring(int beginIndex, int endIndex)`
   - Returns a substring from the specified `beginIndex` to `endIndex` (endIndex is exclusive).

   String sub = str.substring(1, 4); // Output: "ell"

4. `indexOf(String str)`
   - Returns the index of the first occurrence of the specified substring.
   int index = str.indexOf("l"); // Output: 2

5. `toUpperCase()`
   - Converts all characters in the string to uppercase.
   String upper = str.toUpperCase(); // Output: "HELLO"

6. `toLowerCase()`
   - Converts all characters in the string to lowercase.
   String lower = str.toLowerCase(); // Output: "hello"

7. `trim()`
   - Removes any leading and trailing whitespace from the string.
   String trimmed = "   Hello   ".trim(); // Output: "Hello"

8. `replace(CharSequence target, CharSequence replacement)`
   - Replaces all occurrences of the specified substring with the specified replacement.
   String replaced = str.replace("l", "L"); // Output: "HeLLo"

9. `split(String regex)`
   - Splits the string around matches of the given regular expression.
   String[] parts = "one,two,three".split(","); // Output: ["one", "two", "three"]

10. `startsWith(String prefix)`
    - Checks if the string starts with the specified prefix.
    boolean starts = str.startsWith("He"); // Output: true


11. `endsWith(String suffix)`
    - Checks if the string ends with the specified suffix.
    boolean ends = str.endsWith("lo"); // Output: true


12. `contains(CharSequence sequence)`
    - Checks if the string contains the specified sequence of characters.
    boolean contains = str.contains("ell"); // Output: true



===========================================================================================
03. Create and manipulate calendar data using classes from java.time.LocalDateTime,  java.time.LocalDate, 
    java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period
===============================================================================================

####### What are these?
####### Creating and Manipulating:
###### 1. `LocalDateTime`
###### 2. `LocalDate`
###### 3. `LocalTime`
###### 4. `DateTimeFormatter`
###### 5. `Period`
###### Example of Using `java.time` Classes


###### What are these? ######
- `LocalDateTime`: Represents a date and time without time zone. Used for combining date and time operations.
- `LocalDate`: Represents a date without time. Useful for date manipulations.
- `LocalTime`: Represents a time without a date. Useful for time manipulations.
- `DateTimeFormatter`: Used for formatting and parsing date-time values.
- `Period`: Represents a span of time in terms of years, months, and days, useful for measuring the difference between dates.



###### 1. `LocalDateTime` ######
`LocalDateTime` represents a date-time without a time zone in the ISO-8601 calendar system. It combines a `LocalDate` and `LocalTime` into one object.

####### Creating and Manipulating `LocalDateTime` ######
- Creating an instance:
  LocalDateTime dateTime = LocalDateTime.now(); // Current date and time
  LocalDateTime specificDateTime = LocalDateTime.of(2024, 8, 4, 15, 30); // Specific date and time

- Manipulating date-time:
  LocalDateTime later = dateTime.plusDays(10).minusHours(5); // Add 10 days and subtract 5 hours

- Getting specific components:
  int year = dateTime.getYear();
  int month = dateTime.getMonthValue();
  int day = dateTime.getDayOfMonth();


###### 2. `LocalDate` ######
`LocalDate` represents a date without a time component. Itâ€™s useful for working with dates alone, without needing the time of day.

####### Creating and Manipulating `LocalDate` ######
- Creating an instance:
  LocalDate date = LocalDate.now(); // Current date
  LocalDate specificDate = LocalDate.of(2024, 8, 4); // Specific date

- Manipulating dates:
  LocalDate futureDate = date.plusWeeks(2).minusDays(5); // Add 2 weeks and subtract 5 days

- Getting specific components:
  int year = date.getYear();
  int month = date.getMonthValue();
  int day = date.getDayOfMonth();


###### 3. `LocalTime` ######
`LocalTime` represents a time without a date component. Itâ€™s useful for working with times of day.

####### Creating and Manipulating `LocalTime` ######
- Creating an instance:
  LocalTime time = LocalTime.now(); // Current time
  LocalTime specificTime = LocalTime.of(14, 30); // Specific time (2:30 PM)

- Manipulating times:
  LocalTime laterTime = time.plusHours(3).minusMinutes(15); // Add 3 hours and subtract 15 minutes

- Getting specific components:
  int hour = time.getHour();
  int minute = time.getMinute();


###### 4. `DateTimeFormatter` ######
import java.time.format.DateTimeFormatter;

`DateTimeFormatter` is used for formatting and parsing date-time objects. It provides flexible ways to format date-time data and parse strings into date-time objects.

####### Creating and Using `DateTimeFormatter` ######
- Formatting date-time:
  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  String formattedDateTime = dateTime.format(formatter);

- Parsing a date-time string:
  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
  LocalDate parsedDate = LocalDate.parse("2024-08-04", formatter);


###### 5. `Period` ######
`Period` represents a quantity of time in terms of years, months, and days. It is used to measure the difference between two dates.

####### Creating and Using `Period` ######
- Creating a period:
  Period period = Period.of(1, 2, 3); // Represents 1 year, 2 months, and 3 days

- Calculating periods between dates:
  LocalDate startDate = LocalDate.of(2024, 1, 1);
  LocalDate endDate = LocalDate.of(2024, 8, 4);
  Period periodBetween = Period.between(startDate, endDate);

- Getting period components:
  int years = periodBetween.getYears();
  int months = periodBetween.getMonths();
  int days = periodBetween.getDays();


###### Example of Using `java.time` Classes ######
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.Period;

public class DateTimeExample {
    public static void main(String[] args) {
        // LocalDateTime
        LocalDateTime now = LocalDateTime.now();
        System.out.println("Current DateTime: " + now);

        LocalDateTime futureDateTime = now.plusMonths(1).minusDays(5);
        System.out.println("Future DateTime: " + futureDateTime);

        // LocalDate
        LocalDate today = LocalDate.now();
        System.out.println("Today's Date: " + today);

        LocalDate nextWeek = today.plusWeeks(1);
        System.out.println("Next Week's Date: " + nextWeek);

        // LocalTime
        LocalTime currentTime = LocalTime.now();
        System.out.println("Current Time: " + currentTime);

        LocalTime timeInFuture = currentTime.plusHours(2);
        System.out.println("Time in 2 Hours: " + timeInFuture);

        // DateTimeFormatter
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String formattedDateTime = now.format(formatter);
        System.out.println("Formatted DateTime: " + formattedDateTime);

        LocalDate parsedDate = LocalDate.parse("04-08-2024", formatter);
        System.out.println("Parsed Date: " + parsedDate);

        // Period
        Period period = Period.between(LocalDate.of(2023, 1, 1), LocalDate.of(2024, 8, 4));
        System.out.println("Period between dates: " + period.getYears() + " years, " +
                           period.getMonths() + " months, " + period.getDays() + " days");
    }
}


=============================================================================================
--------04. Write a simple Lambda expression that consumes a Lambda Predicate expression ----
=============================================================================================

####### 1. Lambda Expressions and When to Lambda Expressions
####### 2. Functional Interfaces
####### 3. Predicate Functional Interface
####### Lambda Expression that Consumes a Predicate(Define Predicate & Use Predicate:)


####### 1. Lambda Expressions and When to Lambda Expressions ######
   Lambda Expressions:
         Anonymous functions: Lambda expressions are anonymous functions that can be treated as values.
         Functional interface: They can only be used to implement functional interfaces, which have exactly one abstract method.
            Syntax:
            parameters -> expression (if there's only one parameter and no parentheses)
            (parameters) -> expression (for single-line expressions)
            (parameters) -> { statements } (for multi-line expressions)
         
   Examples:         
      // **interface can not instantiate like class with new keyword */
      interface InterfaceA{
             void show(); 
      }
      
      // implements InterfaceA
      class ClassB implements InterfaceA{
             public void show(){
                    System.out.println("I am from Interface A");
             }    
      }
      
      public class Demo {       
             public static void main(String [] args){
                    /** call and show() from inteface ClassB */ 
                    // ClassB obj = new ClassB();
                    // obj.show();
      
                    /** Lamda Expression (call Functional interface) */
                    InterfaceA obj = ()->System.out.println("I am from Interface A with Lambda Exapression");
                    obj.show();
             } 
      }
            
   ###### When to Use Lambda Expressions
   * Use lambda expressions when you need to pass behavior as a parameter.
   * Prefer lambda expressions for short, concise code blocks.
   * Consider using method references for even shorter expressions.
   * Be aware of potential performance implications, especially in highly performance-critical code.
   Here are some common scenarios where they shine:
   
   ### 1. **Event Handling:**
   * Simplifying event listeners:
     button.addActionListener(e -> System.out.println("Button clicked!"));
   
   ### 2. **Collections:**
   * Filtering, mapping, and reducing data:
     List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
     List<Integer> evenNumbers = numbers.stream()
                                       .filter(n -> n % 2 == 0)
                                       .collect(Collectors.toList());
   
   ### 3. **Concurrency:**
   * Creating threads concisely:
     new Thread(() -> System.out.println("Hello from a thread")).start();
   
   ### 4. **Functional Interfaces:**
   * Implementing functional interfaces:
     Comparator<String> comparator = (s1, s2) -> s1.length() - s2.length();
   
   ### 5. **Method References:**
   * Using existing methods as lambda expressions:
     List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
     names.sort(Comparator.comparing(String::length));
   
   ### 6. **Stream API:**
   * Performing complex data manipulations:
     int sum = numbers.stream().reduce(0, Integer::sum);
   
         **Example: Combining Multiple Operations**
         List<String> words = Arrays.asList("apple", "banana", "orange", "grape");
         List<String> result = words.stream()
                                    .filter(word -> word.length() > 5)
                                    .map(String::toUpperCase)
                                    .collect(Collectors.toList());
         System.out.println(result); // Output: [BANANA, ORANGE]
            ***In this example, 
            lambda expressions are used to filter words based on length, convert them to uppercase, and collect the results into a new list.


####### 2. Functional Interfaces ######
   Functional interfaces are interfaces with a single abstract method. 
   The `java.util.function` package provides several functional interfaces, including `Predicate`, `Function`, `Consumer`, and `Supplier`.
   
   ####### 3. When to use and WHAT is Predicate Functional Interface ######
   -`Predicate<T>` is a functional interface in the `java.util.function` package 
   -that represents a BOOLEAN--valued function of one argument. 
   -It has a single abstract method `test(T t)` that evaluates or filter data the `Predicate`.
   
         Signature:
         @FunctionalInterface
         public interface Predicate<T> {
             boolean test(T t);
         }
   
   ###### Lambda Expression that Consumes a Predicate ######
   To write a lambda expression that consumes a `Predicate`, I need to:
   1. Define a `Predicate`: Create a lambda expression that implements the `Predicate` interface.
   2. Use the `Predicate`: Apply this `Predicate` to some data.
   
   ####### Example
   - Define a `Predicate` to test if a number is positive.
   - Use this `Predicate` with a lambda expression to filter a list of numbers.
   
            import java.util.ArrayList;
            import java.util.List;
            import java.util.function.Predicate;
            
            public class LambdaExample {
                public static void main(String[] args) {
                    // Define a Predicate to check if a number is positive
                    Predicate<Integer> isPositive = number -> number > 0;
            
                    // Create a list of integers
                    List<Integer> numbers = new ArrayList<>();
                    numbers.add(-5);
                    numbers.add(3);
                    numbers.add(0);
                    numbers.add(10);
            
                    // Filter the list using the Predicate
                    System.out.println("Positive numbers:");
                    for (Integer number : numbers) {
                        if (isPositive.test(number)) {
                            System.out.println(number);
                        }
                    }
                }
            }
   
   ########## Define Predicate & Use Predicate:
      - `Predicate<Integer> isPositive = number -> number > 0;`
      - This lambda expression(isPositive.test(number)) checks if a number is greater than zero.
   
 






-
