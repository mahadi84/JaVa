
================= Check from the list whether an Animal can Swim or Fly ==========================
import java.util.ArrayList;
import java.util.List;

class Animal{
    private String name;
    private boolean canSwim;
    private boolean canFly;

   public Animal(String name, boolean canSwim, boolean canFly){
                this.name=name;
                this.canSwim=canSwim;
                this.canFly=canFly;
   }

public boolean canSwim(){return canSwim;}
public boolean canFly(){return canFly;}

public String getName() { return name;}
public boolean isCanSwim() { return canSwim;} // ** Notice return data
public boolean isCanFly() { return canFly;} 

}

interface Predicate<T>{ boolean test(T t);} // ** Generics receives any data type  but works with only interface and boolean(return type)
//OR
//interface CheckBehavoir{ boolean test(Animal a);} // ** Why (Functional) interface and boolean? Lambda works with these. 


//class CheckCanSwim implements CheckBehavoir{     // // ** Why Extends? An interface can not instantiate
   // public boolean test(Animal a){ return a.canSwim(); }
//}

public class LambdaSearch {
    public static void main(String[] args) {
        List <Animal> animals= new ArrayList<>();
        animals.add(new Animal("Frog", true, false));
        animals.add(new Animal("Fish", true, false));
        animals.add(new Animal("Dove", false, true));
        animals.add(new Animal("Bulbul", false, true));
        animals.add(new Animal("Crow", false, true));

    // check(animals, new CheckCanSwim()); /// ** Notice 2nd Param (Sub goes to Super Class)
    // check(animals, a-> a.canSwim()); //(Animal a)->{return a.canSwim();}
    print(animals, a-> !a.canSwim()); 

    }

        private static void print(List<Animal> animals, Predicate<Animal> p){ //generics
        //private static void print(List<Animal> animals, CheckBehavoir cb){
            for(Animal ani : animals){
               if (p.test(ani)) {                 // ** Notice checked boolean data 
                   System.out.println("Animal: "+ani.getName());
                }        
            }
        }
}



========================= Find/Filter  Negative/Positive number===================================
        List<Integer> list = Arrays.asList(-6,-5,0,1,5);
        OR
        List<Integer> list = new ArrayList<>();
        list.add(-6);
        list.add(-5);
        list.add(0);
        list.add(1);
        list.add(5);
        print(list, e -> e < 0);  //Find Negative number
        print(list, e -> e > 0); //Find Positive number
        }
        public static void print(List<Integer> list, Predicate<Integer> p) {
        for (Integer num : list)
        if (p.test(num))
        System.out.println(num);

 OUTPUT: -6, -5

=========== Find/Filter Positive Number ==================
         List<Integer> positiveNumbers = list.stream()
                .filter(number -> number > 0)
                .collect(Collectors.toList());
        System.out.println("Positive numbers: " + positiveNumbers);
OUTPUT: [1,5]

========== Find/Filter Even Number ========================= 
    List<Integer> evenNumbers = list.stream()
                                       .filter(n -> n % 2 == 0)
                                       .collect(Collectors.toList());
        System.out.println(evenNumbers);
OUTPUT: [-6, 0]


========== Find/Filter data with length =========================

List<String> words = Arrays.asList("app", "banana", "orange", "grape");
         List<String> result = words.stream()
                                    .filter(word -> word.length() >= 5 && word.startsWith("o"))
                                    .map(String::toUpperCase)
                                    .collect(Collectors.toList());
        System.out.println(result);
OUTPUT: ORANGE





   
