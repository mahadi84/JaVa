
01. What is the Data Structure?

02. Array Vs ArrayList Vs LinkedList (When to Use Which)?
03. HashMap Vs LinkedHashMap Vs TreeMap (When to use which)?
04. HashSet Vs LinkedHashSet Vs TreeSet (When to use which)?

05. What is an algorithm?


=========================== 01. What is the Data Structure? ===========================

########## Data Stucture
-Common data structures (Arrays, Lists, Sets, Map, Stack, Queue, graphs)

######### Specific Data Structures:

Array:  is a collection of elements of the same data type(e.g., int, double, String), stored in contiguous memory locations. Each element in an array is identified by its index, which starts from 0.
        -Fixed size: Once declared, the size of an array cannot be changed.
        -Can I Remove Array data?: Yes but it can be inefficient for large arrays, especially if you need to remove many elements.

Lists: -Interface in Java -Ordered collections of elements -allow duplicate elements -extends the Collection interface inherits the basic methods like add, remove, contains, isEmpty
ArrayList: Dynamically resizable array-based list (efficient for random access).
LinkedList: Doubly linked list (efficient for insertions and deletions at any position). efficient for insertions and deletions at the beginning or end of the list.

Sets: Unordered collections of unique elements.
HashSet: Hash table-based set (efficient for contains and add operations).
TreeSet: Red-black tree-based set (sorted order and efficient for range queries).

Maps: Key-value pairs.
HashMap: Hash table-based map (efficient for containsKey, get, and put operations).
TreeMap: Red-black tree-based map (sorted order and efficient for range queries).

Queues: First-in-first-out (FIFO) data structure.
Queue interface: Defines methods like offer, poll, peek, etc.
LinkedList implementation: Can be used as a queue.

Stacks: Last-in-first-out (LIFO) data structure.
Stack interface: Defines methods like push, pop, peek, etc.
LinkedList or Vector implementation: Can be used as a stack.

Choosing the Right Data Structure:

##########Consider:
Different data structures have different strengths and weaknesses. Choose the one that best suits your specific requirements. For Example
Access patterns: How often will elements be accessed?
Insertion/deletion frequency: How frequently will elements be added or removed?
Sorting requirements: Does the data need to be sorted?
Memory usage: How much memory is available?
Performance needs: What is the desired performance level?


-algorithms (sorting, searching, dynamic programming)



//====================================================================================================  
//++++++++++++++++++++++++++++ 02. Array Vs ArrayList Vs LinkedList (When to Use Which) ++++++++++++++++++
//====================================================================================================== 



############# Key Differences
------------------------------------------------------------------------------------
Feature	               Array	                ArrayList	    LinkedList
------------------------------------------------------------------------------------
Size>	                Fixed	                 Dynamic	      Dynamic
implementation>    	    Array	                 Array	          Doubly linked list
Random access>	        Efficient	             Efficient	      Inefficient
Insertions/deletions>(beginning/middle)	
                        Inefficient	             Inefficient	  Efficient
Insertions/deletions(end)>	
                        Inefficient	             Efficient	       Efficient
Storage> 	       Primitive or reference types, Reference types   Reference types
-------------------------------------------------------------------------------------

############# When to Use Which 
Array: When you know the exact size of the collection beforehand and need frequent random access.
ArrayList: When you need a dynamic collection with frequent random access and infrequent insertions/deletions at the beginning or middle.
LinkedList: When you need a dynamic collection with frequent insertions/deletions at any position and infrequent random access.

######## Example
import java.util.ArrayList;
import java.util.Arrays;

public class ArrayVsArrayList{
    public static void main(String[] args) {
        // Creating an array of integers
        int[] numbers = new int[5];

        // Creating an ArrayList  of integers
        ArrayList<Integer> numbersList = new ArrayList<>();

        // Assigning values to elements
        numbers[0] = 10;
        numbers[1] = 20;
        numbers[2] = 30;
        numbers[3] = 40;
        numbers[4] = 50;

         // Adding elements to the ArrayList
         numbersList.add(10);
         numbersList.add(20);
         numbersList.add(30);
         numbersList.add(40);
         numbersList.add(50);

        // Accessing  Arrayelements
        System.out.println("The third element is: " + numbers[2]);
        // Printing the array
        System.out.println("The array elements are: " + Arrays.toString(numbers));

         // Accessing ArrayList elements
         System.out.println("The third element is: " + numbersList.get(2));

         // Printing the ArrayList
         System.out.println("The ArrayList elements are: " + numbersList);

        // Resizing the array (not possible directly)
        numbers = Arrays.copyOf(numbers, numbers.length + 1); // Manual resizing

         // Resizing the ArrayList (dynamically)
         numbersList.add(60); // Automatically resizes
    }
 
}

#######Key Differences:
Element access: Accessing elements in an array is done using an index, while accessing elements in an ArrayList is done using the get() method.
Iteration: Iterating over an array can be done using a for loop, while iterating over an ArrayList can also be done using a for-each loop.
Methods: ArrayLists provide additional methods for operations like add, remove, contains, size, etc., which are not available in arrays.

        
//=============================================================================================  
//++++++++++++ 03. HashMap Vs LinkedHashMap Vs TreeMap (When to use which)++++++++++++++++++++++++
//============================================================================================= 
HashMap, LinkedHashMap, and TreeMap are three fundamental data structures in Java's Collections framework used to store key-value pairs. 
While they share the same basic functionality, they differ significantly in their underlying implementations and performance characteristics.
        // >Key-value pairs >Unordered data >Dynamic size


########## Key Differences
-------------------------------------------------------------------------------------------------------
Feature	              HashMap	                 LinkedHashMap	                     TreeMap
--------------------------------------------------------------------------------------------------------
Implementation:	   Hash table	            Extends HashMap, doubly linked list	     Red-black tree
Order:	           No specific order	        Insertion or access order	         Sorted order
Performance:	   Generally fastest	        Slightly slower than HashMap	     Slower than HashMap for most operations, but efficient for range-based queries
Use cases:         Most general-purpose	Caches, history lists	Sorted data,         range-based queries
---------------------------------------------------------------------------------------------------------------------

######### When to use which:
HashMap: If order is not important and fast lookups are required.
LinkedHashMap: If you need to maintain insertion or access order.
TreeMap: If you need to store elements in sorted order or perform range-based queries.

######## Example
        Map <String, Integer> emps = new HashMap<>();
        emps.put("Mahadi", 3);
        emps.put("Labib", 1);
        emps.put("Mehjabin", 2);

        System.out.println(emps);
        System.out.println(emps.get(2));
        System.out.println(emps.remove(2));
        System.out.println(emps.containsKey(0));
        System.out.println(emps.containsValue("Mahadi"));


        // Iterate over the key-value pairs in the map
        for (Map.Entry<String, Integer> entry : emps.entrySet()) {
            int emp_id = entry.getValue();
            String emp_name = entry.getKey();
            System.out.println(emp_id + "-name: " + emp_name);
        }

        
        //  // Get the size of the map
         int mapSize = emps.size();
         System.out.println("Map size: " + mapSize);


//==================================================================================================== 
//+++++++++++++++++++++++ 04. HashSet Vs LinkedHashSet Vs TreeSet (When to use which) ++++++++++++++++++++
//===================================================================================================== 

HashSet, LinkedHashSet, and TreeSet are three fundamental data structures in Java's Collections framework used to store unique elements.

#############Key Differences
------------------------------------------------------------------------------------------------------
Feature	            HashSet	                LinkedHashSet	                        TreeSet
------------------------------------------------------------------------------------------------------
Implementation	    Hash table	            Extends HashSet, doubly linked list	    Red-black tree
Order	            No specific order	    Insertion order	                        Sorted order
Performance	        Generally fastest	    Slightly slower than HashSet	        Slower than HashSet for most operations, but efficient for sorted iteration and range-based queries
Use cases	        Most general-purpose	Caches, history lists	                Sorted data, range-based queries
----------------------------------------------------------------------------------------------------------

############# When to use which
HashSet: If order is not important and fast lookups are required.
LinkedHashSet: If you need to maintain insertion order.
TreeSet: If you need to store elements in sorted order or perform range-based queries.


############ Example
        Set <String> emps = new HashSet<>();
        // Set <String> emps = new LinkedHashSet<>();
        // Set <String> emps = new TreeSet<>();
        emps.add("Mahadi");
        emps.add("Labib");
        emps.add("Mehjabin");
        emps.add("Mahadi");

        // System.out.println(emps.remove(1));
        // System.out.println(emps);

        // extendent for loop
        for (String emp : emps) {
            System.out.println(emp);
        }
        
        // foreach
        emps.forEach(System.out::println);
        
        // Lambda Expression with for
        emps.forEach(e->System.out.println(e));
        
        //While loop
        Iterator<String> emp = emps.iterator();
        while (emp.hasNext()) {
            System.out.println(emp.next());
        }
    
    }
    
}

============================ 05. What is an Algorithm? ====================================

An algorithm is a step-by-step procedure for solving a problem or accomplishing a task. 
In the context of programming, algorithms are used to create efficient and effective software solutions.

Types of Algorithms in Java: 

01. Searching Algorithms
Linear Search:  Checks each element until the target is found.
Binary Search: Efficiently searches a sorted array, by dividing it in half repeatedly.

02. Sorting Algorithms
Bubble Sort: Compares adjacent elements and swaps them if they're in the wrong order. -Simple but inefficient for large datasets.
Selection Sort: Finds the minimum element in the unsorted portion and swaps it with the first element.
Insertion Sort: Shifts elements to their correct positions one at a time.
Merge Sort: Divides the array into halves, sorts them recursively, and merges them.
Quick Sort: Picks a pivot element, partitions the array around it, and recursively sorts the partitions.
Heap Sort: Builds a max heap from the array and repeatedly extracts the maximum element.

03. Graph Algorithms
Breadth-First Search (BFS): Visits all nodes at a given distance from the starting node.
Depth-First Search (DFS): Explores as far as possible along each branch before backtracking.
Dijkstra's Algorithm: Finds the shortest path between two nodes in a weighted graph.
Bellman-Ford Algorithm: Handles negative edge weights and detects negative cycles.
Floyd-Warshall Algorithm: Calculates the shortest paths between all pairs of nodes in a graph.

04. Dynamic Programming Algorithms
Fibonacci Sequence: Calculates the Fibonacci numbers efficiently using memoization.
Knapsack Problem: Finds the optimal subset of items that maximizes value within a weight constraint.
Longest Common Subsequence (LCS): Finds the longest sequence of characters that appear in the same order in two strings.

05. Other Algorithms
Greedy Algorithms: Make locally optimal choices at each step, hoping to achieve a globally optimal solution.
Divide and Conquer Algorithms: Break a problem into smaller subproblems, solve them recursively, and combine the solutions.   
Backtracking Algorithms: Explore all possible solutions, pruning branches that cannot lead to a solution.

########### Choosing the Right Algorithm
The choice of algorithm depends on various factors, including:
Problem characteristics: The nature and size of the input data.
Time and space constraints: The available computational resources.
Desired accuracy: The level of precision required in the solution.

########### Example
This example demonstrates how "Quick Sort Algorithm" works by recursively sorting the elements of an array. The partition method is used to arrange elements around a pivot.
        
        public class QuickSort {
            public static void main(String[] args) {
                int[] arr = {10, 7, 8, 9, 1, 5};
                int n = arr.length;
                quickSort(arr, 0, n - 1);
                System.out.println("Sorted array: ");
                for (int num : arr) {
                    System.out.print(num + " ");
                }
            }
        
            public static void quickSort(int[] arr, int low, int high) {
                if (low < high) {
                    int pi = partition(arr, low, high);
        
                    quickSort(arr, low, pi - 1);
                    quickSort(arr, pi + 1, high);
                }
            }
        
            public static int partition(int[] arr, int low, int high) {
                int pivot = arr[high];
                int i = (low - 1);
        
                for (int j = low; j < high; j++) {
                    if (arr[j] <= pivot) {
                        i++;
                        int temp = arr[i];
                        arr[i] = arr[j];
                        arr[j] = temp;
                    }
                }
        
                int temp = arr[i + 1];
                arr[i + 1] = arr[high];
                arr[high] = temp;
        
                return i + 1;
            }
        }




