
0.  Array Vs Collection
00. List

01. Array Vs ArrayList
02. What is  HashMap, When to use it?
03. HashSet Vs LinkedHashSet Vs TreeSet


=============== 0. Array vs Collection =======================
Collection: Group of Objects.
Array: Same type of Data

####### Key Differences
------------------------------------------------------------------------------
Feature	          Array	                        Collection
-----------------------------------------------------------------------------
Size	        Fixed	                        Dynamic
Access	        Direct using index	            Iterator or other methods
Storage	        Primitive or reference types	Reference types only
Performance	    Efficient for random access	    Varies depending on implementation
-----------------------------------------------------------------------------------

########## Example:
// Array
int[] numbers = new int[5];
numbers[0] = 10;
numbers[1] = 20;

// Collection (ArrayList)
List<String> fruits = new ArrayList<>();
fruits.add("apple");
fruits.add("banana");

========================= 00. List ================================

-List is  Java Interface
-represents an ordered collection of elements that allows duplicate values.
-extends the Collection interface inherits the basic methods like add, remove, contains, isEmpty

ArrayList: A resizable array-based implementation that provides efficient random access.
LinkedList: A doubly-linked list implementation that is efficient for insertions and deletions at the beginning or end of the list.
Vector: A synchronized, resizable array-based implementation.
Stack (Data Structure): A LIFO (Last-In-First-Out) stack implementation that extends Vector.
Queue (Data Structure): A FIFO (First-In-First-Out) queue implementation that extends AbstractCollection.

========================================================

import java.security.Key;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.xml.catalog.CatalogFeatures.Feature;

public class Collectionss {

    public static void main(String[] args) {

//====================================================================================================  
//++++++++++++++++++++++++++++ Array Vs ArrayList Vs LinkedList (When to Use Which) ++++++++++++++++++
//====================================================================================================== 



############# Key Differences
------------------------------------------------------------------------------------
Feature	               Array	                ArrayList	    LinkedList
------------------------------------------------------------------------------------
Size>	                Fixed	                 Dynamic	      Dynamic
implementation>    	    Array	                 Array	          Doubly linked list
Random access>	        Efficient	             Efficient	      Inefficient
Insertions/deletions>(beginning/middle)	
                        Inefficient	             Inefficient	  Efficient
Insertions/deletions(end)>	
                        Inefficient	             Efficient	       Efficient
Storage> 	       Primitive or reference types, Reference types   Reference types
-------------------------------------------------------------------------------------

############# When to Use Which 
Array: When you know the exact size of the collection beforehand and need frequent random access.
ArrayList: When you need a dynamic collection with frequent random access and infrequent insertions/deletions at the beginning or middle.
LinkedList: When you need a dynamic collection with frequent insertions/deletions at any position and infrequent random access.

######## Example
import java.util.ArrayList;
import java.util.Arrays;

public class ArrayVsArrayList{
    public static void main(String[] args) {
        // Creating an array of integers
        int[] numbers = new int[5];

        // Creating an ArrayList  of integers
        ArrayList<Integer> numbersList = new ArrayList<>();

        // Assigning values to elements
        numbers[0] = 10;
        numbers[1] = 20;
        numbers[2] = 30;
        numbers[3] = 40;
        numbers[4] = 50;

         // Adding elements to the ArrayList
         numbersList.add(10);
         numbersList.add(20);
         numbersList.add(30);
         numbersList.add(40);
         numbersList.add(50);

        // Accessing  Arrayelements
        System.out.println("The third element is: " + numbers[2]);
        // Printing the array
        System.out.println("The array elements are: " + Arrays.toString(numbers));

         // Accessing ArrayList elements
         System.out.println("The third element is: " + numbersList.get(2));

         // Printing the ArrayList
         System.out.println("The ArrayList elements are: " + numbersList);

        // Resizing the array (not possible directly)
        numbers = Arrays.copyOf(numbers, numbers.length + 1); // Manual resizing

         // Resizing the ArrayList (dynamically)
         numbersList.add(60); // Automatically resizes
    }



    
}

Key Differences:

Fixed size vs. dynamic size: Arrays have a fixed size determined at creation, while ArrayLists can dynamically resize as needed.
Element access: Accessing elements in an array is done using an index, while accessing elements in an ArrayList is done using the get() method.
Iteration: Iterating over an array can be done using a for loop, while iterating over an ArrayList can also be done using a for-each loop.
Methods: ArrayLists provide additional methods for operations like add, remove, contains, size, etc., which are not available in arrays.

        
//=============================================================================================  
//++++++++++++ HashMap Vs LinkedHashMap Vs TreeMap (When to use which)++++++++++++++++++++++++
//============================================================================================= 
HashMap, LinkedHashMap, and TreeMap are three fundamental data structures in Java's Collections framework used to store key-value pairs. 
While they share the same basic functionality, they differ significantly in their underlying implementations and performance characteristics.
        // >Key-value pairs >Unordered data >Dynamic size


########## Key Differences
-------------------------------------------------------------------------------------------------------
Feature	              HashMap	                 LinkedHashMap	                     TreeMap
--------------------------------------------------------------------------------------------------------
Implementation:	   Hash table	            Extends HashMap, doubly linked list	     Red-black tree
Order:	           No specific order	        Insertion or access order	         Sorted order
Performance:	   Generally fastest	        Slightly slower than HashMap	     Slower than HashMap for most operations, but efficient for range-based queries
Use cases:         Most general-purpose	Caches, history lists	Sorted data,         range-based queries
---------------------------------------------------------------------------------------------------------------------

######### When to use which:
HashMap: If order is not important and fast lookups are required.
LinkedHashMap: If you need to maintain insertion or access order.
TreeMap: If you need to store elements in sorted order or perform range-based queries.

######## Example


        Map <String, Integer> emps = new HashMap<>();
        emps.put("Mahadi", 3);
        emps.put("Labib", 1);
        emps.put("Mehjabin", 2);


        System.out.println(emps);
        System.out.println(emps.get(2));
        System.out.println(emps.remove(2));
        System.out.println(emps.containsKey(0));
        System.out.println(emps.containsValue("Mahadi"));


        // Iterate over the key-value pairs in the map
        for (Map.Entry<String, Integer> entry : emps.entrySet()) {
            int emp_id = entry.getValue();
            String emp_name = entry.getKey();
            System.out.println(emp_id + "-name: " + emp_name);
        }

        
        //  // Get the size of the map
         int mapSize = emps.size();
         System.out.println("Map size: " + mapSize);


//==================================================================================================== 
//+++++++++++++++++++++++ HashSet Vs LinkedHashSet Vs TreeSet (When to use which) ++++++++++++++++++++
//===================================================================================================== 

HashSet, LinkedHashSet, and TreeSet are three fundamental data structures in Java's Collections framework used to store unique elements.

#############Key Differences
------------------------------------------------------------------------------------------------------
Feature	            HashSet	                LinkedHashSet	                        TreeSet
------------------------------------------------------------------------------------------------------
Implementation	    Hash table	            Extends HashSet, doubly linked list	    Red-black tree
Order	            No specific order	    Insertion order	                        Sorted order
Performance	        Generally fastest	    Slightly slower than HashSet	        Slower than HashSet for most operations, but efficient for sorted iteration and range-based queries
Use cases	        Most general-purpose	Caches, history lists	                Sorted data, range-based queries
----------------------------------------------------------------------------------------------------------

############# When to use which
HashSet: If order is not important and fast lookups are required.
LinkedHashSet: If you need to maintain insertion order.
TreeSet: If you need to store elements in sorted order or perform range-based queries.


############ Example
        Set <String> emps = new HashSet<>();
        // Set <String> emps = new LinkedHashSet<>();
        // Set <String> emps = new TreeSet<>();
        emps.add("Mahadi");
        emps.add("Labib");
        emps.add("Mehjabin");
        emps.add("Mahadi");

        // System.out.println(emps.remove(1));
        // System.out.println(emps);

        // extendent for loop
        for (String emp : emps) {
            System.out.println(emp);
        }
        
        // foreach
        emps.forEach(System.out::println);
        
        // Lambda Expression with for
        emps.forEach(e->System.out.println(e));
        
        //While loop
        Iterator<String> emp = emps.iterator();
        while (emp.hasNext()) {
            System.out.println(emp.next());
        }
    
    }
    
}


 ==================key difference ===================
 Key Differences:

 Feature	    |   HashSet	        |       LinkedHashSet	    |   TreeSet
 ------------------------------------------------------------------------------
 Order	    |   Unordered	    |   Insertion order	        |  Natural or custom order
 Performance  |	Fastest	        |   Slightly slower	        |  Slowest
 Use cases	| General-purpose,
                 fast lookup      |     Insertion order, 
                                         fast lookup	        | Sorted order, range-based operations







    }


