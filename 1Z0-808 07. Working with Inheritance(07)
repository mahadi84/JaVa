

=======================07. Working with Inheritance(07): ==================7-Aug-24(Wednesday)

###### Method Overriding Rules:
  01. Same Signature: The overriding method in the subclass must have the same (name and parameter) signature (same/covariant and not narrower return type)as the overridden method in the superclass. 
                For example, if the superclass method returns a Number, the overriding method cannot return an Integer.
  02. Accessibility(Public..): The overriding method in the subclass must have the same or a more/wider accessible modifier than the overridden method in the superclass. 
  03. Not More Specific: The overriding method in the subclass cannot have a more specific parameter type than the overridden method in the superclass. 
                For example, if the superclass method takes an Object parameter, the overriding method cannot take an Integer parameter.
  04. Exception: The overriding method in the subclass can have a Same/Narrower and Not New Exception
  05. Not Static: If a method in the subclass has the same signature as a static method in the superclass, it will not override the superclass method but will hide it.
  06. Not Final: If a method in the superclass is declared final, it cannot be overridden in subclasses.

##### Variable Overriding Key Points:
  01. Overriding: Method overriding applies only to methods, NOT variables.
  02. Inheritance: Subclasses inherit variables from their superclass.
  03. Shared Values: A variable declared in the parent class is shared by all objects of the parent and child classes.
  04. Shadowing: While variables cannot be overridden, they can be shadowed. 
      If a subclass declares a variable with the same name as a parent class variable, the subclass variable hides the parent class variable within the subclass's scope.

================== Interface ========================
##### Interface's Variable
  - Interface variables are always public, static, and final.
  - They are typically used to define constants.
  - They can be accessed using the interface name, e.g., `Shape.PI`.
  - They cannot be overridden by implementing classes.
  
  **Additional considerations:**
  -It is generally considered good practice to use uppercase letters for interface variable names to indicate that they are constants.

##### Interface's Methods Type and Use
  1. Abstract Methods
     - These are the most common type of interface methods.
     - They have a method signature (name, return type, and parameters) but no implementation(without Body).
     - Can not directly instantiate, Classes that implement the interface must provide a concrete implementation for these methods.
  2. Default Methods:
     - Implementing classes can either use the default implementation or override it with their own.
     - This is useful for adding new functionality to existing interfaces without breaking compatibility with existing implementations.
  3. Static Methods:
    - Also introduced in Java 8, static methods belong to the interface itself, NOT to instances of classes that implement it.
     - They are called directly on the interface name, like static methods in classes.
     - They are useful for providing utility methods related to the interface's concept.
      Example:
              interface Drawable {    
                      void draw();
                      static void drawShapes(Drawable[] shapes) {
                          for (Drawable shape : shapes) {
                              shape.draw();
                          }
                      }
              }
  
  **Key points to remember:**
  - Interface methods are always public. 
  - Interface methods cannot have a body (unless they are default or static methods).
  - Default and static methods can be overridden by implementing classes.





-----------------



01. Describe inheritance and its benefits
02. Develop code that makes use of polymorphism; 
03. develop code that overrides methods;  
04. differentiate between the type of a reference and the type of an object
05. Determine when (Object) casting is necessary
06. Use super and this to access objects and constructors
07. Use abstract classes and interfaces

####################################################################################
           ---------01. Describe inheritance and its benefits--------
####################################################################################

###### What is Inheritance? #####
###### Why Inheritance #####
            1. Code Reusability:
            2. Method Overriding:
            3. Hierarchical Classification:
            4. Ease of Maintenance:
            5. Polymorphism:

###### What is Inheritance? #####
Inheritance is a mechanism in Java that allows one class (the subclass or child class) to inherit fields and methods from another class (the superclass or parent class). 
This relationship is expressed using the `extends` keyword.

###### Basic Syntax #####
To define a subclass, use the `extends` keyword to inherit from a superclass.

public class Superclass {
    public void display() {
        System.out.println("This is the superclass.");
    }
}

public class Subclass extends Superclass {
    public void show() {
        System.out.println("This is the subclass.");
    }
}


###### Why Inheritance #####
- Inheritance allows a subclass to inherit fields and methods from a superclass, promoting code reuse and logical class hierarchies.
- Code Reusability reduces redundancy and improves maintainability.
- Method Overriding enables subclasses to provide specific implementations of methods.
- Hierarchical Classification organizes classes in a hierarchy, promoting clear and logical class relationships.
- Ease of Maintenance allows changes in the superclass to be automatically reflected in subclasses.
- Polymorphism supports using superclass references for subclass objects, enabling flexible and dynamic method calls.

1. Code Reusability:
   - Inheritance promotes code reuse by allowing a subclass to use the methods and fields of its superclass. This reduces redundancy and improves maintainability.

   Example:
   public class Animal {
       public void eat() {
           System.out.println("This animal eats food.");
       }
   }

   public class Dog extends Animal {
       public void bark() {
           System.out.println("The dog barks.");
       }
   }



2. Method Overriding:
   - Subclasses can provide specific implementations for methods that are already defined in their superclass. This is known as method overriding.
   Example:
   public class Animal {
       public void makeSound() {
           System.out.println("Some sound");
       }
   }

   public class Dog extends Animal {
       @Override
       public void makeSound() {
           System.out.println("Bark");
       }
   }

   public class Test {
       public static void main(String[] args) {
           Animal myDog = new Dog();
           myDog.makeSound(); // Output: Bark
       }
   }


3. Hierarchical Classification:
   - Inheritance supports a hierarchical class structure. A superclass can have multiple subclasses, creating a hierarchy where shared behavior is defined in the superclass, and specific behavior is added in subclasses.
   Example:
   public class Animal {
       public void eat() {
           System.out.println("Animal eats.");
       }
   }

   public class Mammal extends Animal {
       public void breathe() {
           System.out.println("Mammal breathes.");
       }
   }

   public class Bird extends Animal {
       public void fly() {
           System.out.println("Bird flies.");
       }
   }


4. Ease of Maintenance:
   - Changes made in the superclass automatically propagate to subclasses, making maintenance easier. If a change needs to be made to common functionality, it can be done in the superclass, affecting all subclasses.
   Example:
   public class Vehicle {
       public void start() {
           System.out.println("Vehicle is starting.");
       }
   }

   public class Car extends Vehicle {
       // Inherits start method from Vehicle
   }

   public class Bike extends Vehicle {
       // Inherits start method from Vehicle
   }
   If you modify the `start` method in `Vehicle`, the change is reflected in both `Car` and `Bike` without needing to change their individual implementations.

5. Polymorphism:
   - Inheritance supports polymorphism, where a superclass reference can be used to refer to a subclass object. This allows for dynamic method dispatch and enables code that can work with objects of different subclasses in a uniform way.

   Example:
   public class Animal {
       public void makeSound() {
           System.out.println("Animal sound");
       }
   }

   public class Cat extends Animal {
       @Override
       public void makeSound() {
           System.out.println("Meow");
       }
   }

   public class Test {
       public static void main(String[] args) {
           Animal myAnimal = new Cat(); // Polymorphism
           myAnimal.makeSound(); // Output: Meow
       }
   }
Here, `myAnimal` is of type `Animal` but refers to a `Cat` object. The overridden `makeSound` method in `Cat` is called.





###########################################################################
       ------02. Develop code that makes use of Polymorphism  --------
###########################################################################

###### What is Polymorphism? 
###### 1. Compile-Time Polymorphism (Method Overloading) 
###### 2. Runtime Polymorphism (Method Overriding) 
###### Why Polymorphism?


###### What is Polymorphism? ######
Polymorphism allows objects of different classes to be treated through a common interface, typically via a common superclass or interface. It comes in two main forms:

1. Compile-Time Polymorphism (Method Overloading): 
   - Occurs when multiple methods have the same name but different parameter lists within the same class or subclass.

2. Runtime Polymorphism (Method Overriding):
   - Occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.

###### 1. Compile-Time Polymorphism (Method Overloading) ######

Definition:
Method overloading allows multiple methods in the same class to have the same name but different parameters (different type, number, or both).

Example:
public class OverloadExample {
    // Method with one parameter
    public void display(int a) {
        System.out.println("Integer: " + a);
    }

    // Overloaded method with two parameters
    public void display(String a, int b) {
        System.out.println("String: " + a + ", Integer: " + b);
    }

    public static void main(String[] args) {
        OverloadExample obj = new OverloadExample();
        obj.display(10); // Calls method with one int parameter
        obj.display("Hello", 20); // Calls method with String and int parameters
    }
}

Explanation:
- The `display` method is overloaded with different parameter lists.
- The appropriate method is chosen based on the arguments passed during the method call.

###### 2. Runtime Polymorphism (Method Overriding) ######
Definition:
Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass. The method in the subclass should have the same name, return type, and parameters as the method in the superclass.

Example:
// Superclass
public class Animal {
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

// Subclass
public class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }
}

// Subclass
public class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Cat meows");
    }
}

// Test class
public class TestPolymorphism {
    public static void main(String[] args) {
        Animal myAnimal;

        // Reference of type Animal but object of type Dog
        myAnimal = new Dog();
        myAnimal.makeSound(); // Output: Dog barks

        // Reference of type Animal but object of type Cat
        myAnimal = new Cat();
        myAnimal.makeSound(); // Output: Cat meows
    }
}

Explanation:
- `myAnimal` is a reference of type `Animal` but can point to an object of `Dog` or `Cat`.
- At runtime, the `makeSound` method of the actual object type (`Dog` or `Cat`) is called, not the type of the reference.

###### Why Polymorphism ######
1. Flexibility:
   - Polymorphism allows you to write more flexible and reusable code. You can use a single interface or superclass reference to work with objects of different subclasses.

2. Maintainability:
   - Changes in method implementations in the subclass do not affect the code that uses the superclass reference. This improves maintainability and code organization.

3. Code Reusability:
   - Common operations can be defined in the superclass or interface, and subclasses can provide specific implementations, promoting reuse of common code.

4. Dynamic Method Binding:
   - At runtime, the Java Virtual Machine (JVM) determines which method implementation to invoke based on the actual object type. This dynamic method binding is a powerful feature of polymorphism.


#############################################################################
       ------03. develop code that overrides methods;  --------
#############################################################################

###### What is Method Overriding? 
###### Rules for Method Overriding (
                1.Same Method Signature, 
                2.Access Modifier, 
                3.Return Type, Exceptions 
                5.`final`, `static`, and `private` Methods
                )


###### What is Method Overriding? ######
Method Overriding occurs when a subclass provides a specific implementation for a method that is already declared in its superclass. 
The overriding method must have the same name, return type, and parameters as the method in the superclass.

###### Rules for Method Overriding ######
1. Same Method Signature:
   - The overriding method must have the same name, return type, and parameter list as the method in the superclass.

2. Access Modifier:
   - The overriding method in the subclass must have the same or less restrictive access modifier than the method in the superclass. For example, if the superclass method is `protected`, the subclass method can be `protected` or `public`.

3. Return Type:
   - The return type of the overriding method must be the same as or a subtype of the return type in the superclass method (covariant return type).

4. Exceptions:
   - The overriding method can only throw exceptions that are the same or subclasses of the exceptions thrown by the superclass method. It cannot throw new or broader exceptions.

5. `final`, `static`, and `private` Methods:
   - `final` methods cannot be overridden.
   - `static` methods are not subject to overriding. They can be re-declared in subclasses, but this is known as method hiding, not overriding.
   - `private` methods are not visible to subclasses and thus cannot be overridden.

###### Example of Method Overriding ######
Here’s a step-by-step example to illustrate method overriding:

// Superclass
public class Animal {
    // Method that will be overridden
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

// Subclass
public class Dog extends Animal {
    // Overriding the makeSound method
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }
}

// Another subclass
public class Cat extends Animal {
    // Overriding the makeSound method
    @Override
    public void makeSound() {
        System.out.println("Cat meows");
    }
}

// Test class
public class TestOverriding {
    public static void main(String[] args) {
        Animal myAnimal;

        // Reference of type Animal but object of type Dog
        myAnimal = new Dog();
        myAnimal.makeSound(); // Output: Dog barks

        // Reference of type Animal but object of type Cat
        myAnimal = new Cat();
        myAnimal.makeSound(); // Output: Cat meows
    }
}



#################################################################################################
    ------04. differentiate between the type of a reference and the type of an object--------
#################################################################################################

######## Key Differences between the type of a reference and the type of an object


###### Key Differences ######
----------------------------------------------------------------------------------------------------------------------------------------
Feature      |	Reference Types                         |	Object Types
----------------------------------------------------------------------------------------------------------------------------------------
Declaration  |Declared using class names or primitive wrapper class names.    |	Declared using the new keyword with a class name.
Relationship |Reference types point to object types.    | Object types are the actual entities being referenced.
Definition   |Used to refer to objects in memory.       | Instances of classes, representing real-world entities or concepts.
Storage      |Store memory addresses of objects.        | Occupy memory space on the heap.
Equality     |Compared using == operator (checks if references are equal).    |	Compared using equals() method (checks if objects are equal based on their content).
Null         |Can be assigned null value.               | Cannot be assigned null value (but can be null references).
Examples     |String, Integer, MyCustomClass            | new String("hello"), new Integer(10), new MyClass()
----------------------------------------------------------------------------------------------------------------------------------------

###### Examples to Illustrate the Difference ######
Example 1: Reference Type vs. Object Type

public class Animal {
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

public class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }

    public void wagTail() {
        System.out.println("Dog wags its tail");
    }
}

public class Test {
    public static void main(String[] args) {
        Animal myAnimal; // Reference type is Animal
        myAnimal = new Dog(); // Object type is Dog

        myAnimal.makeSound(); // Output: Dog barks
        // myAnimal.wagTail(); // Compile-time error: wagTail() is not a method of Animal

        // You cannot call wagTail() on myAnimal because the reference type is Animal.
    }
}

Explanation:
- `myAnimal` is a reference of type `Animal`, so it can only call methods defined in `Animal` or overridden in `Dog`.
- The actual object created is of type `Dog`. Thus, the `makeSound()` method of `Dog` is called, demonstrating runtime polymorphism.
- The method `wagTail()` is specific to `Dog` and is not accessible through an `Animal` reference.

Example 2: Upcasting and Downcasting
      **See details in next question



###########################################################################
       ------05. Determine when casting is necessary--------
###########################################################################

###### Object Casting
###### Types of Object Casting (1.Upcasting and 2.Downcasting)
###### When Casting is Necessary
                1. To Access Subclass-Specific Methods or Fields:
                2. When Dealing with Collections:
                3. When Working with Polymorphism:
                4. To Handle Type Errors:
###### Important Considerations
                1. `instanceof` Operator:
                2. `ClassCastException`:


########## Object Casting in Java  #########
-Converting an object of one type into another. 
-Primarily used in the context of inheritance and polymorphism. 
***Unlike primitive casting, object casting requires more careful consideration due to the potential for runtime errors.   

##########Types of Object Casting(Upcasting and Downcasting) #########
1. Upcasting (Implicit):
        ***Upcasting is not typically required to be explicitly written since it is automatically handled by the Java compiler. 
        -Converting a subclass object to a superclass reference.   
        -Always safe as a subclass is-a superclass.   
        -No explicit cast operator required. 
             
2. Downcasting (Explicit):
        -Converting a superclass reference to a subclass object.   
        -Requires an explicit cast operator (subclass_type).
        -Not always safe as the object might not actually be an instance of the subclass.
        -Use "instanceof" operator to check the object's type before downcasting.

########Example:  Upcasting and Downcasting #################
                      class A{
                                 public void sound() {
                                    System.out.println(" A: Animal Sound");
                                 }
                                     }
                      class B extends A {
                                    @Override
                                       public void sound() {
                                          System.out.println("B: Cat meows");
                                       }
                                       public void eat() {
                                          System.out.println("B: Cat eat meat.");
                                       }
                                 }
                                 
                                 
                       public class UpDown{
                               public static void main(String[] args) {
                                  A obj = (A) new B(); // Upcasting: Cat object assigned to Animal reference
                                  // A obj = new B(); // UP Casting(Class B2A), Automatically 
                                  obj.sound();
                      
                                  if (obj instanceof A){
                                     B objB = (B) obj; // Downcasting(Class A2B):
                                     objB.eat(); // Output: Cat eat meat
                                  }
                               }
                                 }


           OUTPUT:
           B: Cat meows
           B: Cat eat meat
                
                Explanation:
                - `obj` is a reference of type `A`, but it points to a `B` object.
                - To access `eat()` method, you must downcast `obj` to `B`.
                - Downcasting is necessary because `sound()` is not a method of `A`.

###### When Casting is Necessary ######
1. To Access Subclass-Specific Methods or Fields:
   - When you have a reference of a superclass type and you need to call methods or access fields that are specific to a subclass, you must use downcasting.

   Example:
        Animal animal = new Dog(); // Upcasting
        if (animal instanceof Dog) {
            Dog dog = (Dog) animal; // Downcasting
            dog.bark(); // Accessing subclass-specific method
        }

2. When Dealing with Collections:
   -Collections such as `ArrayList` may hold objects of different types, and 
   -Often used when retrieving objects from such collections to ensure type safety.

   Example:
           ArrayList<Animal> animals = new ArrayList<>();
           animals.add(new Dog());
           animals.add(new Cat());
        
           for (Animal animal : animals) {
               if (animal instanceof Dog) {
                   Dog dog = (Dog) animal; // Downcasting
                   dog.bark(); // Perform dog-specific operations
               }
           }

3. When Working with Polymorphism:
   -When using polymorphism, you may need to downcast if you want to invoke methods specific to a subclass that are not defined in the superclass.

   Example:
   Animal animal = new Cat();
   ((Cat) animal).meow(); // Direct downcasting to call Cat's specific method

4. To Handle Type Errors:
   - Casting can be used to handle type errors where the actual object type differs from the declared type. This is particularly useful in cases where you have mixed object types in a single reference or collection.

   Example:
   Object obj = "String example"; // obj is of type Object
   String str = (String) obj; // Downcasting to String

###### Important Considerations ######

1. `instanceof` Operator:
   - Use the `instanceof` operator to check if an object is an instance of a particular class or subclass before downcasting. This helps to avoid `ClassCastException`.

   Example:
   if (animal instanceof Dog) {
       Dog dog = (Dog) animal; // Safe downcasting
   }

2. `ClassCastException`:
   - Be cautious of `ClassCastException`, which occurs at runtime if the object being cast is not actually an instance of the target type. Always ensure type compatibility using `instanceof`.

   Example:
   try {
       Animal animal = new Animal();
       Dog dog = (Dog) animal; // Will throw ClassCastException
   } catch (ClassCastException e) {
       System.out.println("Cast failed: " + e.getMessage());
   }


       

#####################################################################################
       ------06. Use super and this to access objects and constructors--------
#####################################################################################

####### 1. Why and how to Use `super`
####### Accessing Superclass Methods and Constructors
####### 2. Using `this`
####### Accessing Instance Variables and Methods
####### Calling Other Constructors (Constructor Chaining)


###### 1. Why and how to Use `super` ######
The `super` keyword refers to the superclass of the current object. 
It is used to access superclass methods and constructors.

Example: - `super`:
  - Use `super.methodName()` to call a method from the superclass. //Purpose: To call a method in the superclass that has been overridden in the subclass.
  - Use `super(arguments)` to invoke a constructor from the superclass.

####### Accessing Superclass Methods ######

- Syntax: `super.methodName()`

Example:
public class Animal {
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

public class Dog extends Animal {
    @Override
    public void makeSound() {
        super.makeSound(); // Calls the superclass method
        System.out.println("Dog barks");
    }
}

public class Test {
    public static void main(String[] args) {
        Dog myDog = new Dog();
        myDog.makeSound();
        // Output:
        // Animal makes a sound
        // Dog barks
    }
}

####### Accessing Superclass Constructors ######
- Purpose: To call a constructor in the superclass from the subclass constructor.
- Syntax: `super(arguments)`

Example:
public class Animal {
    public Animal(String name) {
        System.out.println("Animal name: " + name);
    }
}

public class Dog extends Animal {
    public Dog(String name) {
        super(name); // Calls the superclass constructor
        System.out.println("Dog created with name: " + name);
    }
}

public class Test {
    public static void main(String[] args) {
        Dog myDog = new Dog("Buddy");
        // Output:
        // Animal name: Buddy
        // Dog created with name: Buddy
    }
}

Explanation:
- `super(name)` calls the `Animal` class constructor that takes a `String` argument. This ensures the superclass is properly initialized before the subclass initialization continues.

###### 2. Using `this` ######
-The `this` keyword refers to the current instance of the class. 
-It is used to access instance variables and methods of the current object, and to call other constructors in the same class.
           - `this`:
             - Use `this.variableName` to refer to instance variables and distinguish them from method parameters.
             - Use `this.methodName()` to call other methods within the same class.
             - Use `this(arguments)` to call another constructor in the same class (constructor chaining).

####### Accessing Instance Variables and Methods ######
- Purpose: To differentiate between instance variables and parameters when they have the same name, and to call other methods in the current class.
- Syntax: `this.variableName` and `this.methodName()`

Example:
public class Person {
    private String name;

    public Person(String name) {
        this.name = name; // Differentiates between instance variable and parameter
    }

    public void greet() {
        System.out.println("Hello, my name is " + this.name);
    }
}

public class Test {
    public static void main(String[] args) {
        Person person = new Person("Alice");
        person.greet();
        // Output: Hello, my name is Alice
    }
}

Explanation:
- `this.name` refers to the instance variable `name` of the `Person` class, distinguishing it from the parameter `name`.

####### Calling Other Constructors (Constructor Chaining) ######
- Purpose: To call one constructor from another constructor in the same class, promoting code reuse.
- Syntax: `this(arguments)`

Example:
public class Book {
    private String title;
    private String author;

    public Book() {
        this("Unknown Title", "Unknown Author"); // Calls another constructor
    }

    public Book(String title) {
        this(title, "Unknown Author"); // Calls another constructor
    }

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    public void display() {
        System.out.println("Title: " + title + ", Author: " + author);
    }
}

public class Test {
    public static void main(String[] args) {
        Book book1 = new Book();
        Book book2 = new Book("1984");
        Book book3 = new Book("Brave New World", "Aldous Huxley");

        book1.display(); // Output: Title: Unknown Title, Author: Unknown Author
        book2.display(); // Output: Title: 1984, Author: Unknown Author
        book3.display(); // Output: Title: Brave New World, Author: Aldous Huxley
    }
}

Explanation:
- `this("Unknown Title", "Unknown Author")` in the no-argument constructor calls the two-argument constructor.
- `this(title, "Unknown Author")` in the single-argument constructor calls the two-argument constructor, ensuring all initialization is centralized.


  
#####################################################################################
       ------07. Use abstract classes and interfaces--------
#####################################################################################

######### Differences between ABSTRACT Class and INTERFACE
############## When to use Abstract class  or Interface?

######### Differences between ABSTRACT Class and INTERFACE
------------------------------------------------------------------------------------------------------------------------------
Feature          |   Abstract Class	                               |    Interface
-------------------------------------------------------------------------------------------------------------------------------
Definition(Why)  | Want a partial implementation of a class                | Blueprints for classes (achieve polymorphism) Ideal for unrelated classes
                   and force subclasses to implement the remaining parts.  | Contracts: Interfaces specify a set of methods that a class must implement,
Methods          |  Both Abstract and concrete	        | Only abstract (before Java 8), default and static from Java 8
Inheritance      |  Single inheritance                         | Multiple inheritance
Variables        |  All types (final, non-final, static, non-static) | Only static final
Constructors     |  Yes	                              | No
Access Modifiers |  Public, protected, private, default      | Public (implicitly)
Can Instantiate  |  NO                                       | Yes
Extension        |  Extends(Class to Class) Implemnet(C2I)   | Implemnet(I2C), Extends(I2I) 
Declare(Keyword) | Abstract(public abstract class Animal {}) | Interface (public interface Animal {})
--------------------------------------------------------------------------------------------------------------------------------

###### Abstract Classes ######
####### Example
// Abstract class
public abstract class Animal {
    // Abstract method (does not have a body)
    public abstract void makeSound();

    // Concrete method
    public void sleep() {
        System.out.println("This animal sleeps");
    }
}

// Concrete subclass
public class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }
}

// Test class
public class Test {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        myDog.makeSound(); // Output: Dog barks
        myDog.sleep(); // Output: This animal sleeps
    }
}

Explanation:
- `Animal` is an abstract class with an abstract method `makeSound()` and a concrete method `sleep()`.
- `Dog` extends `Animal` and provides an implementation for the `makeSound()` method.
- `Dog` can be instantiated and used to call both the overridden method and the concrete method from the abstract class.


################################## Interfaces #########################################
####### Example 
        // Interface
        public interface Animal {
            void makeSound();
        
            // Default method
            default void eat() {
                System.out.println("This animal eats");
            }
        }
        
        // Concrete class implementing the interface
        public class Dog implements Animal {
            @Override
            public void makeSound() {
                System.out.println("Dog barks");
            }
        }
        
        // Test class
        public class Test {
            public static void main(String[] args) {
                Animal myDog = new Dog();
                myDog.makeSound(); // Output: Dog barks
                myDog.eat(); // Output: This animal eats
            }
        }

Explanation:
- `Animal` is an interface with an abstract method `makeSound()` and a default method `eat()`.
- `Dog` implements the `Animal` interface and provides an implementation for the `makeSound()` method.
- The `eat()` method, being a default method, is available to `Dog` without needing an implementation, but it can be overridden if needed.


############## When to use Abstract class  or Interface?  #####################
01. Use an Abstract Class When:
    -I want to provide a partial implementation of a class.
    -I need to share code among related classes.
    -I want to define a clear inheritance hierarchy.
    -I need to use non-static or non-final fields.
    -I need to define constructors.
            Example: 
            abstract class Shape {
                abstract double area();
                
                void printArea() {
                    System.out.println("Area: " + area());
                }
            }

02. Use an Interface When:
    -I want to define a contract that unrelated classes can implement.
    -I need to support multiple inheritance of type.
    -I want to achieve maximum flexibility and decoupling.
    -I want to define constants (static final fields).
            Example:
            interface Drawable {
                void draw();
            }

##################### Consider the following factors when deciding between an abstract class and an interface: #####################
    01. Is there a strong "is-a" relationship between the classes? If so, an abstract class might be suitable.
    02. Do I need to provide a default implementation for some methods? If so, an abstract class is better.
    03. Do I need to support multiple inheritance of type? If so, an interface is the only option.
    04. How much flexibility do I need? Interfaces generally offer more flexibility.
    05. Remember: There's no strict rule, and often, a combination of both can be used effectively.



-
