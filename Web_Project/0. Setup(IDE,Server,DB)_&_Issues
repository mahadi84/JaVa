
Date: 28 January 2025


----------------Download:--------------
01. eclipse .exe version
02. Apache Tomcat server
03. MySQL Workbench

-----------------Install:---------------------
>Eclipse >Run Setup
>Select "Project Save Destination" Folder

Connect Server:
>Eclipse with "Apache Tomcat Server"
    -Click on "Server" 
    -Select "Apache" and Select "Latest Tomcat server version" 
    -Next Browse the "Tomcat server **extracted file that I've already placed into C:Program File's folder"

--------------Create a Web Project:-------------------
Step:01:
File>New>Dynamic Web Project>Name the Project> Next...
Step:02:
Right Click on the project>Configure>Convert to Maven Project>Finish

***If POP-UP Error: Selection is not within a valid module
step 1: right click on your project
Step 2: Go to properties
Step 3: search project Facets click on that then
step 4: you can see Dynamic Web Module 6.0 ---> change it to 5.0 Then your problem will resolved


------------------------------------------------------------------------------------------------------------------- 
                 add these <dependencies> before <project> tag into pom.xml 
        that will download all dependencies into Project "Java Resources>Libraries>Maven Dependencies" Folder
--------------------------------------------------------------------------------------------------------------------

 <dependencies>
      <!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
    <dependency>
        <groupId>com.mysql</groupId>
        <artifactId>mysql-connector-j</artifactId>
        <version>9.2.0</version>
    </dependency>
    
      <!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
    <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>6.1.0</version>
        <scope>provided</scope>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/jakarta.servlet.jsp.jstl/jakarta.servlet.jsp.jstl-api -->
    <dependency>
        <groupId>jakarta.servlet.jsp.jstl</groupId>
        <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
        <version>3.0.2</version>
    </dependency>
    
    <!-- https://mvnrepository.com/artifact/org.glassfish.web/jakarta.servlet.jsp.jstl -->
    <dependency>
        <groupId>org.glassfish.web</groupId>
        <artifactId>jakarta.servlet.jsp.jstl</artifactId>
        <version>3.0.1</version>
    </dependency>
</dependencies>


------------------------ How to check whether the above dependencies are downloaded ------------------
Build Path: I can see the dependencies in the Java Build Path. 
Right-click on your project -> Build Path -> Configure Build Path. 
Go to the "Libraries" tab. You'll see "Maven Dependencies" listed there.  
**This shows the dependencies, not the files directly.

----------------------- java dynamic project vs mavin project? ---------------------------------------
How They Relate:
    -A Java dynamic web project can be managed by Maven.   
    -In modern Java web development, it's very common to use both together.
    -You would create a dynamic web project and then use Maven to manage its dependencies and build process.   
    -Maven helps to standardize the build process of the dynamic web project.   
    -In newer versions of eclipse, when creating a Dynamic web project, it is very common to create that project as a maven project.

In essence:
    -The dynamic web project provides the structure for your web application.
    -Maven provides the tools to manage and build that application.

------------------------------servlet vs class in java dynamic project?-----------------

Purpose:
General Java classes: General-purpose code.
Servlets: Specifically for handling web requests and responses.   

Lifecycle:
General Java classes: Standard object lifecycle.
Servlets: Servlet container-managed lifecycle.   

Web Interaction:
General Java classes: No inherent web interaction.
Servlets: Designed for web interaction (HTTP).   

Extending:
Servlets are java classes that extend the javax.servlet.http.HttpServlet class.

In simpler terms:
Think of a regular Java class as a tool in your toolbox.
A servlet is a specialized tool designed specifically for working with web requests.   
Therefore, while a servlet is a Java class, it has a specialized role and behavior within a Java dynamic web project.

-------------------------what are dependency in java dynamic project? -------------------
"Dependencies" refer to external libraries or other pieces of code that your project relies on to function correctly.
These dependencies provide pre-built functionality that you can use in your own code, saving you from having to write everything from scratch.

External Libraries: These are collections of pre-written Java code packaged in JAR (Java Archive) files.   
They provide functionalities like:
    -Database connectivity (e.g., JDBC drivers).
    -Web frameworks (e.g., Spring, Struts).
    -Utility functions (e.g., Apache Commons).   
    -JSON processing (e.g., Jackson, Gson).

   



========================== Issues =======================================

Issue_01: While run the code it shows beow error:
NOTEPAD
"The filename, directory name or volume label syntax is incorrect"
    Solution:
    change browser setting from eclipse:
    Window->Web Browser-> Now select your browser


Issue_02: " ServletException cannot be resolved to a type
            HttpServletResponse cannot be resolved to a type
            HttpServletRequest cannot be resolved to a type
          " in Servlet.java file
Solution:
    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServlet;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;


Issue_02: "Server Tomcat v11.0 Server at localhost failed to start."
Solution: Remove unused Servlet info from web.xml and clean the project(Project>Clean).









-
