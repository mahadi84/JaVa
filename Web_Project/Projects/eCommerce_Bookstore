Date: 28-March-2025


I want to design an advanced Java e-commerce website,  aiming for a robust and well-structured application suitable for Eclipse 2024,
With the following logic:

"
-Homepage contains a paragraph of text
-Admin panel to add and upload products with images, price per quantity, total quantity, and publisher name. It will check all the orders as a list with a search option with order ID and show order details on click
-Admins can only see the message sent through the Contact Us page.

-The shopping cart page contains 
Functional Shopping Cart: 6 books as products (image, title, price, quantity). The cart page should display selected items, quantities, prices, and provide options for updating or removing items using jQuery.
-Server-side sessions or a database linked to user accounts are recommended for reliable order processing, especially if users leave and return.
-involves jQuery to dynamically adjust the cart display and potentially local storage or server-side logic to persist the cart data.
-Cart will be cleared once the order is successfully placed. 
-Quantity will be minus once the product is sold. If the quantity is empty product can not be selected.
-The user will register with name, email, and phone, and a login is required to complete the order
-After successful purchase/order payment amount will be stored in the table. Payment gateway is not recommended now, I will implement it later

-visually represent the "add to wishlist" functionality (using a font icon like Font Awesome or Bootstrap Icons, or a custom image) and how the jQuery will target and update its state when a user clicks it.
-also, A server-side wishlist across devices and user accounts functionalities with features like products from the wishlist can be removed, 
"



Create: SQL for Database and Table with CSRF protection, Database Connection Class, Models with separation  ----------------------model.(put model name here)--------------- and no gap in constructor, setter, and getter
Create: All necessary HttpServlets with CSRF protection with package servlet in a different file with servlet name title and use the try block to close the database connection automatically.
Create: All necessary DAOs with CSRF protection in a different file
Create: All necessary Frontend UI as Bootstrap 5, Jquery and Add CSRF protection with bootstrap file name.



---------------------------------What I have learned-----------------------------------------

---------------------------------------------------------------------------------------------






====================== File Structure ==========================
├── yourbookstore/
│   │   │   │   ├── dao/
│   │   │   │   │   ├── BookDAO.java
│   │   │   │   │   ├── CartItemDAO.java
│   │   │   │   │   ├── ContactMessageDAO.java
│   │   │   │   │   ├── OrderDAO.java
│   │   │   │   │   ├── OrderDetailDAO.java
│   │   │   │   │   ├── UserDAO.java
│   │   │   │   │   ├── WishlistItemDAO.java
│   │   │   │   ├── model/
│   │   │   │   │   ├── Book.java
│   │   │   │   │   ├── CartItem.java
│   │   │   │   │   ├── ContactMessage.java
│   │   │   │   │   ├── Order.java
│   │   │   │   │   ├── OrderDetail.java
│   │   │   │   │   ├── User.java
│   │   │   │   │   ├── WishlistItem.java
│   │   │   │   ├── servlet/
│   │   │   │   │   ├── AdminContactServlet.java
│   │   │   │   │   ├── AdminOrderServlet.java
│   │   │   │   │   ├── AdminProductServlet.java
│   │   │   │   │   ├── CartServlet.java
│   │   │   │   │   ├── ContactUsServlet.java
│   │   │   │   │   ├── HomeServlet.java
│   │   │   │   │   ├── LoginServlet.java
│   │   │   │   │   ├── LogoutServlet.java
│   │   │   │   │   ├── OrderServlet.java
│   │   │   │   │   ├── RegisterServlet.java
│   │   │   │   │   ├── WishlistServlet.java
│   │   │   │   ├── util/
│   │   │   │   │   ├── DatabaseConnection.java
│   │   ├── resources/
│   │   │   ├── logback.xml 
│   │   ├── webapp/
│   │   │   ├── css/
│   │   │   │   ├── style.css
│   │   │   ├── images/
│   │   │   │   ├── book1.jpg
│   │   │   │   ├── book2.jpg
│   │   │   │   ├── book3.jpg
│   │   │   │   ├── book1_thumb.jpg
│   │   │   │   ├── book2_thumb.jpg
│   │   │   │   ├── book3_thumb.jpg 
│   │   │   ├── js/
│   │   │   │   ├── script.js
│   │   │   ├── WEB-INF/
│   │   │   │   ├── web.xml
│   │   │   ├── 
│   │   │   │   ├── head.jsp
│   │   │   │   ├── navbar.jsp
│   │   │   │   ├── home.jsp
│   │   │   │   ├── register.jsp
│   │   │   │   ├── login.jsp
│   │   │   │   ├── contact.jsp
│   │   │   │   ├── cart.jsp
│   │   │   │   ├── wishlist.jsp
│   │   │   │   ├── order-success.jsp
│   │   │   │   ├── admin/
│   │   │   │   │   ├── admin-dashboard.jsp
│   │   │   │   │   ├── admin-add-product.jsp
│   │   │   │   │   ├── admin-list-orders.jsp
│   │   │   │   │   ├── admin-order-details.jsp
│   │   │   │   │   ├── admin-list-contacts.jsp





========================== SQL ====================================

-- Database: your_bookstore (You can change this)
CREATE DATABASE IF NOT EXISTS ecomm_bookstore;
USE ecomm_bookstore;

-- Table: users
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: books
CREATE TABLE IF NOT EXISTS books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    image_url VARCHAR(255),
    total_quantity INT UNSIGNED NOT NULL DEFAULT 0,
    publisher VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: cart_items
CREATE TABLE IF NOT EXISTS cart_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    quantity INT UNSIGNED NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_book (user_id, book_id)
);

-- Table: wishlist_items
CREATE TABLE IF NOT EXISTS wishlist_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_book (user_id, book_id)
);

-- Table: orders
CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Table: order_details
CREATE TABLE IF NOT EXISTS order_details (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    book_id INT NOT NULL,
    quantity INT UNSIGNED NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE RESTRICT
);

-- Table: contact_messages
CREATE TABLE IF NOT EXISTS contact_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: csrf_tokens (For basic CSRF protection if not using a framework)
CREATE TABLE IF NOT EXISTS csrf_tokens (
    token VARCHAR(255) PRIMARY KEY,
    user_id INT,
    expiry TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


========================================= DatabaseConnection ==========================

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;

public class DatabaseConnection {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_bookstore"; // Replace with your DB URL
    private static final String DB_USER = "your_user"; // Replace with your DB username
    private static final String DB_PASSWORD = "your_password"; // Replace with your DB password

    private static Connection connection = null;

    private DatabaseConnection() {} // Private constructor to prevent instantiation

    public static Connection getConnection() throws SQLException {
        if (connection == null || connection.isClosed()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver"); // Replace with your DB driver
                connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            } catch (ClassNotFoundException e) {
                throw new SQLException("MySQL JDBC driver not found!", e);
            }
        }
        return connection;
    }

    public static void closeConnection() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
            connection = null;
        }
    }

    // --- Basic CSRF Token Management (Illustrative - Frameworks handle this better) ---

    public static String generateCsrfToken(int userId) throws SQLException {
        String token = UUID.randomUUID().toString();
        String sql = "INSERT INTO csrf_tokens (token, user_id, expiry) VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 1 HOUR))";
        try (PreparedStatement pstmt = getConnection().prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.setInt(2, userId);
            pstmt.executeUpdate();
        }
        return token;
    }

    public static boolean isValidCsrfToken(String token, int userId) throws SQLException {
        String sql = "SELECT * FROM csrf_tokens WHERE token = ? AND user_id = ? AND expiry > NOW()";
        try (PreparedStatement pstmt = getConnection().prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.setInt(2, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();
            }
        }
    }

    public static void removeCsrfToken(String token) throws SQLException {
        String sql = "DELETE FROM csrf_tokens WHERE token = ?";
        try (PreparedStatement pstmt = getConnection().prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.executeUpdate();
        }
    }
}



================================= MODEL ===========================

package model;

import java.sql.Timestamp;

public class User {
    private int id;
    private String name;
    private String email;
    private String phone;
    private String password;
    private String role;
    private Timestamp createdAt;
    private Timestamp updatedAt;

    public User(int id, String name, String email, String phone, String password, String role, Timestamp createdAt, Timestamp updatedAt) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.password = password;
        this.role = role;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public Timestamp getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Timestamp updatedAt) { this.updatedAt = updatedAt; }
}

package model;

import java.math.BigDecimal;
import java.sql.Timestamp;

public class Book {
    private int id;
    private String title;
    private BigDecimal price;
    private String imageUrl;
    private int totalQuantity;
    private String publisher;
    private Timestamp createdAt;
    private Timestamp updatedAt;

    public Book(int id, String title, BigDecimal price, String imageUrl, int totalQuantity, String publisher, Timestamp createdAt, Timestamp updatedAt) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.imageUrl = imageUrl;
        this.totalQuantity = totalQuantity;
        this.publisher = publisher;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    public int getTotalQuantity() { return totalQuantity; }
    public void setTotalQuantity(int totalQuantity) { this.totalQuantity = totalQuantity; }
    public String getPublisher() { return publisher; }
    public void setPublisher(String publisher) { this.publisher = publisher; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public Timestamp getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Timestamp updatedAt) { this.updatedAt = updatedAt; }
}


package model;

import java.sql.Timestamp;

public class CartItem {
    private int id;
    private int userId;
    private int bookId;
    private int quantity;
    private Timestamp createdAt;
    private Timestamp updatedAt;
    private Book book; // Optional: To hold book details for display

    public CartItem(int id, int userId, int bookId, int quantity, Timestamp createdAt, Timestamp updatedAt) {
        this.id = id;
        this.userId = userId;
        this.bookId = bookId;
        this.quantity = quantity;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getBookId() { return bookId; }
    public void setBookId(int bookId) { this.bookId = bookId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public Timestamp getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Timestamp updatedAt) { this.updatedAt = updatedAt; }
    public Book getBook() { return book; }
    public void setBook(Book book) { this.book = book; }
}

package model;

import java.sql.Timestamp;

public class WishlistItem {
    private int id;
    private int userId;
    private int bookId;
    private Timestamp createdAt;
    private Book book; // Optional: To hold book details for display

    public WishlistItem(int id, int userId, int bookId, Timestamp createdAt) {
        this.id = id;
        this.userId = userId;
        this.bookId = bookId;
        this.createdAt = createdAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getBookId() { return bookId; }
    public void setBookId(int bookId) { this.bookId = bookId; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public Book getBook() { return book; }
    public void setBook(Book book) { this.book = book; }
}


package model;

import java.math.BigDecimal;
import java.sql.Timestamp;

public class Order {
    private int id;
    private int userId;
    private Timestamp orderDate;
    private BigDecimal totalAmount;
    private Timestamp createdAt;
    private Timestamp updatedAt;

    public Order(int id, int userId, Timestamp orderDate, BigDecimal totalAmount, Timestamp createdAt, Timestamp updatedAt) {
        this.id = id;
        this.userId = userId;
        this.orderDate = orderDate;
        this.totalAmount = totalAmount;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public Timestamp getOrderDate() { return orderDate; }
    public void setOrderDate(Timestamp orderDate) { this.orderDate = orderDate; }
    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public Timestamp getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Timestamp updatedAt) { this.updatedAt = updatedAt; }
}

package model;

import java.math.BigDecimal;

public class OrderDetail {
    private int id;
    private int orderId;
    private int bookId;
    private int quantity;
    private BigDecimal unitPrice;
    private Book book; // Optional: To hold book details for display

    public OrderDetail(int id, int orderId, int bookId, int quantity, BigDecimal unitPrice) {
        this.id = id;
        this.orderId = orderId;
        this.bookId = bookId;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getOrderId() { return orderId; }
    public void setOrderId(int orderId) { this.orderId = orderId; }
    public int getBookId() { return bookId; }
    public void setBookId(int bookId) { this.bookId = bookId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) { this.unitPrice = unitPrice; }
    public Book getBook() { return book; }
    public void setBook(Book book) { this.book = book; }
}



package model;

import java.sql.Timestamp;

public class ContactMessage {
    private int id;
    private String name;
    private String email;
    private String message;
    private Timestamp createdAt;

    public ContactMessage(int id, String name, String email, String message, Timestamp createdAt) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.message = message;
        this.createdAt = createdAt;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}


========================== SERVLET =================================


------------------------------

package servlet;

import model.Book;
import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@WebServlet(name = "HomeServlet", value = "/home")
public class HomeServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Book> books = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT id, title, price, image_url FROM books LIMIT 6");
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                Book book = new Book(rs.getInt("id"), rs.getString("title"), rs.getBigDecimal("price"),
                                     rs.getString("image_url"), 0, null, null, null); // Quantity and publisher not needed here
                books.add(book);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Failed to load books.");
        }

        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        request.setAttribute("books", books);
        request.getRequestDispatcher("/home.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Handle any POST requests to the homepage if needed
        doGet(request, response);
    }
}
------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "RegisterServlet", value = "/register")
public class RegisterServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        request.getRequestDispatcher("/register.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String csrfToken = request.getParameter("csrfToken");
        HttpSession session = request.getSession();
        String sessionCsrfToken = (String) session.getAttribute("csrfToken");

        if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
            return;
        }

        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String password = request.getParameter("password");

        if (name == null || name.trim().isEmpty() || email == null || email.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Please fill in all required fields.");
            request.getRequestDispatcher("/register.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO users (name, email, phone, password) VALUES (?, ?, ?, ?)")) {
            pstmt.setString(1, name);
            pstmt.setString(2, email);
            pstmt.setString(3, phone);
            pstmt.setString(4, password); // In a real app, HASH THE PASSWORD!
            pstmt.executeUpdate();
            session.removeAttribute("csrfToken"); // Consume the token
            response.sendRedirect(request.getContextPath() + "/login?registrationSuccess=true");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Registration failed. Email might already exist.");
            request.getRequestDispatcher("/register.jsp").forward(request, response);
        }
    }
}


------------------------------

package servlet;

import model.User;
import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "LoginServlet", value = "/login")
public class LoginServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        request.getRequestDispatcher("/login.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String csrfToken = request.getParameter("csrfToken");
        HttpSession session = request.getSession();
        String sessionCsrfToken = (String) session.getAttribute("csrfToken");

        if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
            return;
        }

        String email = request.getParameter("email");
        String password = request.getParameter("password");

        if (email == null || email.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Please enter your email and password.");
            request.getRequestDispatcher("/login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT id, name, email, role, password FROM users WHERE email = ?")) {
            pstmt.setString(1, email);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    // In a real app, compare the provided password with the HASHED password from the database
                    if (password.equals(rs.getString("password"))) {
                        User user = new User(rs.getInt("id"), rs.getString("name"), rs.getString("email"), null, null, rs.getString("role"), null, null);
                        session.setAttribute("loggedInUser", user);
                        session.removeAttribute("csrfToken"); // Consume the token
                        response.sendRedirect(request.getContextPath() + "/home");
                        return;
                    }
                }
                request.setAttribute("errorMessage", "Invalid email or password.");
                request.getRequestDispatcher("/login.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Login failed. Please try again.");
            request.getRequestDispatcher("/login.jsp").forward(request, response);
        }
    }
}


------------------------------

package servlet;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.util.UUID;

@WebServlet(name = "LogoutServlet", value = "/logout")
public class LogoutServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        response.sendRedirect(request.getContextPath() + "/home");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
}



------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "ContactUsServlet", value = "/contact")
public class ContactUsServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        request.getRequestDispatcher("/contact.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String csrfToken = request.getParameter("csrfToken");
        HttpSession session = request.getSession();
        String sessionCsrfToken = (String) session.getAttribute("csrfToken");

        if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
            return;
        }

        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String message = request.getParameter("message");

        if (name == null || name.trim().isEmpty() || email == null || email.trim().isEmpty() || message == null || message.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Please fill in all fields.");
            request.getRequestDispatcher("/contact.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO contact_messages (name, email, message) VALUES (?, ?, ?)")) {
            pstmt.setString(1, name);
            pstmt.setString(2, email);
            pstmt.setString(3, message);
            pstmt.executeUpdate();
            session.removeAttribute("csrfToken"); // Consume the token
            request.setAttribute("successMessage", "Your message has been sent successfully!");
            request.getRequestDispatcher("/contact.jsp").forward(request, response);
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Failed to send your message. Please try again.");
            request.getRequestDispatcher("/contact.jsp").forward(request, response);
        }
    }
}



------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "CartServlet", value = "/cart")
public class CartServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        // Logic to fetch and display cart items would go here
        request.getRequestDispatcher("/cart.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action != null) {
            String csrfToken = request.getParameter("csrfToken");
            HttpSession session = request.getSession();
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            switch (action) {
                // Implement logic for adding, updating, removing cart items here
                case "add":
                    // ...
                    break;
                case "update":
                    // ...
                    break;
                case "remove":
                    // ...
                    break;
                default:
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
                    break;
            }
            session.removeAttribute("csrfToken"); // Consume the token after a state change
            response.sendRedirect(request.getContextPath() + "/cart"); // Or redirect as needed
        } else {
            doGet(request, response);
        }
    }
}


------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "WishlistServlet", value = "/wishlist")
public class WishlistServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        // Logic to fetch and display wishlist items would go here
        request.getRequestDispatcher("/wishlist.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action != null) {
            String csrfToken = request.getParameter("csrfToken");
            HttpSession session = request.getSession();
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            switch (action) {
                case "add":
                    // ... Logic to add to wishlist
                    break;
                case "remove":
                    // ... Logic to remove from wishlist
                    break;
                default:
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
                    break;
            }session.removeAttribute("csrfToken"); // Consume the token after a state change
            response.sendRedirect(request.getContextPath() + "/wishlist"); // Or redirect as needed
        } else {
            doGet(request, response);
        }
    }
}




------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "OrderServlet", value = "/order")
public class OrderServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        // Logic to display order confirmation or summary before placing order
        request.getRequestDispatcher("/order-confirmation.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action != null && action.equals("placeOrder")) {
            String csrfToken = request.getParameter("csrfToken");
            HttpSession session = request.getSession(false);
            if (session == null || session.getAttribute("loggedInUser") == null) {
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            // Implement the logic to:
            // 1. Retrieve cart items from session or database
            // 2. Create a new order in the database
            // 3. Create order details for each item
            // 4. Update book quantities in the database
            // 5. Clear the user's cart
            // 6. Store the payment amount

            try (Connection conn = DatabaseConnection.getConnection()) {
                // Perform transactional operations here
                // Example:
                // PreparedStatement orderStmt = conn.prepareStatement("INSERT INTO orders ...");
                // PreparedStatement orderDetailStmt = conn.prepareStatement("INSERT INTO order_details ...");
                // PreparedStatement updateBookStmt = conn.prepareStatement("UPDATE books SET total_quantity = total_quantity - ? WHERE id = ?");
                // ... execute updates and inserts

                session.removeAttribute("csrfToken"); // Consume the token
                session.removeAttribute("cart"); // Example: Clear cart from session
                response.sendRedirect(request.getContextPath() + "/order-success");

            } catch (SQLException e) {
                e.printStackTrace();
                request.setAttribute("errorMessage", "Failed to place your order. Please try again.");
                request.getRequestDispatcher("/order-confirmation.jsp").forward(request, response);
            }
        } else {
            doGet(request, response);
        }
    }
}

------------------------------

package servlet;

import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "AdminProductServlet", value = "/admin/products")
public class AdminProductServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session == null || session.getAttribute("loggedInUser") == null || !((model.User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login"); // Redirect non-admins
            return;
        }
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        // Logic to display add product form or list products
        request.getRequestDispatcher("/admin/add-product.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("loggedInUser") == null || !((model.User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        String action = request.getParameter("action");
        if (action != null && action.equals("addProduct")) {
            String csrfToken = request.getParameter("csrfToken");
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            String title = request.getParameter("title");
            String price = request.getParameter("price");
            String quantity = request.getParameter("quantity");
            String publisher = request.getParameter("publisher");
            // Handle image upload here

            if (title == null || title.trim().isEmpty() || price == null || price.trim().isEmpty() || quantity == null || quantity.trim().isEmpty() || publisher == null || publisher.trim().isEmpty()) {
                request.setAttribute("errorMessage", "Please fill in all product details.");
                request.getRequestDispatcher("/admin/add-product.jsp").forward(request, response);
                return;
            }

            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement("INSERT INTO books (title, price, total_quantity, publisher) VALUES (?, ?, ?, ?)")) {
                pstmt.setString(1, title);
                pstmt.setBigDecimal(2, new java.math.BigDecimal(price));
                pstmt.setInt(3, Integer.parseInt(quantity));
                pstmt.setString(4, publisher);
                pstmt.executeUpdate();
                session.removeAttribute("csrfToken"); // Consume the token
                request.setAttribute("successMessage", "Product added successfully!");
                request.getRequestDispatcher("/admin/add-product.jsp").forward(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
                request.setAttribute("errorMessage", "Failed to add product. Please try again.");
                request.getRequestDispatcher("/admin/add-product.jsp").forward(request, response);
            }
        } else {
            doGet(request, response);
        }
    }
}



------------------------------

package servlet;

import model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.util.UUID;

@WebServlet(name = "AdminOrderServlet", value = "/admin/orders")
public class AdminOrderServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session == null || session.getAttribute("loggedInUser") == null || !((User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }
        // Logic to fetch and display a list of orders (with search)
        request.getRequestDispatcher("/admin/list-orders.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("loggedInUser") == null || !((User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        String action = request.getParameter("action");
        if (action != null) {
            String csrfToken = request.getParameter("csrfToken");
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            switch (action) {
                case "search":
                    String orderId = request.getParameter("orderId");
                    // Logic to search for orders by ID
                    session.removeAttribute("csrfToken");
                    request.getRequestDispatcher("/admin/list-orders.jsp").forward(request, response);
                    break;
                // Other admin order actions
                default:
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
                    break;
            }
        } else {
            doGet(request, response);
        }
    }
}



------------------------------

package servlet;

import model.ContactMessage;
import model.User;
import util.DatabaseConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@WebServlet(name = "AdminContactServlet", value = "/admin/contacts")
public class AdminContactServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session == null || session.getAttribute("loggedInUser") == null || !((User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        if (session.getAttribute("csrfToken") == null) {
            session.setAttribute("csrfToken", UUID.randomUUID().toString());
        }

        List<ContactMessage> messages = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT id, name, email, message, created_at FROM contact_messages ORDER BY created_at DESC");
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                ContactMessage message = new ContactMessage(rs.getInt("id"), rs.getString("name"), rs.getString("email"), rs.getString("message"), rs.getTimestamp("created_at"));
                messages.add(message);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Failed to load contact messages.");
        }

        request.setAttribute("contactMessages", messages);
        request.getRequestDispatcher("/admin/list-contacts.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("loggedInUser") == null || !((User) session.getAttribute("loggedInUser")).getRole().equals("admin")) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        String action = request.getParameter("action");
        if (action != null) {
            String csrfToken = request.getParameter("csrfToken");
            String sessionCsrfToken = (String) session.getAttribute("csrfToken");

            if (csrfToken == null || !csrfToken.equals(sessionCsrfToken)) {
                response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token invalid");
                return;
            }

            // Implement any POST actions for contact messages here (e.g., deleting)
            session.removeAttribute("csrfToken");
            response.sendRedirect(request.getContextPath() + "/admin/contacts");
        } else {
            doGet(request, response);
        }
    }
}






----------------------========================= DAO ===============================================

package dao;

import model.User;
import util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDAO {

    public User getUserByEmail(String email) throws SQLException {
        String sql = "SELECT id, name, email, phone, password, role, created_at, updated_at FROM users WHERE email = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, email);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getString("email"),
                            rs.getString("phone"),
                            rs.getString("password"),
                            rs.getString("role"),
                            rs.getTimestamp("created_at"),
                            rs.getTimestamp("updated_at")
                    );
                }
                return null;
            }
        }
    }

    public void registerUser(User user) throws SQLException {
        String sql = "INSERT INTO users (name, email, phone, password) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, user.getName());
            pstmt.setString(2, user.getEmail());
            pstmt.setString(3, user.getPhone());
            pstmt.setString(4, user.getPassword()); // Remember to hash the password in the Servlet!
            pstmt.executeUpdate();
        }
    }

    // Method for basic CSRF token storage (if you choose this approach)
    public void storeCsrfToken(String token, int userId) throws SQLException {
        String sql = "INSERT INTO csrf_tokens (token, user_id, expiry) VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 1 HOUR))";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.setInt(2, userId);
            pstmt.executeUpdate();
        }
    }

    // Method for basic CSRF token validation (if you choose this approach)
    public boolean isValidCsrfToken(String token, int userId) throws SQLException {
        String sql = "SELECT token FROM csrf_tokens WHERE token = ? AND user_id = ? AND expiry > NOW()";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.setInt(2, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();
            }
        }
    }

    // Method to remove a CSRF token
    public void removeCsrfToken(String token) throws SQLException {
        String sql = "DELETE FROM csrf_tokens WHERE token = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, token);
            pstmt.executeUpdate();
        }
    }
}

----------------------

package dao;

import model.Book;
import util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class BookDAO {

    public List<Book> getLimitedBooks(int limit) throws SQLException {
        List<Book> books = new ArrayList<>();
        String sql = "SELECT id, title, price, image_url, total_quantity, publisher FROM books LIMIT ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, limit);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    books.add(new Book(
                            rs.getInt("id"),
                            rs.getString("title"),
                            rs.getBigDecimal("price"),
                            rs.getString("image_url"),
                            rs.getInt("total_quantity"),
                            rs.getString("publisher"),
                            rs.getTimestamp("created_at"),
                            rs.getTimestamp("updated_at")
                    ));
                }
                return books;
            }
        }
    }

    public Book getBookById(int id) throws SQLException {
        String sql = "SELECT id, title, price, image_url, total_quantity, publisher, created_at, updated_at FROM books WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new Book(
                            rs.getInt("id"),
                            rs.getString("title"),
                            rs.getBigDecimal("price"),
                            rs.getString("image_url"),
                            rs.getInt("total_quantity"),
                            rs.getString("publisher"),
                            rs.getTimestamp("created_at"),
                            rs.getTimestamp("updated_at")
                    );
                }
                return null;
            }
        }
    }

    public void addBook(Book book) throws SQLException {
        String sql = "INSERT INTO books (title, price, image_url, total_quantity, publisher) VALUES (?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, book.getTitle());
            pstmt.setBigDecimal(2, book.getPrice());
            pstmt.setString(3, book.getImageUrl());
            pstmt.setInt(4, book.getTotalQuantity());
            pstmt.setString(5, book.getPublisher());
            pstmt.executeUpdate();
        }
    }

    public void updateBookQuantity(int bookId, int quantity) throws SQLException {
        String sql = "UPDATE books SET total_quantity = ? WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, quantity);
            pstmt.setInt(2, bookId);
            pstmt.executeUpdate();
        }
    }
}


----------------------

package dao;

import model.CartItem;
import util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CartItemDAO {

    public List<CartItem> getCartItemsByUserId(int userId) throws SQLException {
        List<CartItem> cartItems = new ArrayList<>();
        String sql = "SELECT id, book_id, quantity, created_at, updated_at FROM cart_items WHERE user_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    cartItems.add(new CartItem(
                            rs.getInt("id"),
                            userId,
                            rs.getInt("book_id"),
                            rs.getInt("quantity"),
                            rs.getTimestamp("created_at"),
                            rs.getTimestamp("updated_at")
                    ));
                }
                return cartItems;
            }
        }
    }

    public CartItem getCartItemByUserAndBook(int userId, int bookId) throws SQLException {
        String sql = "SELECT id, quantity, created_at, updated_at FROM cart_items WHERE user_id = ? AND book_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, bookId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new CartItem(
                            rs.getInt("id"),
                            userId,
                            bookId,
                            rs.getInt("quantity"),
                            rs.getTimestamp("created_at"),
                            rs.getTimestamp("updated_at")
                    );
                }
                return null;
            }
        }
    }

    public void addCartItem(int userId, int bookId, int quantity) throws SQLException {
        String sql = "INSERT INTO cart_items (user_id, book_id, quantity) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, bookId);
            pstmt.setInt(3, quantity);
            pstmt.executeUpdate();
        }
    }

    public void updateCartItemQuantity(int cartItemId, int quantity) throws SQLException {
        String sql = "UPDATE cart_items SET quantity = ? WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, quantity);
            pstmt.setInt(2, cartItemId);
            pstmt.executeUpdate();
        }
    }

    public void removeCartItem(int cartItemId) throws SQLException {
        String sql = "DELETE FROM cart_items WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, cartItemId);
            pstmt.executeUpdate();
        }
    }

    public void clearCart(int userId) throws SQLException {
        String sql = "DELETE FROM cart_items WHERE user_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.executeUpdate();
        }
    }
}


----------------------

package dao;

import model.WishlistItem;
import util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class WishlistItemDAO {

    public List<WishlistItem> getWishlistItemsByUserId(int userId) throws SQLException {
        List<WishlistItem> wishlistItems = new ArrayList<>();
        String sql = "SELECT id, book_id, created_at FROM wishlist_items WHERE user_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    wishlistItems.add(new WishlistItem(
                            rs.getInt("id"),
                            userId,
                            rs.getInt("book_id"),
                            rs.getTimestamp("created_at")
                    ));
                }
                return wishlistItems;
            }
        }
    }

    public WishlistItem getWishlistItemByUserAndBook(int userId, int bookId) throws SQLException {
        String sql = "SELECT id, created_at FROM wishlist_items WHERE user_id = ? AND book_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, bookId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new WishlistItem(
                            rs.getInt("id"),
                            userId,
                            bookId,
                            rs.getTimestamp("created_at")
                    );
                }
                return null;
            }
        }
    }

    public void addWishlistItem(int userId, int bookId) throws SQLException {
        String sql = "INSERT INTO wishlist_items (user_id, book_id) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, bookId);
            pstmt.executeUpdate();
        }
    }

    public void removeWishlistItem(int wishlistItemId) throws SQLException {
        String sql = "DELETE FROM wishlist_items WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, wishlistItemId);
            pstmt.executeUpdate();
        }
    }
}



----------------------

package dao;

import model.ContactMessage;
import util.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ContactMessageDAO {

    public void addContactMessage(ContactMessage message) throws SQLException {
        String sql = "INSERT INTO contact_messages (name, email, message) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, message.getName());
            pstmt.setString(2, message.getEmail());
            pstmt.setString(3, message.getMessage());
            pstmt.executeUpdate();
        }
    }

    public List<ContactMessage> getAllContactMessages() throws SQLException {
        List<ContactMessage> messages = new ArrayList<>();
        String sql = "SELECT id, name, email, message, created_at FROM contact_messages ORDER BY created_at DESC";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    messages.add(new ContactMessage(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getString("email"),
                            rs.getString("message"),
                            rs.getTimestamp("created_at")
                    ));
                }
                return messages;
            }
        }
    }
}

====================================== jsp Pages ===========================
webapp/
├── home.jsp
├── register.jsp
├── login.jsp
├── contact.jsp
├── cart.jsp
├── wishlist.jsp
├── order-success.jsp
└── admin/
    ├---------------------- -------------------    
    ── admin-dashboard
    ├---------------------- -------------------    
    ── admin-add-product
    ├---------------------- -------------------    
    ── admin-list-orders
    └---------------------- -------------------    
    ── admin-order-details
    └----------------------── admin-list-contacts.jsp -------------------



    ----------------------    Common Head Section (head.jsp) ----------------------


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${pageTitle}</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="<%= request.getContextPath() %>/css/style.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    </head>


---------------------- Common Scripts Section (scripts.jsp): ----------------------

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="<%= request.getContextPath() %>/js/script.js"></script>


---------------------- Common Navigation Bar (navbar.jsp): ----------------------

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="<%= request.getContextPath() %>/home">My Bookstore</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="<%= request.getContextPath() %>/home">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="<%= request.getContextPath() %>/cart">Cart</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="<%= request.getContextPath() %>/wishlist">Wishlist</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="<%= request.getContextPath() %>/contact">Contact Us</a>
                </li>
                <% if (session.getAttribute("loggedInUser") != null && ((com.yourbookstore.model.User) session.getAttribute("loggedInUser")).getRole().equals("admin")) { %>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Admin
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="adminDropdown">
                            <li><a class="dropdown-item" href="<%= request.getContextPath() %>/admin/products">Manage Products</a></li>
                            <li><a class="dropdown-item" href="<%= request.getContextPath() %>/admin/orders">View Orders</a></li>
                            <li><a class="dropdown-item" href="<%= request.getContextPath() %>/admin/contacts">View Messages</a></li>
                        </ul>
                    </li>
                <% } %>
            </ul>
            <ul class="navbar-nav">
                <% if (session.getAttribute("loggedInUser") == null) { %>
                    <li class="nav-item">
                        <a class="nav-link" href="<%= request.getContextPath() %>/login">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="<%= request.getContextPath() %>/register">Register</a>
                    </li>
                <% } else { %>
                    <li class="nav-item">
                        <span class="nav-link">Welcome, <%= ((com.yourbookstore.model.User) session.getAttribute("loggedInUser")).getName() %></span>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="<%= request.getContextPath() %>/logout">Logout</a>
                    </li>
                <% } %>
            </ul>
        </div>
    </div>
</nav>


---------------------- 1. home.jsp: ----------------------


<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Home"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h1>Welcome to Our Bookstore</h1>
        <p>This is a paragraph of text on the homepage of our amazing online bookstore. Browse our selection of six fantastic books!</p>

        <div class="row row-cols-1 row-cols-md-3 g-4">
            <%-- Example book listings - Replace with dynamic data from your servlet --%>
            <div class="col">
                <div class="card h-100">
                    <img src="<%= request.getContextPath() %>/images/book1.jpg" class="card-img-top" alt="Book 1">
                    <div class="card-body">
                        <h5 class="card-title">Book Title 1</h5>
                        <p class="card-text">$19.99</p>
                        <button class="btn btn-primary btn-sm add-to-cart" data-book-id="1">Add to Cart</button>
                        <button class="btn btn-outline-secondary btn-sm add-to-wishlist" data-book-id="1">
                            <i class="bi bi-heart"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card h-100">
                    <img src="<%= request.getContextPath() %>/images/book2.jpg" class="card-img-top" alt="Book 2">
                    <div class="card-body">
                        <h5 class="card-title">Book Title 2</h5>
                        <p class="card-text">$24.50</p>
                        <button class="btn btn-primary btn-sm add-to-cart" data-book-id="2">Add to Cart</button>
                        <button class="btn btn-outline-secondary btn-sm add-to-wishlist" data-book-id="2">
                            <i class="bi bi-heart"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card h-100">
                    <img src="<%= request.getContextPath() %>/images/book3.jpg" class="card-img-top" alt="Book 3">
                    <div class="card-body">
                        <h5 class="card-title">Book Title 3</h5>
                        <p class="card-text">$15.75</p>
                        <button class="btn btn-primary btn-sm add-to-cart" data-book-id="3">Add to Cart</button>
                        <button class="btn btn-outline-secondary btn-sm add-to-wishlist" data-book-id="3">
                            <i class="bi bi-heart"></i>
                        </button>
                    </div>
                </div>
            </div>
            <%-- Add more book listings here (up to six) --%>
        </div>
    </div>

    <%@ include file="scripts.jsp" %>
    <script>
        $(document).ready(function() {
            $('.add-to-wishlist').on('click', function() {
                var bookId = $(this).data('book-id');
                var icon = $(this).find('i');
                $.post('<%= request.getContextPath() %>/wishlist', { action: 'add', bookId: bookId, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'added') {
                        icon.removeClass('bi-heart').addClass('bi-heart-fill');
                    } else if (response === 'removed') {
                        icon.removeClass('bi-heart-fill').addClass('bi-heart');
                    } else if (response === 'login') {
                        window.location.href = '<%= request.getContextPath() %>/login';
                    }
                });
            });

            $('.add-to-cart').on('click', function() {
                var bookId = $(this).data('book-id');
                $.post('<%= request.getContextPath() %>/cart', { action: 'add', bookId: bookId, quantity: 1, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'added') {
                        alert('Book added to cart!');
                    } else if (response === 'login') {
                        window.location.href = '<%= request.getContextPath() %>/login';
                    } else if (response === 'unavailable') {
                        alert('This book is currently unavailable.');
                    }
                });
            });
        });
    </script>
</body>
</html>


---------------------- 2. register.jsp: ----------------------


<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Register"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h2>Register</h2>
        <% if (request.getAttribute("errorMessage") != null) { %>
            <div class="alert alert-danger"><%= request.getAttribute("errorMessage") %></div>
        <% } %>
        <form action="<%= request.getContextPath() %>/register" method="post" class="mt-3">
            <input type="hidden" name="csrfToken" value="<%= request.getSession().getAttribute("csrfToken") %>">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Phone</label>
                <input type="tel" class="form-control" id="phone" name="phone">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
        <p class="mt-3">Already have an account? <a href="<%= request.getContextPath() %>/login">Login</a></p>
    </div>

    <%@ include file="scripts.jsp" %>
</body>
</html>
3. login.jsp:

Java

<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Login"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h2>Login</h2>
        <% if (request.getAttribute("errorMessage") != null) { %>
            <div class="alert alert-danger"><%= request.getAttribute("errorMessage") %></div>
        <% } %>
        <% if (request.getParameter("registrationSuccess") != null && request.getParameter("registrationSuccess").equals("true")) { %>
            <div class="alert alert-success">Registration successful! You can now log in.</div>
        <% } %>
        <form action="<%= request.getContextPath() %>/login" method="post" class="mt-3">
            <input type="hidden" name="csrfToken" value="<%= request.getSession().getAttribute("csrfToken") %>">
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
        <p class="mt-3">Don't have an account? <a href="<%= request.getContextPath() %>/register">Register</a></p>
    </div>

    <%@ include file="scripts.jsp" %>
</body>
</html>

---------------------- 4. contact.jsp: ----------------------


<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Contact Us"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h2>Contact Us</h2>
        <% if (request.getAttribute("errorMessage") != null) { %>
            <div class="alert alert-danger"><%= request.getAttribute("errorMessage") %></div>
        <% } %>
        <% if (request.getAttribute("successMessage") != null) { %>
            <div class="alert alert-success"><%= request.getAttribute("successMessage") %></div>
        <% } %>
        <form action="<%= request.getContextPath() %>/contact" method="post" class="mt-3">
            <input type="hidden" name="csrfToken" value="<%= request.getSession().getAttribute("csrfToken") %>">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="message" class="form-label">Message</label>
                <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Send Message</button>
        </form>
    </div>

    <%@ include file="scripts.jsp" %>
</body>
</html>


---------------------- 5. cart.jsp: ----------------------



<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Shopping Cart"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h2>Shopping Cart</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Title</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="cart-items">
                <%-- Cart items will be loaded here dynamically using JSTL or script --%>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4" class="text-end"><strong>Total:</strong></td>
                    <td id="cart-total">$0.00</td>
                    <td></td>
                </tr>
                <tr>
                    <td colspan="6" class="text-end">
                        <button class="btn btn-success" id="checkout-btn">Proceed to Checkout</button>
                    </td>
                </tr>
            </tfoot>
        </table>
        <p id="empty-cart-message" style="display:none;">Your cart is empty. <a href="<%= request.getContextPath() %>/home">Continue shopping</a></p>
    </div>

    <%@ include file="scripts.jsp" %>
    <script>
        $(document).ready(function() {
            function loadCartItems() {
                $.get('<%= request.getContextPath() %>/cart?action=view', function(data) {
                    $('#cart-items').html('');
                    var total = 0;
                    if (data && data.length > 0) {
                        $('#empty-cart-message').hide();
                        $.each(data, function(i, item) {
                            var row = `
                                <tr>
                                    <td><img src="<%= request.getContextPath() %>/<span class="math-inline">\{item\.book\.imageUrl\}" alt\="</span>{item.book.title}" width="50"></td>
                                    <td><span class="math-inline">\{item\.book\.title\}</td\>
<td\></span>${item.book.price.toFixed(2)}</td>
                                    <td>
                                        <input type="number" class="form-control form-control -sm quantity-input" value="${item.quantity}" min="1" data-item-id="${item.id}">
                                    </td>
                                    <td class="item-total">$${(item.book.price * item.quantity).toFixed(2)}</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm remove-from-cart" data-item-id="${item.id}">Remove</button>
                                    </td>
                                </tr>
                            `;
                            $('#cart-items').append(row);
                            total += item.book.price * item.quantity;
                        });
                        $('#cart-total').text('$' + total.toFixed(2));
                    } else {
                        $('#empty-cart-message').show();
                        $('#cart-total').text('$0.00');
                    }
                }, 'json');
            }

            loadCartItems();

            $('#cart-items').on('change', '.quantity-input', function() {
                var itemId = $(this).data('item-id');
                var quantity = $(this).val();
                var row = $(this).closest('tr');
                var price = parseFloat(row.find('td:nth-child(3)').text().replace('$', ''));
                var itemTotalElement = row.find('.item-total');

                $.post('<%= request.getContextPath() %>/cart', { action: 'update', itemId: itemId, quantity: quantity, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'updated') {
                        itemTotalElement.text('$' + (price * quantity).toFixed(2));
                        loadCartItems(); // Reload to update total
                    } else if (response === 'invalid-quantity') {
                        alert('Invalid quantity.');
                        $(this).val(row.data('original-quantity')); // Revert to previous
                    }
                });
            }).on('focus', '.quantity-input', function() {
                $(this).data('original-quantity', $(this).val());
            });

            $('#cart-items').on('click', '.remove-from-cart', function() {
                var itemId = $(this).data('item-id');
                var rowToRemove = $(this).closest('tr');
                $.post('<%= request.getContextPath() %>/cart', { action: 'remove', itemId: itemId, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'removed') {
                        rowToRemove.remove();
                        loadCartItems(); // Reload to update total
                    }
                });
            });

            $('#checkout-btn').on('click', function() {
                window.location.href = '<%= request.getContextPath() %>/order';
            });
        });
    </script>
</body>
</html>


----------------------6. wishlist.jsp: ----------------------


<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Wishlist"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <h2>Wishlist</h2>
        <div class="row row-cols-1 row-cols-md-3 g-4" id="wishlist-items">
            <%-- Wishlist items will be loaded here dynamically using JSTL or script --%>
        </div>
        <p id="empty-wishlist-message" style="display:none;">Your wishlist is empty. <a href="<%= request.getContextPath() %>/home">Browse books</a></p>
    </div>

    <%@ include file="scripts.jsp" %>
    <script>
        $(document).ready(function() {
            function loadWishlistItems() {
                $.get('<%= request.getContextPath() %>/wishlist?action=view', function(data) {
                    $('#wishlist-items').html('');
                    if (data && data.length > 0) {
                        $('#empty-wishlist-message').hide();
                        $.each(data, function(i, item) {
                            var col = `
                                <div class="col">
                                    <div class="card h-100">
                                        <img src="<%= request.getContextPath() %>/${item.book.imageUrl}" class="card-img-top" alt="${item.book.title}">
                                        <div class="card-body">
                                            <h5 class="card-title">${item.book.title}</h5>
                                            <p class="card-text">$${item.book.price.toFixed(2)}</p>
                                            <button class="btn btn-primary btn-sm add-to-cart" data-book-id="${item.book.id}">Add to Cart</button>
                                            <button class="btn btn-outline-danger btn-sm remove-from-wishlist" data-item-id="${item.id}">
                                                <i class="bi bi-heart-fill"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `;
                            $('#wishlist-items').append(col);
                        });
                    } else {
                        $('#empty-wishlist-message').show();
                    }
                }, 'json');
            }

            loadWishlistItems();

            $('#wishlist-items').on('click', '.remove-from-wishlist', function() {
                var itemId = $(this).data('item-id');
                var colToRemove = $(this).closest('.col');
                $.post('<%= request.getContextPath() %>/wishlist', { action: 'remove', itemId: itemId, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'removed') {
                        colToRemove.remove();
                        loadWishlistItems();
                    }
                });
            });

            $('#wishlist-items').on('click', '.add-to-cart', function() {
                var bookId = $(this).data('book-id');
                $.post('<%= request.getContextPath() %>/cart', { action: 'add', bookId: bookId, quantity: 1, csrfToken: '<%= request.getSession().getAttribute("csrfToken") %>' }, function(response) {
                    if (response === 'added') {
                        alert('Book added to cart!');
                    } else if (response === 'login') {
                        window.location.href = '<%= request.getContextPath() %>/login';
                    } else if (response === 'unavailable') {
                        alert('This book is currently unavailable.');
                    }
                });
            });
        });
    </script>
</body>
</html>
7. order-success.jsp:

Java

<%@ include file="head.jsp" %>
<% request.setAttribute("pageTitle", "Order Successful"); %>
<body>
    <%@ include file="navbar.jsp" %>

    <div class="container mt-5">
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Order Placed Successfully!</h4>
            <p>Thank you for your order. You will receive a confirmation email shortly.</p>
            <hr>
            <p class="mb-0"><a href="<%= request.getContextPath() %>/home">Continue Shopping</a></p>
        </div>
    </div>

    <%@ include file="scripts.jsp" %>
</body>
</html>
Admin Panel UI Files (within webapp/admin/):



----------------------8. admin-dashboard.jsp: -------------------



<%@ include file="../head.jsp" %>
<% request.setAttribute("pageTitle", "Admin Dashboard"); %>
<body>
    <%@ include file="../navbar.jsp" %>

    <div class="container mt-5">
        <h2>Admin Dashboard</h2>
        <div class="row">
            <div class="col-md-4">
                <div class="card bg-light mb-3">
                    <div class="card-header">Products</div>
                    <div class="card-body">
                        <h4 class="card-title"><a href="<%= request.getContextPath() %>/admin/products" class="btn btn-link">Manage Products</a></h4>
                        <p class="card-text">Add, edit, and view book products.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card bg-light mb-3">
                    <div class="card-header">Orders</div>
                    <div class="card-body">
                        <h4 class="card-title"><a href="<%= request.getContextPath() %>/admin/orders" class="btn btn-link">View Orders</a></h4>
                        <p class="card-text">View and manage customer orders.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card bg-light mb-3">
                    <div class="card-header">Messages</div>
                    <div class="card-body">
                        <h4 class="card-title"><a href="<%= request.getContextPath() %>/admin/contacts" class="btn btn-link">View Contact Messages</a></h4>
                        <p class="card-text">Read messages sent through the contact us page.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%@ include file="../scripts.jsp" %>
</body>
</html>


----------------------9. admin-add-product.jsp: -------------------



<%@ include file="../head.jsp" %>
<% request.setAttribute("pageTitle", "Add Product"); %>
<body>
    <%@ include file="../navbar.jsp" %>

    <div class="container mt-5">
        <h2>Add New Product</h2>
        <% if (request.getAttribute("errorMessage") != null) { %>
            <div class="alert alert-danger"><%= request.getAttribute("errorMessage") %></div>
        <% } %>
        <% if (request.getAttribute("successMessage") != null) { %>
            <div class="alert alert-success"><%= request.getAttribute("successMessage") %></div>
        <% } %>
        <form action="<%= request.getContextPath() %>/admin/products" method="post" enctype="multipart/form-data" class="mt-3">
            <input type="hidden" name="csrfToken" value="<%= request.getSession().getAttribute("csrfToken") %>">
            <input type="hidden" name="action" value="addProduct">
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <input type="text" class="form-control" id="title" name="title" required>
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price per Quantity</label>
                <input type="number" class="form-control" id="price" name="price" step="0.01" required>
            </div>
            <div class="mb-3">
                <label for="totalQuantity" class="form-label">Total Quantity</label>
                <input type="number" class="form-control" id="totalQuantity" name="totalQuantity" required>
            </div>
            <div class="mb-3">
                <label for="publisher" class="form-label">Publisher Name</label>
                <input type="text" class="form-control" id="publisher" name="publisher">
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">Product Image</label>
                <input type="file" class="form-control" id="image" name="image">
            </div>
            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
        <a href="<%= request.getContextPath() %>/admin/products" class="btn btn-secondary mt-3">Back to Product List</a>
    </div>

    <%@ include file="../scripts.jsp" %>
</body>
</html>


1----------------------0. admin-list-orders.jsp: -------------------



<%@ include file="../head.jsp" %>
<% request.setAttribute("pageTitle", "View Orders"); %>
<body>
    <%@ include file="../navbar.jsp" %>

    <div class="container mt-5">
        <h2>Order List</h2>
        <form action="<%= request.getContextPath() %>/admin/orders" method="get" class="mb-3">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by Order ID" name="orderId">
                <button class="btn btn-outline-secondary" type="submit">Search</button>
            </div>
        </form>
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>User ID</th>
                    <th>Order Date</th>
                    <th>Total Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="order-list">
                <%-- Order data will be loaded here dynamically using JSTL or script --%>
                <%-- Example using JSTL (requires JSTL dependency in your project) --%>
                <%-- <%@ taglib uri="http://java.sun.com/jstl/core" prefix="c" %>
                <c:forEach var="order" items="${requestScope.orders}">
                    <tr>
                        <td><c:out value="${order.id}"/></td>
                        <td><c:out value="${order.userId}"/></td>
                        <td><c:out value="${order.orderDate}"/></td>
                        <td>$<c:out value="${order.totalAmount}"/></td>
                        <td><a href="<%= request.getContextPath() %>/admin/orders?action=details&orderId=${order.id}" class="btn btn-sm btn-info">Details</a></td>
                    </tr>
                </c:forEach>
                <c:if test="${empty requestScope.orders}">
                    <tr><td colspan="5">No orders found.</td></tr>
                </c:if> --%>
            </tbody>
        </table>
    </div>

    <%@ include file="../scripts.jsp" %>
    <script>
        $(document).ready(function() {
            function loadOrders(searchOrderId) {
                var url = '<%= request.getContextPath() %>/admin/orders?action=list';
                if (searchOrderId) {
                    url += '&orderId=' + searchOrderId;
                }
                $.get(url, function(data) {
                    $('#order-list').html('');
                    if (data && data.length > 0) {
                        $.each(data, function(i, order) {
                            var row = `
                                <tr>
                                    <td>${order.id}</td>
                                    <td>${order.userId}</td>
                                    <td>${new Date(order.orderDate).toLocaleDateString()} ${new Date(order.orderDate).toLocaleTimeString()}</td>
                                    <td>$${order.totalAmount.toFixed(2)}</td>
                                    <td><a href="<%= request.getContextPath() %>/admin/orders?action=details&orderId=${order.id}" class="btn btn-sm btn-info">Details</a></td>
                                </tr>
                            `;
                            $('#order-list').append(row);
                        });
                    } else {
                        $('#order-list').append('<tr><td colspan="5">No orders found.</td></tr>');
                    }
                }, 'json');
            }

            // Load orders on page load (you might want to handle initial search)
            loadOrders($('#orderId').val());

            $('form').on('submit', function(e) {
                e.preventDefault();
                loadOrders($('input[name="orderId"]').val());
            });
        });
    </script>
</body>
</html>


1----------------------1. admin-order-details.jsp: -------------------



<%@ include file="../head.jsp" %>
<% request.setAttribute("pageTitle", "Order Details"); %>
<body>
    <%@ include file="../navbar.jsp" %>

    <div class="container mt-5">
        <h2>Order Details</h2>
        <% if (request.getAttribute("order") != null) { %>
            <% com.yourbookstore.model.Order order = (com.yourbookstore.model.Order) request.getAttribute("order"); %>
            <h3>Order ID: <%= order.getId() %></h3>
            <p>Order Date: <%= order.getOrderDate() %></p>
            <p>User ID: <%= order.getUserId() %></p>
            <h4>Order Items:</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Book Title</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody id="order-details">
                    <%-- Order details will be loaded here dynamically using JSTL or script --%>
                    <%-- Example using JSTL --%>
                    <%-- <%@ taglib uri="http://java.sun.com/jstl/core" prefix="c" %>
                    <c:forEach var="detail" items="<span class="math-inline">\{requestScope\.orderDetails\}"\>
<tr\>
<td\><c\:out value\="</span>{detail.book.title}"/></td>
                            <td><c:out value="<span class="math-inline">\{detail\.quantity\}"/\></td\>
<td\></span><c:out value="<span class="math-inline">\{detail\.unitPrice\}"/\></td\>
<td\></span><c:out value="<span class="math-inline">\{detail\.quantity \* detail\.unitPrice\}"/\></td\>
</tr\>
</c\:forEach\>
<c\:if test\="</span>{empty requestScope.orderDetails}">
                        <tr><td colspan="4">No items in this order.</td></tr>
                    </c:if> --%>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-end"><strong>Order Total:</strong></td>
                        <td>$<%= order.getTotalAmount() %></td>
                    </tr>
                </tfoot>
            </table>  <% } else { %>
            <div class="alert alert-warning">Order not found.</div>
        <% } %>
        <a href="<%= request.getContextPath() %>/admin/orders" class="btn btn-secondary mt-3">Back to Order List</a>
    </div>

    <%@ include file="../scripts.jsp" %>
    <script>
        $(document).ready(function() {
            function loadOrderDetails(orderId) {
                $.get('<%= request.getContextPath() %>/admin/orders?action=getDetails&orderId=' + orderId, function(data) {
                    $('#order-details').html('');
                    if (data && data.length > 0) {
                        $.each(data, function(i, detail) {
                            var row = `
                                <tr>
                                    <td>${detail.book.title}</td>
                                    <td>${detail.quantity}</td>
                                    <td>$${detail.unitPrice.toFixed(2)}</td>
                                    <td>$${(detail.quantity * detail.unitPrice).toFixed(2)}</td>
                                </tr>
                            `;
                            $('#order-details').append(row);
                        });
                    } else {
                        $('#order-details').append('<tr><td colspan="4">No items in this order.</td></tr>');
                    }
                }, 'json');
            }

            // Get orderId from the URL
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');
            if (orderId) {
                loadOrderDetails(orderId);
            }
        });
    </script>
</body>
</html>




1----------------------2. admin-list-contacts.jsp: -----------------

<%@ include file="../head.jsp" %>
<% request.setAttribute("pageTitle", "Contact Messages"); %>
<body>
    <%@ include file="../navbar.jsp" %>

    <div class="container mt-5">
        <h2>Contact Messages</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Message</th>
                    <th>Sent On</th>
                </tr>
            </thead>
            <tbody>
                <%-- Contact messages will be loaded here dynamically using JSTL or script --%>
                <%-- Example using JSTL --%>
                <%-- <%@ taglib uri="http://java.sun.com/jstl/core" prefix="c" %>
                <c:forEach var="message" items="${requestScope.contactMessages}">
                    <tr>
                        <td><c:out value="${message.name}"/></td>
                        <td><c:out value="${message.email}"/></td>
                        <td><c:out value="${message.message}"/></td>
                        <td><c:out value="${message.createdAt}"/></td>
                    </tr>
                </c:forEach>
                <c:if test="${empty requestScope.contactMessages}">
                    <tr><td colspan="4">No contact messages found.</td></tr>
                </c:if> --%>
            </tbody>
        </table>
    </div>

    <%@ include file="../scripts.jsp" %>
    <script>
        $(document).ready(function() {
            function loadContactMessages() {
                $.get('<%= request.getContextPath() %>/admin/contacts?action=list', function(data) {
                    $('tbody').html('');
                    if (data && data.length > 0) {
                        $.each(data, function(i, message) {
                            var row = `
                                <tr>
                                    <td>${message.name}</td>
                                    <td>${message.email}</td>
                                    <td>${message.message}</td>
                                    <td>${new Date(message.createdAt).toLocaleString()}</td>
                                </tr>
                            `;
                            $('tbody').append(row);
                        });
                    } else {
                        $('tbody').append('<tr><td colspan="4">No contact messages found.</td></tr>');
                    }
                }, 'json');
            }

            loadContactMessages();
        });
    </script>
</body>
</html>




-
