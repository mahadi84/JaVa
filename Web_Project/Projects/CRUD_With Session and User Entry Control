Date: 3 March 2025

create  
 01. Employee database and table with id, name, and email fields 
 02. Controller(a single  HTTP Servlet to handle create, read, update and delete requests 
     also prevent duplicate email entry coming from external HTML form  and will show the result in an external HTML table as well) 
    Also, it can only delete or update data who entered it with the session and show "No data updated" if there is no new data to update.  
 03. DAO  
 04. Model 
 05. HTML form to login, inserting, showing and updating data  
 06. Database Connection Class  
 for the Java Eclipse web application

-----------------------DATA BASE and TABLE-----------------------------
CREATE DATABASE employee_db;
USE employee_db;

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

----------------------------------- Login (login.jsp) ---------------------------------------------------
<html>
<head><title>Login</title></head>
<body>
    <h1>Login</h1>

    <c:if test="${not empty loginError}">
        <p style="color: red;">${loginError}</p>
    </c:if>

    <form action="EmployeeServlet" method="post">
        <input type="hidden" name="action" value="loginSubmit">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>


------------------------------------ Edit Form (update_form.jsp)---------------------------------
<html>
<head><title>Update Employee</title></head>
<body>
<%
    if (session == null || session.getAttribute("email") == null) {
        response.sendRedirect("login.jsp");
        return;
    }

%>
    <h1>Update Employee</h1>
    <form action="EmployeeServlet" method="post">
        <input type="hidden" name="action" value="update">
        <input type="hidden" name="id" value="${employee.id}">
        Name: <input type="text" name="name" value="${employee.name}" required><br>
        Email: <input type="email" name="email" value="${employee.email}" required><br>
        <input type="submit" value="Update">
    </form>
    <a href="EmployeeServlet">Back to List</a>
</body>
</html>

------------------------------------ List Emp(employee_list.jsp)----------------------------------
<html>
<head><title>Employee List</title></head>
<body>
    <h1>Employee List</h1>
    <p>Welcome, ${sessionScope.username}!</p>  <%-- Display logged-in user --%>
    <a href="EmployeeServlet?action=logout">Logout</a> <%-- Logout link --%>

    <c:if test="${not empty message}">
        <p style="color: green;">${message}</p>
    </c:if>
    <c:if test="${not empty errorMessage}">
        <p style="color: red;">${errorMessage}</p>
    </c:if>

    <table border="1">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Created By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <c:forEach var="employee" items="${employees}">
                <tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.email}</td>
                    <td>${employee.createdBy}</td>
                    <td>
                        <a href="EmployeeServlet?action=updateForm&id=${employee.id}">Update</a> |
                        <a href="EmployeeServlet?action=delete&id=${employee.id}" onclick="return confirm('Are you sure?')">Delete</a>
                    </td>
                </tr>
            </c:forEach>
        </tbody>
    </table>

    
</body>
</html>

------------------------------------ New Emp(new-employee.jsp) ------------------------------------

<h2>Add New Employee</h2>
    <form action="EmployeeServlet" method="post">
        <input type="hidden" name="action" value="create">
        Name: <input type="text" name="name" required><br>
        Email: <input type="email" name="email" required><br>
        <input type="submit" value="Create">
    </form>

------------------------------------ Controller Servlet -------------------------------------------
package controller;

import dao.EmployeeDAO;
import model.Employee;
import db.DBConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession; // For session management
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/EmployeeServlet")
public class EmployeeServlet extends HttpServlet {
    private EmployeeDAO employeeDAO;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            action = "login"; // Default to login page
        }

        HttpSession session = request.getSession();
        String loggedInUser = (String) session.getAttribute("username");

        try {
            switch (action) {
                case "login":
                    showLoginForm(request, response);
                    break;
                case "loginSubmit":
                    handleLogin(request, response);
                    break;
                case "logout":
                    handleLogout(request, response);
                    break;
                case "create":
                    createEmployee(request, response, loggedInUser);
                    break;
                case "updateForm":
                    showUpdateForm(request, response, loggedInUser);
                    break;
                case "update":
                    updateEmployee(request, response, loggedInUser);
                    break;
                case "delete":
                    deleteEmployee(request, response, loggedInUser);
                    break;
                case "list":
                default:
                    if (loggedInUser != null) { // Check if logged in
                        listEmployees(request, response);
                    } else {
                        showLoginForm(request, response); // Redirect to login
                    }
                    break;
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Handle exceptions properly in a real app
            request.setAttribute("errorMessage", "Database error: " + ex.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response); // Error page
        }
    }

    private void showLoginForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("login.jsp").forward(request, response);
    }

    private void handleLogin(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password"); // In real app, hash passwords!

        // Basic Authentication (Replace with your actual authentication logic)
        if (username != null && username.equals("test") && password.equals("test")) { // Example
            HttpSession session = request.getSession();
            session.setAttribute("username", username);
            response.sendRedirect("EmployeeServlet"); // Redirect to employee list
        } else {
            request.setAttribute("loginError", "Invalid username or password.");
            showLoginForm(request, response);
        }
    }

    private void handleLogout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false); // Get existing session, don't create one
        if (session != null) {
            session.invalidate(); // Invalidate the session
        }
        response.sendRedirect("EmployeeServlet"); // Redirect to login page
    }

    private void createEmployee(HttpServletRequest request, HttpServletResponse response, String loggedInUser) throws ServletException, IOException, SQLException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");

        Employee newEmployee = new Employee(name, email, loggedInUser);
        int generatedId = employeeDAO.createEmployee(newEmployee);
        if(generatedId > 0) {
          request.setAttribute("message", "Employee created successfully with ID: " + generatedId);
        } else {
          request.setAttribute("message", "Error creating employee.");
        }
        listEmployees(request, response); // Redirect to employee list
    }

    private void showUpdateForm(HttpServletRequest request, HttpServletResponse response, String loggedInUser) throws ServletException, IOException, SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        Employee employee = employeeDAO.getEmployeeById(id);

        if (employee != null && employee.getCreatedBy().equals(loggedInUser)) { // Check ownership
            request.setAttribute("employee", employee);
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
        } else {
            request.setAttribute("errorMessage", "You don't have permission to update this employee.");
            listEmployees(request, response); // Or redirect to an error page
        }
    }

    private void updateEmployee(HttpServletRequest request, HttpServletResponse response, String loggedInUser) throws ServletException, IOException, SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");

        Employee employee = new Employee(name, email, loggedInUser);
        employee.setId(id); // Set the ID for the update

        employeeDAO.updateEmployee(employee, loggedInUser);
        request.setAttribute("message", "Employee updated successfully.");
        listEmployees(request, response);
    }

    private void deleteEmployee(HttpServletRequest request, HttpServletResponse response, String loggedInUser) throws ServletException, IOException, SQLException {
        int id = Integer.parseInt(request.getParameter("id"));
        employeeDAO.deleteEmployee(id, loggedInUser);
        request.setAttribute("message", "Employee deleted successfully.");
        listEmployees(request, response);
    }

    private void listEmployees(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        List<Employee> employees = employeeDAO.getAllEmployees();
        request.setAttribute("employees", employees);
        request.getRequestDispatcher("employee_list.jsp").forward(request, response);
    }
}


------------------------------------ Emp DAO (EmployeeDAO.java) -----------------------------------
package dao;

import model.Employee;
import db.DBConnection; // Your DB connection class
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDAO {

    public int createEmployee(Employee employee) throws SQLException {
        String sql = "INSERT INTO employees (name, email, created_by) VALUES (?, ?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, employee.getName());
            pstmt.setString(2, employee.getEmail());
            pstmt.setString(3, employee.getCreatedBy());
            int affectedRows = pstmt.executeUpdate();
            if(affectedRows > 0) {
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getInt(1); // Return the generated ID
                    }
                }
            }
            return 0; // Or -1 to indicate failure
        }
    }

    public List<Employee> getAllEmployees() throws SQLException {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees";
        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Employee emp = new Employee();
                emp.setId(rs.getInt("id"));
                emp.setName(rs.getString("name"));
                emp.setEmail(rs.getString("email"));
                emp.setCreatedBy(rs.getString("created_by"));
                employees.add(emp);
            }
        }
        return employees;
    }

    // ... (Implement updateEmployee and deleteEmployee methods similarly)
    public void updateEmployee(Employee employee, String loggedInUser) throws SQLException {
        String sql = "UPDATE employees SET name=?, email=? WHERE id=? AND created_by=?"; // Check created_by
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, employee.getName());
            pstmt.setString(2, employee.getEmail());
            pstmt.setInt(3, employee.getId());
            pstmt.setString(4, loggedInUser); // Ensure only the creator can update
            pstmt.executeUpdate();
        }
    }

    public void deleteEmployee(int id, String loggedInUser) throws SQLException {
        String sql = "DELETE FROM employees WHERE id=? AND created_by=?"; // Check created_by
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            pstmt.setString(2, loggedInUser); // Ensure only the creator can delete
            pstmt.executeUpdate();
        }
    }

    public Employee getEmployeeById(int id) throws SQLException {
      String sql = "SELECT * FROM employees WHERE id=?";
      try (Connection conn = DBConnection.getConnection();
           PreparedStatement pstmt = conn.prepareStatement(sql)) {
          pstmt.setInt(1, id);
          try (ResultSet rs = pstmt.executeQuery()) {
              if (rs.next()) {
                  Employee emp = new Employee();
                  emp.setId(rs.getInt("id"));
                  emp.setName(rs.getString("name"));
                  emp.setEmail(rs.getString("email"));
                  emp.setCreatedBy(rs.getString("created_by"));
                  return emp;
              }
          }
      }
      return null;
  }

}



------------------------------------ Model(Employee.java) ------------------------------------------
package model;

public class Employee {
    private int id;
    private String name;
    private String email;
    private String createdBy; // Add this field

    // Constructor, getters, and setters for all fields
    // ... (Generate these in Eclipse)
    public Employee() {} // Important: No-argument constructor is needed for some frameworks.
    public Employee(String name, String email, String createdBy) {
        this.name = name;
        this.email = email;
        this.createdBy = createdBy;
    }
}

------------------------------------ DB_Connection -----------------------------------------------
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/employee_db";
    private static final String USER = "your_mysql_user"; // Replace with your MySQL username
    private static final String PASSWORD = "your_mysql_password"; // Replace with your MySQL password

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL Connector/J driver
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("MySQL JDBC Driver not found", e);
        }
    }
}











-
