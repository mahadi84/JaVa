Date: 26-Feb-26


Search:
create 
01. Employee database and table with id, name, email fields
02. Controller(a single  servlet to handle create, read, update and delete requests from external HTML formÂ  and will show the result in external HTML table as well)
03. DAO 
04. Model
05. HTML views to insert data and show data to update 
06. Database Class 
for the Java Eclipse web application 


================================ // 1. Database Setup (MySQL Example)================================ 

CREATE DATABASE employee_db;


USE employee_db;

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

================================// 2. Model (Employee.java)==============================================

package model;

public class Employee {
    private int id;
    private String name;
    private String email;

    public Employee() {}

    public Employee(int id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    public int getId() {return id; }
    public void setId(int id) { this.id = id;}

    public String getName() {return name; }
    public void setName(String name) {this.name = name;}

    public String getEmail() { return email; }
    public void setEmail(String email) {this.email = email; }
}

================================ // 3. Database Class (DBConnection.java) ================================
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {

    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/employee_db";
    private static final String JDBC_USER = "your_mysql_user";
    private static final String JDBC_PASSWORD = "your_mysql_password";

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // Load the driver
            return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("MySQL JDBC Driver not found", e);
        }
    }
}

================================ // 4. DAO (EmployeeDAO.java) ================================
package dao;

import model.Employee;
import db.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDAO {

    public void createEmployee(Employee employee) throws SQLException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(
                     "INSERT INTO employees (name, email) VALUES (?, ?)")) {
            preparedStatement.setString(1, employee.getName());
            preparedStatement.setString(2, employee.getEmail());
            preparedStatement.executeUpdate();
        }
    }

    public List<Employee> getAllEmployees() throws SQLException {
        List<Employee> employees = new ArrayList<>();
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM employees");
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                Employee employee = new Employee();
                employee.setId(resultSet.getInt("id"));
                employee.setName(resultSet.getString("name"));
                employee.setEmail(resultSet.getString("email"));
                employees.add(employee);
            }
        }
        return employees;
    }

    public void updateEmployee(Employee employee) throws SQLException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(
                     "UPDATE employees SET name = ?, email = ? WHERE id = ?")) {
            preparedStatement.setString(1, employee.getName());
            preparedStatement.setString(2, employee.getEmail());
            preparedStatement.setInt(3, employee.getId());
            preparedStatement.executeUpdate();
        }
    }

    public void deleteEmployee(int id) throws SQLException {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM employees WHERE id = ?")) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        }
    }
}

================================ // 5. Controller (EmployeeServlet.java) ================================

package controller;

import dao.EmployeeDAO;
import model.Employee;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/emp")
public class EmployeeServlet extends HttpServlet {
    private EmployeeDAO employeeDAO;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            action = "read";
        }

        try {
            switch (action) {
                case "create":
                    createEmployee(request, response);
                    break;
                case "update":
                    updateEmployee(request, response);
                    break;
                case "delete":
                    deleteEmployee(request, response);
                    break;
                default:
                    readEmployees(request, response);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            response.getWriter().println("Database error: " + e.getMessage());
        }
    }

    private void createEmployee(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        employeeDAO.createEmployee(new Employee(0, name, email));
        readEmployees(request, response);
    }

    private void readEmployees(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException {
        response.setContentType("text/html");
        response.sendRedirect("viewEmployees.jsp");
    }

    private void updateEmployee(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        employeeDAO.updateEmployee(new Employee(id, name, email));
        readEmployees(request, response);
    }

    private void deleteEmployee(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        employeeDAO.deleteEmployee(id);
        readEmployees(request, response);
    }
}

==================================================// 6. HTML Views (insertEmployee.jsp, viewEmployees.jsp) ==============================================================

------------------ insertEmployee.jsp: -------------------
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet" href="Style/myStyle.css">
    <title>Insert Employee</title>
  </head>


   <body>  
   
  <div class="container">
  <div class="row">
    <div class="col-md-4">col</div>
    <div class="col-md-4 mt-4">  
   
   
  <form  action="emp" method="post" class="form-login text-center text-white">
    <h2 class="mb-3">Register Employee</h2>
   <% if (session.getAttribute("message") != null) { %>
        <%= session.getAttribute("message") %>
        <% session.removeAttribute("message"); %>
    <% } %>
    
    <p style="color: red;">${errorMessage}</p>
    
    <input type="hidden" name="action" value="create">
    <input name="name"  type="text"   value="${name}"  class="form-control mb-3"  placeholder="Employee name" id="name">
    <input name="email" type="text"   value="${email}" class="form-control mb-3"  placeholder="Employee email" id="email" >
    
    <button class="btn btn-primary w-100 mt-3" type="submit" name="submit"  value="Submit">Login</button>
    <!--btn-block is not working in v5-->
  </form>
  <br>
    <a href="EmployeeServlet">View Employees</a>
  
	</div>
	<div class="col-md-4">col</div>
  </div> 
  </div>
   
  
  
   <!-- Optional JavaScript; choose one of the two! -->
    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    -->
  </body>
</html>

-------------------------------------------- viewEmployees.jsp: ------------------------------------------------
<%@ page import="model.Employee" %>
<%@ page import="java.util.List" %>
<%@ page import="java.sql.SQLException" %>
<%@ page import="dao.EmployeeDAO" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet" href="Style/myStyle.css">
    <title>Insert Employee</title>
  </head>


   <body>  
   
  <div class="container">
  <div class="row">
    <div class="col-md-2">col</div>
    <div class="col-md-6 mt-4"> 
    <h2>Employees</h2>
    <table border="1" class="table table-striped">
        <tr><th>ID</th><th>Name</th><th>Email</th><th>Actions</th></tr>
        <%
            EmployeeDAO employeeDAO = new EmployeeDAO();
            List<Employee> employees = null;
            try {
                employees = employeeDAO.getAllEmployees();
                if (employees != null && !employees.isEmpty()) {
                    for (Employee employee : employees) {
        %>
        <tr>
            <td><%= employee.getId() %></td>
            <td><%= employee.getName() %></td>
            <td><%= employee.getEmail() %></td>
            <td>
                <a href="#" onclick="setUpdateForm(<%= employee.getId() %>, '<%= employee.getName() %>', '<%= employee.getEmail() %>')">Update</a> |
                <a href="EmployeeServlet?action=delete&id=<%= employee.getId() %>">Delete</a>
            </td>
        </tr>
        <%
                    }
                } else { %>
                    <tr><td colspan="4">No employees found.</td></tr>
        <%
                }
            } catch (SQLException e) {
                e.printStackTrace();
                out.println("<tr><td colspan='4'>Error retrieving data: " + e.getMessage() + "</td></tr>");
            }
        %>
    </table>
    <br>
    <form action="EmployeeServlet" method="post" class="form-login text-center">
        <input type="hidden" name="action" id="formAction" value="create">
        <input type="hidden" name="id" id="formId">
        
        <label for="formName" class="form-label">Name</label>
        <input type="text" name="name" id="formName" class="form-control mb-3"><br>

        <label for="formEmail" class="form-label">Email</label>
        <input type="email" name="email" id="formEmail" class="form-control mb-3"><br>
        <input type="submit" value="Submit">
    </form>
    <script>
        function setUpdateForm(id, name, email) {
            document.getElementById('formAction').value = 'update';
            document.getElementById('formId').value = id;
            document.getElementById('formName').value = name;
            document.getElementById('formEmail').value = email;
        }
    </script>

    
    </div>
	<div class="col-md-2">col</div>
  </div> 
  </div>
   
  
  
   <!-- Optional JavaScript; choose one of the two! -->
    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    -->
  </body>
</html>
















---
