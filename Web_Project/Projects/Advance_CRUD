

create for the Java Eclipse web application:
01. SQL QUERY for Employee database and table with ID, name, email, and image fields. And Database Connection Class.
02. Model
03. DAO, a single HTTP Servlet as Controller to handle create, read, update, and delete requests for employee with Bootstrap 5 as UI for login, insert, update, and delete data 
that fulfill the below conditions:
    -Validate input field and prevent duplicate email entry. If so, show message "Already exist"
    -It can delete or update data only who entered it with session
    -If there is no NEW data to update, show "No data updated".
    -Only logged-in users can access the crud page.
Note: All success and error messages will show on respective Bootstrap 5 pages


==============================================  01. SQL QUERY and Database Connection Class ========================================================================

CREATE DATABASE employee_db;
USE employee_db;

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
CREATE TABLE employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    image VARCHAR(255),
    created_by INT,       
    FOREIGN KEY (created_by) REFERENCES users(id) 
);

INSERT INTO users (username, password) VALUES
('user1', '123'), 
('user2', '123'); 

INSERT INTO employees (name, email, image, created_by)
VALUES ('John Doe', 'john.doe@example.com', 'john.jpg', 1);

INSERT INTO employees (name, email, image, created_by)
VALUES ('Mahadi', 'm@example.com', 'john.jpg', 2);


================================  Database Connection Class (db.DBConnection.java) ===================================
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/employee_db"; // Update with your DB details
    private static final String DB_USER = "your_db_user"; // Update
    private static final String DB_PASSWORD = "your_db_password"; // Update

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL Driver.  Change if needed.
            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("Database driver not found: " + e.getMessage());
        }
    }
}


=================================  02. Model (model.Employee.java) =============================
package model;

public class Employee {
    private int id;
    private String name;
    private String email;
    private String image; // Path/URL
    private int createdBy;

    // Getters and setters for all fields

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() {return name;}
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public  String getImage() {return image; }
    public void setImage( String image) { this.image = image; }

    public int getCreatedBy() {return createdBy; }
    public void setCreatedBy(int createdBy) { this.createdBy = createdBy; }  
}


==================================== Servlet (controller.LoginServlet.java) ======================================
package controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("logout".equals(action)) {
            logout(request, response);
        } else {
            login(request, response);
        }
    }

    private void login(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Username and password are required.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            int userId = authenticateUser(conn, username, password);

            if (userId != -1) {
                HttpSession session = request.getSession();
                session.setAttribute("userId", userId);
                response.sendRedirect("EmployeeServlet?action=list");
            } else {
                request.setAttribute("errorMessage", "Invalid username or password.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }

    private void logout(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        response.sendRedirect("login.jsp");
    }

    private int authenticateUser(Connection conn, String username, String password) throws SQLException {
        String sql = "SELECT id FROM users WHERE username = ? AND password = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id");
                }
            }
        }
        return -1;
    }
}



========================= Servlet (controller.EmployeeServlet.java) =============================
package controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import dao.EmployeeDAO;
import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Employee;
import java.util.regex.Pattern;

@WebServlet("/EmployeeServlet")
public class EmployeeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private EmployeeDAO employeeDAO;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
    		throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
    		throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            action = "list";
        }

        HttpSession session = request.getSession(false); 
        if (session == null || session.getAttribute("userId") == null) {
            request.setAttribute("errorMessage", "Please log in to access this page.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            int userId = (int) session.getAttribute("userId");

            switch (action) {
                case "list":
                    listEmployees(request, response, conn, userId);
                    break;
                case "create":
                    createEmployee(request, response, conn, userId);
                    break;
                case "updateForm":
                    showUpdateForm(request, response, conn, userId);
                    break;
                case "update":
                    updateEmployee(request, response, conn, userId);
                    break;
                case "delete":
                    deleteEmployee(request, response, conn, userId);
                    break;
                default:
                    response.sendRedirect("EmployeeServlet?action=list");
            }
        } catch (SQLException e) {
            e.printStackTrace(); 
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response); 
        }
    }

    private void listEmployees(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId) 
    		throws SQLException, ServletException, IOException {
        List<Employee> employees = employeeDAO.getAllEmployees(conn, userId); // Pass userId here
        request.setAttribute("employees", employees);
        
        String message = request.getParameter("message");
        String text = request.getParameter("text");

        if (message != null && !message.isEmpty()) {
            request.setAttribute("message", message);
            request.setAttribute("messageText", text);
        }
        request.getRequestDispatcher("employee_list.jsp").forward(request, response);
    }

    private void createEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String image = request.getParameter("image");
        
        String errorMessage = null;

        if (name == null || name.trim().isEmpty()) {
            errorMessage = "Name is required.";
        }else if (!Pattern.matches("^[a-zA-Z\\s.]+$", name)) {
        	errorMessage =  "Name can only contain letters, spaces, and periods.";
        } else if (email == null || email.trim().isEmpty()) {
        	errorMessage =  "Email is required.";
        } else if (!Pattern.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", email)) {
        	errorMessage =  "Invalid email format.";
        } else if (image == null || image.trim().isEmpty()) {
            errorMessage = "Image URL is required.";
        }else if (!image.toLowerCase().matches("^[a-zA-Z0-9]+\\.(jpeg|jpg|png)$")) {
            errorMessage = "Image name must end with .jpeg, .jpg, or .png and can only contain letters and number.";
        }
        
        if (errorMessage != null) {
            request.setAttribute("errorMessage", errorMessage);
            request.setAttribute("name", name);
            request.setAttribute("email", email);
            request.setAttribute("image", image);
            request.getRequestDispatcher("employee_form.jsp").forward(request, response);
            return;
        }
        

        Employee newEmployee = new Employee();
        newEmployee.setName(name);
        newEmployee.setEmail(email);
        newEmployee.setImage(image);

        if (employeeDAO.isEmailExists(conn, newEmployee.getEmail())) {
            request.setAttribute("errorMessage", "Email already exists.");
            request.setAttribute("name", name);
            request.setAttribute("email", email);
            request.setAttribute("image", image);
            request.getRequestDispatcher("employee_form.jsp").forward(request, response); 
            return;
        }

        newEmployee.setCreatedBy(userId);
        try {
            employeeDAO.addEmployee(conn, newEmployee);
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+added+successfully.");
        } catch (SQLException ex) {
            response.sendRedirect("EmployeeServlet?action=list&message=failed&text=Error+adding+employee:" + ex.getMessage());
            // Optionally log the exception: logger.error("Error adding employee", ex);
        }

    }

    private void showUpdateForm(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId) 
    		throws SQLException, ServletException, IOException {
        int idToUpdate = Integer.parseInt(request.getParameter("id"));
        Employee employeeToUpdate = employeeDAO.getEmployeeById(conn, idToUpdate);

        if (employeeToUpdate == null || employeeToUpdate.getCreatedBy() != userId) { 
            request.setAttribute("errorMessage", "You don't have permission to update this employee.");
            request.getRequestDispatcher("EmployeeServlet?action=list").forward(request, response);
            return;
        }

        request.setAttribute("employee", employeeToUpdate);
        request.getRequestDispatcher("update_form.jsp").forward(request, response);
    }

  
 private void updateEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
//        int id = Integer.parseInt(request.getParameter("id"));
        
    	String idParam = request.getParameter("id");

        if (idParam == null || idParam.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Employee ID is missing.");
            // Repopulate with existing data
            request.setAttribute("id", idParam); // Repopulate the id
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }

        int id;
        try {
            id = Integer.parseInt(idParam);
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Invalid Employee ID.");
            // Repopulate with existing data
            request.setAttribute("id", idParam); // Repopulate the id
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }
        
        
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String image = request.getParameter("image");

        // Get the existing employee data
        Employee existingEmployee = employeeDAO.getEmployeeById(conn, id);

        
        String errorMessage = null;

        if (name == null || name.trim().isEmpty()) {
            errorMessage = "Name is required.";
        }else if (!Pattern.matches("^[a-zA-Z\\s.]+$", name)) {
        	errorMessage =  "Name can only contain letters, spaces, and periods.";
        } else if (email == null || email.trim().isEmpty()) {
        	errorMessage =  "Email is required.";
        } else if (!Pattern.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", email)) {
        	errorMessage =  "Invalid email format.";
        } else if (image == null || image.trim().isEmpty()) {
            errorMessage = "Image URL is required.";
        }else if (!image.toLowerCase().matches("^[a-zA-Z0-9]+\\.(jpeg|jpg|png)$")) {
            errorMessage = "Image name must end with .jpeg, .jpg, or .png and can only contain letters and number.";
        }
        
        if (errorMessage != null) {
            request.setAttribute("errorMessage", errorMessage);
            request.setAttribute("name", existingEmployee.getName());
            request.setAttribute("email", existingEmployee.getEmail());
            request.setAttribute("image", existingEmployee.getImage());
            request.setAttribute("id", idParam); // Repopulate the id
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }
        
     // Compare old and new data
        if (existingEmployee.getName().equals(name) && existingEmployee.getEmail().equals(email) && existingEmployee.getImage().equals(image)) {
            request.setAttribute("errorMessage", "No data to update.");
            request.setAttribute("name", name);
            request.setAttribute("email", email);
            request.setAttribute("image", image);
            request.setAttribute("id", idParam);
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }
       
        Employee updatedEmployee = new Employee();
        updatedEmployee.setId(id);
        updatedEmployee.setName(name);
        updatedEmployee.setEmail(email);
        updatedEmployee.setImage(image);
        updatedEmployee.setCreatedBy(userId);
        
        try {
            employeeDAO.updateEmployee(conn, updatedEmployee);
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+updated+successfully.");
        } catch (SQLException ex) {
            if (ex.getMessage().equals("No_data_updated")) {
                request.setAttribute("errorMessage", "No data updated.");
            } else {
                request.setAttribute("errorMessage", "Error updating employee: " + ex.getMessage());
            }
            request.setAttribute("employee", updatedEmployee);
            request.setAttribute("name", updatedEmployee.getName());
            request.setAttribute("email", updatedEmployee.getEmail());
            request.setAttribute("image", updatedEmployee.getImage());
            request.setAttribute("id", String.valueOf(updatedEmployee.getId()));
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
        }
   }
 
    
    private void deleteEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId) 
    		throws SQLException, ServletException, IOException {
        int idToDelete = Integer.parseInt(request.getParameter("id"));

        try {
            employeeDAO.deleteEmployee(conn, idToDelete, userId); 
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+deleted+successfully.");
        } catch (SQLException ex) {
        	 response.sendRedirect("EmployeeServlet?action=list&message=failed&text=Error+adding+employee:" + ex.getMessage());
        }
    }
}

============================  03. DAO (dao.EmployeeDAO.java) ======================================
package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Employee;

public class EmployeeDAO {
    public List<Employee> getAllEmployees(Connection conn, int loggedInUserId) throws SQLException { 
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees WHERE created_by = ?"; 
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, loggedInUserId); // Filter by the logged-in user
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Employee emp = new Employee();
                    emp.setId(rs.getInt("id"));
                    emp.setName(rs.getString("name"));
                    emp.setEmail(rs.getString("email"));
                    emp.setImage(rs.getString("image"));
                    emp.setCreatedBy(rs.getInt("created_by"));
                    employees.add(emp);
                }
            }
        }
        return employees;
    }

    public Employee getEmployeeById(Connection conn, int id) throws SQLException { 
        String sql = "SELECT * FROM employees WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Employee emp = new Employee();
                    emp.setId(rs.getInt("id"));
                    emp.setName(rs.getString("name"));
                    emp.setEmail(rs.getString("email"));
                    emp.setImage(rs.getString("image"));
                    emp.setCreatedBy(rs.getInt("created_by"));
                    return emp;
                }
            }
        }
        return null;
    }

    public void addEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "INSERT INTO employees (name, email, image, created_by) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, emp.getName());
            ps.setString(2, emp.getEmail());
            ps.setString(3, emp.getImage());
            ps.setInt(4, emp.getCreatedBy()); 
            ps.executeUpdate();
        }
    }

    public void updateEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "UPDATE employees SET name=?, email=?, image=? WHERE id=? AND created_by=?"; 
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, emp.getName());
            ps.setString(2, emp.getEmail());
            ps.setString(3, emp.getImage());
            ps.setInt(4, emp.getId());
            ps.setInt(5, emp.getCreatedBy()); 
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated == 0) {
                throw new SQLException("No_data_updated"); 
            }
        }
    }

    public void deleteEmployee(Connection conn, int id, int createdBy) throws SQLException {
        String sql = "DELETE FROM employees WHERE id=? AND created_by=?"; 
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.setInt(2, createdBy); 
            ps.executeUpdate();
        }
    }

    public boolean isEmailExists(Connection conn, String email) throws SQLException {
        String sql = "SELECT COUNT(*) FROM employees WHERE email = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }
}


================================================ login.jsp ==============================
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Login Form</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom CSS to center the form */
        html, body {
            height: 100%;
        }
        .container {
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .login-form {
            width: 100%;
            max-width: 400px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="login-form">
            <h2 class="text-center mb-4">Login</h2>
            <c:if test="${not empty errorMessage}">
        	<div class="alert alert-danger">${errorMessage}</div>
    		</c:if>


		    <form action="LoginServlet" method="post"> <%-- Create a LoginServlet --%>
		        <div class="mb-3">
		            <label for="username" class="form-label">Username:</label>
		            <input type="text" class="form-control" id="username" name="username">
		        </div>
		        <div class="mb-3">
		            <label for="password" class="form-label">Password:</label>
		            <input type="password" class="form-control" id="password" name="password">
		        </div>
		        <button type="submit" class="btn btn-primary">Login</button>
		    </form>
    
        </div>
    </div>

    <!-- Bootstrap 5 JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
</body>
</html>



=================================== employee_list.jsp ====================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Employee List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
   <br><br>
    <h1>Employee List</h1>
   <br><br>

 <c:if test="${not empty message}">
    <div class="${message == 'success' ? 'text-success' : 'text-danger'}">
        <c:out value="${messageText}"/>
    </div>
</c:if>

  <c:if test="${not empty errorMessage}">
       <div class="alert alert-danger">${errorMessage}</div>
</c:if>

    <a href="employee_form.jsp" class="btn btn-success">Add Employee</a> |
    <a href="LoginServlet?action=logout" class="btn btn-primary">Logout</a> <br><br>

    <table class="table table-bordered">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Image</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        <c:choose>
            <c:when test="${empty employees}">
                <tr>
                    <td colspan="5" class="text-center">You do not have any entry yet.</td>
                </tr>
            </c:when>
            <c:otherwise>
                <c:forEach var="employee" items="${employees}">
                    <tr>
                        <td>${employee.id}</td>
                        <td>${employee.name}</td>
                        <td>${employee.email}</td>
                        <td><img src="${employee.image}" alt="Employee Image" width="50"></td>
                        <td>
                            <a href="EmployeeServlet?action=updateForm&id=${employee.id}" class="btn btn-sm btn-warning">Update</a>
                            <a href="EmployeeServlet?action=delete&id=${employee.id}" class="btn btn-sm btn-danger">Delete</a>
                        </td>
                    </tr>
                </c:forEach>
            </c:otherwise>
        </c:choose>
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

========================== update_form.jsp ============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Update Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Update Employee</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <form action="EmployeeServlet?action=update" method="post">
       <input type="hidden" name="id" value="${not empty id ? id : employee.id}">
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <input type="text" class="form-control" id="name" name="name" value="${not empty name ? name : employee.name}">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" class="form-control" id="email" name="email" value="${not empty email ? email : employee.email}">
        </div>
        <div class="mb-3">
            <label for="image" class="form-label">Image URL/Path:</label>
            <input type="text" class="form-control" id="image" name="image" value="${not empty image ? image : employee.image}">
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
        <a href="EmployeeServlet?action=list" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

========================== employee_form.jsp (add new employee) ============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Create Employee</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Create Employee</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <form action="EmployeeServlet?action=create" method="post">       
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <input type="text" class="form-control" id="name" name="name" value="${not empty name ? name : ''}">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" class="form-control" id="email" name="email" value="${not empty email ? email : ''}">
        </div>
        <div class="mb-3">
            <label for="image" class="form-label">Image URL/Path:</label>
            <input type="text" class="form-control" id="image" name="image" value="${not empty image ? image : ''}">
        </div>
        <button type="submit" class="btn btn-primary">create</button>
        <a href="EmployeeServlet?action=list" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>












-
