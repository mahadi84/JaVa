
create for the Java Eclipse web application:
 01. SQL QUERY for Employee database and table with ID, name, email, and image fields. And Database Connection Class.
 02. Model
 03. DAO, a single HTTP Servlet as Controller to handle create, read, update, and delete requests for employee with Bootstrap 5  as UI for login form and table to login, insert, update, and delete data 
     that fulfill the below conditions:
     -Prevent duplicate email entry. If so, show message "Already exist"
     -It can delete or update data only who entered it with session
     -If there is no NEW data to update, show "No data updated".
     -Only logged-in users can access the crud page.
Note: All success and error messages will show on respective Bootstrap 5 pages


=========================================== SQL ==================================================

CREATE DATABASE IF NOT EXISTS employee_db;

USE employee_db;

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,  -- Enforces unique emails
    image VARCHAR(255),  -- Store image path/URL
    user_id INT, -- Foreign key referencing the users table (for ownership/access control)
    FOREIGN KEY (user_id) REFERENCES users(id) -- Assuming you have a 'users' table
);

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL -- Store securely (hashed)
);


=========================================== DB_Connection ===========================================
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/employee_db";
    private static final String USER = "your_mysql_user"; // Replace with your MySQL username
    private static final String PASSWORD = "your_mysql_password"; // Replace with your MySQL password

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL Connector/J driver
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("MySQL JDBC Driver not found", e);
        }
    }
}

=========================================== 02. Model ==================================================
public class Employee {

    private int id;
    private String name;
    private String email;
    private String image;
    private int userId; // Add user_id field

    // Constructors (Important: Include a no-argument constructor)
    public Employee() {} // No-argument constructor is essential for many frameworks (e.g., Spring)

    public Employee(String name, String email, String image, int userId) {
        this.name = name;
        this.email = email;
        this.image = image;
        this.userId = userId;
    }

    // Getters and Setters (for all fields)
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    // Optional: Override toString() for debugging/logging
    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", image='" + image + '\'' +
                ", userId=" + userId +
                '}';
    }

    // Optional: Override equals() and hashCode() if you'll be using this object in collections
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Employee employee = (Employee) obj;
        return id == employee.id && userId == employee.userId && java.util.Objects.equals(name, employee.name) && java.util.Objects.equals(email, employee.email) && java.util.Objects.equals(image, employee.image);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(id, name, email, image, userId);
    }
}

===================================  03. login_process.jsp (Login Processing) DAO  for CRUD =======================================


============================== // login.jsp (Login Form) ====================================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Login</h1>
    <c:if test="<span class="math-inline">\{errorMessage \!\= null\}"\>
<div class\="alert alert\-danger"\></span>{errorMessage}</div>
    </c:if>
    <form action="login_process.jsp" method="post">
        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <input type="text" class="form-control" id="username" name="username" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




