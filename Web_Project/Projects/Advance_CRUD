

create for the Java Eclipse web application:
01. SQL QUERY for Employee database and table with ID, name, email, and image fields. And Database Connection Class.
02. Model
03. DAO, a single HTTP Servlet as Controller to handle create, read, update, and delete requests for employee with Bootstrap 5 as UI for login, insert, update, and delete data 
that fulfill the below conditions:
    -Validate input field and Prevent duplicate email entry. If so, show message "Already exist"
    -It can delete or update data only who entered it with session
    -If there is no NEW data to update, show "No data updated".
    -Only logged-in users can access the crud page.
Note: All success and error messages will show on respective Bootstrap 5 pages





===================== SQL Query to Create Database and Table ==============================
CREATE DATABASE EmployeeDB;
USE EmployeeDB;
CREATE TABLE Employee (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    image LONGBLOB
);

========================= DBConnection.java ===========================================
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/EmployeeDB";
    private static final String USER = "root"; // Replace with your MySQL username
    private static final String PASSWORD = "password"; // Replace with your MySQL password

    public static Connection getConnection() {
        Connection connection = null;
        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Establish the connection
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }
}


================================== Employee.java ================================================
public class Employee {
    private int id;
    private String name;
    private String email;
    private byte[] image;

    // Default Constructor
    public Employee() {}

    // Parameterized Constructor
    public Employee(int id, String name, String email, byte[] image) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.image = image;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }
}


==================================== EmployeeDAO.java ==============================================
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class EmployeeDAO {

    // Add a new employee
    public String addEmployee(Employee employee) {
        String query = "INSERT INTO Employee (name, email, image) VALUES (?, ?, ?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            // Check for duplicate email
            if (isEmailExists(employee.getEmail())) {
                return "Already exist";
            }
            ps.setString(1, employee.getName());
            ps.setString(2, employee.getEmail());
            ps.setBytes(3, employee.getImage());
            ps.executeUpdate();
            return "Employee added successfully";
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error adding employee";
        }
    }

    // Update an employee
    public String updateEmployee(Employee employee, String loggedInUserEmail) {
        String query = "UPDATE Employee SET name = ?, email = ?, image = ? WHERE ID = ? AND email = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            // Check if the logged-in user is the one who created the record
            if (!isCreatedByUser(employee.getId(), loggedInUserEmail)) {
                return "Unauthorized to update this record";
            }
            // Check if there are changes to update
            Employee existingEmployee = getEmployeeById(employee.getId());
            if (existingEmployee.getName().equals(employee.getName()) &&
                existingEmployee.getEmail().equals(employee.getEmail()) &&
                existingEmployee.getImage() == employee.getImage()) {
                return "No data updated";
            }
            ps.setString(1, employee.getName());
            ps.setString(2, employee.getEmail());
            ps.setBytes(3, employee.getImage());
            ps.setInt(4, employee.getId());
            ps.setString(5, loggedInUserEmail);
            ps.executeUpdate();
            return "Employee updated successfully";
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error updating employee";
        }
    }

    // Delete an employee
    public String deleteEmployee(int id, String loggedInUserEmail) {
        String query = "DELETE FROM Employee WHERE ID = ? AND email = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            // Check if the logged-in user is the one who created the record
            if (!isCreatedByUser(id, loggedInUserEmail)) {
                return "Unauthorized to delete this record";
            }
            ps.setInt(1, id);
            ps.setString(2, loggedInUserEmail);
            ps.executeUpdate();
            return "Employee deleted successfully";
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error deleting employee";
        }
    }

    // Get employee by ID
    public Employee getEmployeeById(int id) {
        String query = "SELECT * FROM Employee WHERE ID = ?";
        Employee employee = null;
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                employee = new Employee();
                employee.setId(rs.getInt("ID"));
                employee.setName(rs.getString("name"));
                employee.setEmail(rs.getString("email"));
                employee.setImage(rs.getBytes("image"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return employee;
    }

    // Check if email already exists
    private boolean isEmailExists(String email) {
        String query = "SELECT * FROM Employee WHERE email = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Check if the record was created by the logged-in user
    private boolean isCreatedByUser(int id, String email) {
        String query = "SELECT * FROM Employee WHERE ID = ? AND email = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, id);
            ps.setString(2, email);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}


============================================ LoginServlet.java ===========================================================
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        // Validate login (dummy validation for demo)
        if ("user@example.com".equals(email) && "password".equals(password)) {
            HttpSession session = request.getSession();
            session.setAttribute("email", email);
            response.sendRedirect("crud.jsp");
        } else {
            request.setAttribute("message", "Invalid email or password");
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }
}


==================================== EmployeeServlet.java ==============================================
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebServlet("/employee")
public class EmployeeServlet extends HttpServlet {
    private EmployeeDAO employeeDAO = new EmployeeDAO();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        HttpSession session = request.getSession();
        String loggedInUserEmail = (String) session.getAttribute("email");

        if (loggedInUserEmail == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        switch (action) {
            case "add":
                String name = request.getParameter("name");
                String email = request.getParameter("email");
                byte[] image = request.getPart("image").getInputStream().readAllBytes();

                // Validate input data
                if (!ValidationUtil.isValidName(name)) {
                    request.setAttribute("message", "Invalid name. Only alphabets and spaces are allowed.");
                } else if (!ValidationUtil.isValidEmail(email)) {
                    request.setAttribute("message", "Invalid email format.");
                } else if (!ValidationUtil.isValidImage(image)) {
                    request.setAttribute("message", "Invalid image. Only JPEG or PNG files are allowed.");
                } else {
                    Employee newEmployee = new Employee(0, name, email, image);
                    String addResult = employeeDAO.addEmployee(newEmployee);
                    request.setAttribute("message", addResult);
                }
                break;

            case "update":
                int id = Integer.parseInt(request.getParameter("id"));
                String updatedName = request.getParameter("name");
                String updatedEmail = request.getParameter("email");
                byte[] updatedImage = request.getPart("image").getInputStream().readAllBytes();

                // Validate input data
                if (!ValidationUtil.isValidName(updatedName)) {
                    request.setAttribute("message", "Invalid name. Only alphabets and spaces are allowed.");
                } else if (!ValidationUtil.isValidEmail(updatedEmail)) {
                    request.setAttribute("message", "Invalid email format.");
                } else if (!ValidationUtil.isValidImage(updatedImage)) {
                    request.setAttribute("message", "Invalid image. Only JPEG or PNG files are allowed.");
                } else {
                    Employee updatedEmployee = new Employee(id, updatedName, updatedEmail, updatedImage);
                    String updateResult = employeeDAO.updateEmployee(updatedEmployee, loggedInUserEmail);
                    request.setAttribute("message", updateResult);
                }
                break;

            case "delete":
                int deleteId = Integer.parseInt(request.getParameter("id"));
                String deleteResult = employeeDAO.deleteEmployee(deleteId, loggedInUserEmail);
                request.setAttribute("message", deleteResult);
                break;
        }
        request.getRequestDispatcher("crud.jsp").forward(request, response);
    }
}



=================================== ValidationUtil.java ===========================================================
public class ValidationUtil {

    // Validate name: Only alphabets and spaces allowed, minimum 2 characters
    public static boolean isValidName(String name) {
        if (name == null || name.trim().isEmpty()) {
            return false;
        }
        return name.matches("[a-zA-Z ]{2,}");
    }

    // Validate email: Basic email format validation
    public static boolean isValidEmail(String email) {
        if (email == null || email.trim().isEmpty()) {
            return false;
        }
        return email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");
    }

    // Validate image: Check if the file is an image (JPEG, PNG, etc.)
    public static boolean isValidImage(byte[] image) {
        if (image == null || image.length == 0) {
            return false;
        }
        // Check for common image file signatures
        return isJPEG(image) || isPNG(image);
    }

    // Check if the file is a JPEG image
    private static boolean isJPEG(byte[] image) {
        return image.length > 2 &&
               image[0] == (byte) 0xFF &&
               image[1] == (byte) 0xD8 &&
               image[2] == (byte) 0xFF;
    }

    // Check if the file is a PNG image
    private static boolean isPNG(byte[] image) {
        return image.length > 8 &&
               image[0] == (byte) 0x89 &&
               image[1] == (byte) 0x50 &&
               image[2] == (byte) 0x4E &&
               image[3] == (byte) 0x47 &&
               image[4] == (byte) 0x0D &&
               image[5] == (byte) 0x0A &&
               image[6] == (byte) 0x1A &&
               image[7] == (byte) 0x0A;
    }
}



======================================= login.jsp ===========================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Login</div>
                    <div class="card-body">

                        // <c:if test="${not empty message}">
                        // <div class="alert alert-danger" role="alert">
                        // ${message}
                        // </div>
                        // </c:if>
                                <%
                                String message = (String) request.getAttribute("message");
                                if (message != null && !message.isEmpty()) {
                                %>
                                <div class="alert alert-danger" role="alert">
                                <%= message %>
                                </div>
                                <%
                                }
                                %>

                        <form action="login" method="post">
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Login</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


======================================= crud.jsp ===========================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Employee Management</h2>
        <p class="text-success">${message}</p>
        <form action="employee" method="post" enctype="multipart/form-data">
            <input type="hidden" name="action" value="add">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">Image</label>
                <input type="file" class="form-control" id="image" name="image" required>
            </div>
            <button type="submit" class="btn btn-primary">Add Employee</button>
        </form>
        <hr>
        <h3>Employee List</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Fetch and display employees here -->
            </tbody>
        </table>
    </div>
</body>
</html>













-
