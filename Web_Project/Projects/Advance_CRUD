

create for the Java Eclipse web application:
01. SQL QUERY for Employee database and table with ID, name, email, and image fields. And Database Connection Class.
02. Model
03. DAO, a single HTTP Servlet as Controller to handle create, read, update, and delete requests for employee with Bootstrap 5 as UI for login, insert, update, and delete data 
that fulfill the below conditions:
    -Validate input field and Prevent duplicate email entry. If so, show message "Already exist"
    -It can delete or update data only who entered it with session
    -If there is no NEW data to update, show "No data updated".
    -Only logged-in users can access the crud page.
Note: All success and error messages will show on respective Bootstrap 5 pages


==============================================  01. SQL QUERY and Database Connection Class ========================================================================

CREATE DATABASE employee_db;
USE employee_db;

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
CREATE TABLE employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    image VARCHAR(255),
    created_by INT,       
    FOREIGN KEY (created_by) REFERENCES users(id) 
);

INSERT INTO users (username, password) VALUES
('user1', '123'), 
('user2', '123'); 


================================  Database Connection Class (db.DBConnection.java) ===================================
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/employee_db"; // Update with your DB details
    private static final String DB_USER = "your_db_user"; // Update
    private static final String DB_PASSWORD = "your_db_password"; // Update

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL Driver.  Change if needed.
            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("Database driver not found: " + e.getMessage());
        }
    }
}


=================================  02. Model (model.Employee.java) =============================
package model;

public class Employee {
    private int id;
    private String name;
    private String email;
    private String image; // Path/URL
    private int createdBy;

    // Getters and setters for all fields

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() {return name;}
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public  String getImage() {return image; }
    public void setImage( String image) { this.image = image; }

    public int getCreatedBy() {return createdBy; }
    public void setCreatedBy(int createdBy) { this.createdBy = createdBy; }
    
}

============================  03. DAO (dao.EmployeeDAO.java) ======================================
package dao;


import model.Employee;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDAO {
    public List<Employee> getAllEmployees(Connection conn) throws SQLException { // Get by user who created
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees WHERE created_by = ?"; // Or get all if needed
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            //ps.setInt(1, loggedInUserId); // Add this if filtering by user
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Employee emp = new Employee();
                    emp.setId(rs.getInt("id"));
                    emp.setName(rs.getString("name"));
                    emp.setEmail(rs.getString("email"));
                    emp.setImage(rs.getString("image"));
                    emp.setCreatedBy(rs.getInt("created_by"));
                    employees.add(emp);
                }
            }
        }
        return employees;
    }

    public Employee getEmployeeById(Connection conn, int id) throws SQLException { // For update
        String sql = "SELECT * FROM employees WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Employee emp = new Employee(); // ... set all fields.
                    return emp;
                }
            }
        }
        return null;
    }

    public void addEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "INSERT INTO employees (name, email, image, created_by) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            // ... set all parameters.  Get created_by from session.
            ps.executeUpdate();
        }
    }

    public void updateEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "UPDATE employees SET name=?, email=?, image=? WHERE id=? AND created_by=?"; // Important: created_by!
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
           // ... set all parameters. Get created_by from session.
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated == 0) {
                throw new SQLException("No data updated"); // Or handle in servlet
            }
        }
    }

    public void deleteEmployee(Connection conn, int id, int createdBy) throws SQLException {
        String sql = "DELETE FROM employees WHERE id=? AND created_by=?"; // Important: created_by!
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.setInt(2, createdBy); // From session
            ps.executeUpdate();
        }
    }

    public boolean isEmailExists(Connection conn, String email) throws SQLException {
        String sql = "SELECT COUNT(*) FROM employees WHERE email = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }
}


========================= Servlet (controller.EmployeeServlet.java) =============================
package controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

// ... other imports
import dao.EmployeeDAO;
import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Employee;


@WebServlet("/EmployeeServlet")
public class EmployeeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private EmployeeDAO employeeDAO;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) { action = "list"; } // Default
        HttpSession session = request.getSession(false); // Get session, but don't create if it doesn't exist

        if (session == null || session.getAttribute("userId") == null) { // Check login
            request.setAttribute("errorMessage", "Please log in to access this page.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            int userId = (int) session.getAttribute("userId"); // Get user ID from session

            switch (action) {
                case "list":
                    List<Employee> employees = employeeDAO.getAllEmployees(conn);
                    request.setAttribute("employees", employees);
                    request.getRequestDispatcher("employee_list.jsp").forward(request, response);
                    break;
                case "create":
                    // ... Get data from request parameters
                    Employee newEmployee = new Employee();
                    // ... set employee fields from parameters
                    if (employeeDAO.isEmailExists(conn, newEmployee.getEmail())) {
                        request.setAttribute("errorMessage", "Email already exists.");
                        request.getRequestDispatcher("employee_form.jsp").forward(request, response); // Redirect to form
                        return;
                    }
                    newEmployee.setCreatedBy(userId); // Set created_by
                    employeeDAO.addEmployee(conn, newEmployee);
                    response.sendRedirect("EmployeeServlet?action=list"); // Redirect to list
                    break;
                case "updateForm":
                    int idToUpdate = Integer.parseInt(request.getParameter("id"));
                    Employee employeeToUpdate = employeeDAO.getEmployeeById(conn, idToUpdate);
                    if (employeeToUpdate == null || employeeToUpdate.getCreatedBy() != userId) { // Check ownership
                        request.setAttribute("errorMessage", "You don't have permission to update this employee.");
                        request.getRequestDispatcher("EmployeeServlet?action=list").forward(request, response);
                        return;
                    }
                    request.setAttribute("employee", employeeToUpdate);
                    request.getRequestDispatcher("employee_form.jsp").forward(request, response);
                    break;
                case "update":
                    // ... Get updated data from request parameters
                    Employee updatedEmployee = new Employee();
                    // ... set employee fields from parameters
                    updatedEmployee.setId(Integer.parseInt(request.getParameter("id")));
                    updatedEmployee.setCreatedBy(userId); // Important: from session!
                    try {
                        employeeDAO.updateEmployee(conn, updatedEmployee);
                        response.sendRedirect("EmployeeServlet?action=list");
                    } catch (SQLException ex) {
                        if (ex.getMessage().equals("No data updated")) {
                            request.setAttribute("errorMessage", "No data updated.");
                        } else {
                            request.setAttribute("errorMessage", "Error updating employee: " + ex.getMessage());
                        }
                        request.setAttribute("employee", updatedEmployee); // Send back to form with error
                        request.getRequestDispatcher("employee_form.jsp").forward(request, response);
                    }
                    break;
                case "delete":
                    int idToDelete = Integer.parseInt(request.getParameter("id"));
                    try {
                        employeeDAO.deleteEmployee(conn, idToDelete, userId); // Use userId from session
                        response.sendRedirect("EmployeeServlet?action=list");
                    } catch (SQLException ex) {
                        request.setAttribute("errorMessage", "Error deleting employee: " + ex.getMessage());
                        request.getRequestDispatcher("EmployeeServlet?action=list").forward(request, response);
                    }
                    break;
                default:
                    response.sendRedirect("EmployeeServlet?action=list");
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Log the error
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response); // Create an error page
        }
    }
}

==================================== controller.LoginServlet.java ======================================
package controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;


@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password"); // In real code, you would hash this before comparing

        try (Connection conn = DBConnection.getConnection()) {
            int userId = authenticateUser(conn, username, password);

            if (userId != -1) {
                HttpSession session = request.getSession();
                session.setAttribute("userId", userId);
                response.sendRedirect("EmployeeServlet?action=list");
            } else {
                request.setAttribute("errorMessage", "Invalid username or password.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }


    private int authenticateUser(Connection conn, String username, String password) throws SQLException {
        String sql = "SELECT id FROM users WHERE username = ? AND password = ?"; // Check username and password
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, password); // In real code, you would use the HASHED password here
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id"); // User found, return their ID
                }
            }
        }
        return -1; // User not found
    }
}



================================================ login.jsp ==============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Login</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <form action="LoginServlet" method="post"> <%-- Create a LoginServlet --%>
        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <input type="text" class="form-control" id="username" name="username" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




=================================== JSP Pages (employee_list.jsp) ====================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Employee List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Employee List</h1>

     <c:if test="${not empty errorMessage}">
         <div class="alert alert-danger">${errorMessage}</div>
     </c:if>

    <a href="employee_form.jsp" class="btn btn-primary">Add Employee</a> <br><br>

    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Image</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        <c:forEach var="employee" items="${employees}">
            <tr>
                <td>${employee.id}</td>
                <td>${employee.name}</td>
                <td>${employee.email}</td>
                <td><img src="${employee.image}" alt="Employee Image" width="50"></td>  <%-- Display image --%>
                <td>
                    <a href="EmployeeServlet?action=updateForm&id=${employee.id}" class="btn btn-sm btn-warning">Update</a>
                    <a href="EmployeeServlet?action=delete&id=${employee.id}" class="btn btn-sm btn-danger">Delete</a>
                </td>
            </tr>
        </c:forEach>
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


========================== employee_form.jsp (for both create and update) ============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Employee Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>${empty employee ? 'Add' : 'Update'} Employee</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

   
    <form action="EmployeeServlet?action=${empty employee ? 'create' : 'update'}" method="post">
        <input type="hidden" name="id" value="${employee.id}"> <%-- Hidden field for update --%>
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <input type="text" class="form-control" id="name" name="name" value="${employee.name}" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" class="form-control" id="email" name="email" value="${employee.email}" required>
        </div>
        <div class="mb-3">
            <label for="image" class="form-label">Image URL/Path:</label>
            <input type="text" class="form-control" id="image" name="image" value="${employee.image}">
        </div>
        <button type="submit" class="btn btn-primary">${empty employee ? 'Create' : 'Update'}</button>
        <a href="EmployeeServlet?action=list" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>












-
