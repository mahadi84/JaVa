

create for the Java Eclipse web application:
01. SQL QUERY for Employee database and table with ID, name, email, and image fields. And Database Connection Class.
02. Model
03. DAO, a single HTTP Servlet as Controller to handle create, read, update, and delete requests for employees with Bootstrap 5 as UI for login, insert, update, and delete data 
that fulfill the below conditions:
    -Validate input field and prevent duplicate email entries. If so, show the message "Already exist"
    -It can delete or update data only who entered it with the session
    -If there is no NEW data to update, show "No data updated".
    -I want to upload an image of the employee in a customized folder with a maximum 200KB and only png and jpeg format 
	and the image is updatable while employee info is updated while customizing
    -Only logged-in users can access the crud page.
Note: All success and error messages will show on respective Bootstrap 5 pages

---------------------------- Things that I've learned ----------------------------
How to:
1> Separte GET/POST request in LoginServlet
2> Validate: -If the field is having space or empty or null
          -If the user exits into the database
3> Create a session and forward it to other Servlet

4> Check 
	- Request: -if it GET/POST
	- Redirect if not logged-in user.
	- If the action is empty then
	- Use a Switch statement for what if the action is a list/add/edit form/update/delete
5> CRUD
	- Input VALIDATION (Name must be Letter and . only and Email must be right format)
	- Return filed data while filling blank any field while UPDATING
	- Show the message "No data to update" in Bootstrap file while nothing changes in the UPDATE field


============================================= Project Structure =================================================
 Project Structure (Eclipse 2024):
 - Dynamic Web Project: Advane_CRUD
   - src/main/java:
     - dao:
           - EmployeeDAO.java
     - model:
           - Employeer.java
     - servlet:
           - LoginServlet.java
           - EmployeeServlet.java
     - db:
           - DBConnection.java
   - src/main/webapp:
         - login.jsp
         - employee_list.jsp
         - update_form.jsp
         - employee_form.jsp
     - WEB-INF:
         - web.xml



==============================================  01. SQL QUERY and Database Connection Class ========================================================================

CREATE DATABASE employee_db;
USE employee_db;

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
CREATE TABLE employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    image VARCHAR(255),
    created_by INT,       
    FOREIGN KEY (created_by) REFERENCES users(id) 
);

INSERT INTO users (username, password) VALUES
('user1', '123'), 
('user2', '123'); 

INSERT INTO employees (name, email, image, created_by)
VALUES ('John Doe', 'john.doe@example.com', 'john.jpg', 1);

INSERT INTO employees (name, email, image, created_by)
VALUES ('Mahadi', 'm@example.com', 'john.jpg', 2);


================================  Database Connection Class (db.DBConnection.java) ===================================
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/employee_db"; // Update with your DB details
    private static final String DB_USER = "your_db_user"; // Update
    private static final String DB_PASSWORD = "your_db_password"; // Update

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL Driver.  Change if needed.
            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("Database driver not found: " + e.getMessage());
        }
    }
}


=================================  02. Model (model.Employee.java) =============================
package model;

public class Employee {
    private int id;
    private String name;
    private String email;
    private String image; // Path/URL
    private int createdBy;

    // Getters and setters for all fields

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() {return name;}
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public  String getImage() {return image; }
    public void setImage( String image) { this.image = image; }

    public int getCreatedBy() {return createdBy; }
    public void setCreatedBy(int createdBy) { this.createdBy = createdBy; }  
}


==================================== Servlet (controller.LoginServlet.java) ======================================
package controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("logout".equals(action)) {
            logout(request, response);
        } else {
            login(request, response);
        }
    }

    private void login(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Username and password are required.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            int userId = authenticateUser(conn, username, password);

            if (userId != -1) {
                HttpSession session = request.getSession();
                session.setAttribute("userId", userId);
                response.sendRedirect("EmployeeServlet?action=list");
            } else {
                request.setAttribute("errorMessage", "Invalid username or password.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }

    private void logout(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        response.sendRedirect("login.jsp");
    }

    private int authenticateUser(Connection conn, String username, String password) throws SQLException {
        String sql = "SELECT id FROM users WHERE username = ? AND password = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id");
                }
            }
        }
        return -1;
    }
}



========================= Servlet (controller.EmployeeServlet.java) =============================
package controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.regex.Pattern;

import dao.EmployeeDAO;
import db.DBConnection;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;
import model.Employee;

@WebServlet("/EmployeeServlet")
@MultipartConfig(maxFileSize = 200 * 1024, // 200KB
                 location = "/temp") // Temporary location for file upload
public class EmployeeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private EmployeeDAO employeeDAO;
    private String uploadDirectory;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
        // Define the upload directory relative to the web application context
        uploadDirectory = getServletContext().getRealPath("/uploads");
        File uploadsDir = new File(uploadDirectory);
        if (!uploadsDir.exists()) {
            uploadsDir.mkdirs();
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            action = "list";
        }

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("userId") == null) {
            request.setAttribute("errorMessage", "Please log in to access this page.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            int userId = (int) session.getAttribute("userId");

            switch (action) {
                case "list":
                    listEmployees(request, response, conn, userId);
                    break;
                case "create":
                    createEmployee(request, response, conn, userId);
                    break;
                case "updateForm":
                    showUpdateForm(request, response, conn, userId);
                    break;
                case "update":
                    updateEmployee(request, response, conn, userId);
                    break;
                case "delete":
                    deleteEmployee(request, response, conn, userId);
                    break;
                default:
                    response.sendRedirect("EmployeeServlet?action=list");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Database error: " + e.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
    }

    private void listEmployees(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        List<Employee> employees = employeeDAO.getAllEmployees(conn, userId); // Pass userId here
        request.setAttribute("employees", employees);

        String message = request.getParameter("message");
        String text = request.getParameter("text");

        if (message != null && !message.isEmpty()) {
            request.setAttribute("message", message);
            request.setAttribute("messageText", text);
        }
        request.getRequestDispatcher("employee_list.jsp").forward(request, response);
    }

    private void createEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        Part filePart = request.getPart("image"); // Get the uploaded file part
        String imageName = null;

        String errorMessage = null;

        if (name == null || name.trim().isEmpty()) {
            errorMessage = "Name is required.";
        } else if (!Pattern.matches("^[a-zA-Z\\s.]+$", name)) {
            errorMessage =  "Name can only contain letters, spaces, and periods.";
        } else if (email == null || email.trim().isEmpty()) {
            errorMessage =  "Email is required.";
        } else if (!Pattern.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", email)) {
            errorMessage =  "Invalid email format.";
        } else if (filePart == null || filePart.getSize() == 0) {
            errorMessage = "Image file is required.";
        } else {
            String contentType = filePart.getContentType();
            if (contentType == null || (!contentType.equalsIgnoreCase("image/png") && !contentType.equalsIgnoreCase("image/jpeg"))) {
                errorMessage = "Only PNG and JPEG image formats are allowed.";
            } else if (filePart.getSize() > 200 * 1024) {
                errorMessage = "Image file size cannot exceed 200KB.";
            } else {
                // Generate a unique file name
                String submittedFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
                String fileExtension = "";
                int dotIndex = submittedFileName.lastIndexOf('.');
                if (dotIndex > 0 && dotIndex < submittedFileName.length() - 1) {
                    fileExtension = submittedFileName.substring(dotIndex);
                }
                imageName = "emp_" + System.currentTimeMillis() + "_" + userId + fileExtension;
                File uploadFile = new File(uploadDirectory, imageName);
                try (InputStream fileContent = filePart.getInputStream()) {
                    Files.copy(fileContent, uploadFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException e) {
                    errorMessage = "Error uploading image: " + e.getMessage();
                    e.printStackTrace();
                }
            }
        }

        if (errorMessage != null) {
            request.setAttribute("errorMessage", errorMessage);
            request.setAttribute("name", name);
            request.setAttribute("email", email);
            request.getRequestDispatcher("employee_form.jsp").forward(request, response);
            return;
        }

        Employee newEmployee = new Employee();
        newEmployee.setName(name);
        newEmployee.setEmail(email);
        newEmployee.setImage(imageName); // Store the filename in the database

        if (employeeDAO.isEmailExists(conn, newEmployee.getEmail())) {
            // Delete the uploaded file if email already exists
            if (imageName != null) {
                File fileToDelete = new File(uploadDirectory, imageName);
                fileToDelete.delete();
            }
            request.setAttribute("errorMessage", "Email already exists.");
            request.setAttribute("name", name);
            request.setAttribute("email", email);
            request.getRequestDispatcher("employee_form.jsp").forward(request, response);
            return;
        }

        newEmployee.setCreatedBy(userId);
        try {
            employeeDAO.addEmployee(conn, newEmployee);
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+added+successfully.");
        } catch (SQLException ex) {
            // Delete the uploaded file if database insertion fails
            if (imageName != null) {
                File fileToDelete = new File(uploadDirectory, imageName);
                fileToDelete.delete();
            }
            response.sendRedirect("EmployeeServlet?action=list&message=failed&text=Error+adding+employee:" + ex.getMessage());
            // Optionally log the exception: logger.error("Error adding employee", ex);
        }

    }

    private void showUpdateForm(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        int idToUpdate = Integer.parseInt(request.getParameter("id"));
        Employee employeeToUpdate = employeeDAO.getEmployeeById(conn, idToUpdate);

        if (employeeToUpdate == null || employeeToUpdate.getCreatedBy() != userId) {
            request.setAttribute("errorMessage", "You don't have permission to update this employee.");
            request.getRequestDispatcher("EmployeeServlet?action=list").forward(request, response);
            return;
        }

        request.setAttribute("employee", employeeToUpdate);
        request.getRequestDispatcher("update_form.jsp").forward(request, response);
    }


    private void updateEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        String idParam = request.getParameter("id");

        if (idParam == null || idParam.trim().isEmpty()) {
            request.setAttribute("errorMessage", "Employee ID is missing.");
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }

        int id;
        try {
            id = Integer.parseInt(idParam);
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Invalid Employee ID.");
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }


        String name = request.getParameter("name");
        String email = request.getParameter("email");
        Part filePart = request.getPart("image"); // Get the uploaded file part
        String newImageName = null;

        // Get the existing employee data
        Employee existingEmployee = employeeDAO.getEmployeeById(conn, id);
        if (existingEmployee == null || existingEmployee.getCreatedBy() != userId) {
            request.setAttribute("errorMessage", "You don't have permission to update this employee.");
            request.getRequestDispatcher("EmployeeServlet?action=list").forward(request, response);
            return;
        }
        String oldImageName = existingEmployee.getImage();

        String errorMessage = null;

        if (name == null || name.trim().isEmpty()) {
            errorMessage = "Name is required.";
        } else if (!Pattern.matches("^[a-zA-Z\\s.]+$", name)) {
            errorMessage =  "Name can only contain letters, spaces, and periods.";
        } else if (email == null || email.trim().isEmpty()) {
            errorMessage =  "Email is required.";
        } else if (!Pattern.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", email)) {
            errorMessage =  "Invalid email format.";
        } else if (filePart != null && filePart.getSize() > 0) {
            String contentType = filePart.getContentType();
            if (contentType == null || (!contentType.equalsIgnoreCase("image/png") && !contentType.equalsIgnoreCase("image/jpeg"))) {
                errorMessage = "Only PNG and JPEG image formats are allowed.";
            } else if (filePart.getSize() > 200 * 1024) {
                errorMessage = "Image file size cannot exceed 200KB.";
            } else {
                // Generate a unique file name for the new image
                String submittedFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
                String fileExtension = "";
                int dotIndex = submittedFileName.lastIndexOf('.');
                if (dotIndex > 0 && dotIndex < submittedFileName.length() - 1) {
                    fileExtension = submittedFileName.substring(dotIndex);
                }
                newImageName = "emp_" + System.currentTimeMillis() + "_" + userId + fileExtension;
                File uploadFile = new File(uploadDirectory, newImageName);
                try (InputStream fileContent = filePart.getInputStream()) {
                    Files.copy(fileContent, uploadFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    // Delete the old image if a new one is uploaded
                    if (oldImageName != null && !oldImageName.isEmpty()) {
                        File oldFile = new File(uploadDirectory, oldImageName);
                        oldFile.delete();
                    }
                } catch (IOException e) {
                    errorMessage = "Error uploading new image: " + e.getMessage();
                    e.printStackTrace();
                    // Revert newImageName to null as upload failed
                    newImageName = null;
                }
            }
        }

        if (errorMessage != null) {
            request.setAttribute("errorMessage", errorMessage);
            request.setAttribute("employee", existingEmployee); // Repopulate with existing data
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
            return;
        }

        Employee updatedEmployee = new Employee();
        updatedEmployee.setId(id);
        updatedEmployee.setName(name);
        updatedEmployee.setEmail(email);
        // Set the new image name if a new file was uploaded, otherwise keep the old one
        updatedEmployee.setImage(newImageName != null ? newImageName : oldImageName);
        updatedEmployee.setCreatedBy(userId);

        try {
            employeeDAO.updateEmployee(conn, updatedEmployee);
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+updated+successfully.");
        } catch (SQLException ex) {
            // Delete the newly uploaded file if database update fails
            if (newImageName != null) {
                File fileToDelete = new File(uploadDirectory, newImageName);
                fileToDelete.delete();
            }
            if (ex.getMessage().equals("No_data_updated")) {
                request.setAttribute("errorMessage", "No data updated.");
            } else {
                request.setAttribute("errorMessage", "Error updating employee: " + ex.getMessage());
            }
            request.setAttribute("employee", updatedEmployee);
            request.getRequestDispatcher("update_form.jsp").forward(request, response);
        }
    }


    private void deleteEmployee(HttpServletRequest request, HttpServletResponse response, Connection conn, int userId)
            throws SQLException, ServletException, IOException {
        int idToDelete = Integer.parseInt(request.getParameter("id"));

        // Get the employee to delete to retrieve the image name
        Employee employeeToDelete = employeeDAO.getEmployeeById(conn, idToDelete);

        try {
            boolean deleted = employeeDAO.deleteEmployee(conn, idToDelete, userId);
            if (deleted && employeeToDelete != null && employeeToDelete.getImage() != null && !employeeToDelete.getImage().isEmpty()) {
                // Delete the associated image file
                File fileToDelete = new File(uploadDirectory, employeeToDelete.getImage());
                fileToDelete.delete();
            }
            response.sendRedirect("EmployeeServlet?action=list&message=success&text=Employee+deleted+successfully.");
        } catch (SQLException ex) {
            response.sendRedirect("EmployeeServlet?action=list&message=failed&text=Error+deleting+employee:" + ex.getMessage());
        }
    }
 
    
}

============================  03. DAO (dao.EmployeeDAO.java) ======================================
package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Employee;

public class EmployeeDAO {
    public List<Employee> getAllEmployees(Connection conn, int loggedInUserId) throws SQLException {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT id, name, email, image, created_by FROM employees WHERE created_by = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, loggedInUserId); // Filter by the logged-in user
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Employee emp = new Employee();
                    emp.setId(rs.getInt("id"));
                    emp.setName(rs.getString("name"));
                    emp.setEmail(rs.getString("email"));
                    emp.setImage(rs.getString("image"));
                    emp.setCreatedBy(rs.getInt("created_by"));
                    employees.add(emp);
                }
            }
        }
        return employees;
    }

    public Employee getEmployeeById(Connection conn, int id) throws SQLException {
        String sql = "SELECT id, name, email, image, created_by FROM employees WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Employee emp = new Employee();
                    emp.setId(rs.getInt("id"));
                    emp.setName(rs.getString("name"));
                    emp.setEmail(rs.getString("email"));
                    emp.setImage(rs.getString("image"));
                    emp.setCreatedBy(rs.getInt("created_by"));
                    return emp;
                }
            }
        }
        return null;
    }

    public void addEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "INSERT INTO employees (name, email, image, created_by) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, emp.getName());
            ps.setString(2, emp.getEmail());
            ps.setString(3, emp.getImage());
            ps.setInt(4, emp.getCreatedBy());
            ps.executeUpdate();
        }
    }

    public void updateEmployee(Connection conn, Employee emp) throws SQLException {
        String sql = "UPDATE employees SET name=?, email=?, image=? WHERE id=? AND created_by=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, emp.getName());
            ps.setString(2, emp.getEmail());
            ps.setString(3, emp.getImage());
            ps.setInt(4, emp.getId());
            ps.setInt(5, emp.getCreatedBy());
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated == 0) {
                throw new SQLException("No_data_updated");
            }
        }
    }

    public boolean deleteEmployee(Connection conn, int id, int createdBy) throws SQLException {
        // First, retrieve the image filename to delete from the file system
        String getImageSql = "SELECT image FROM employees WHERE id=? AND created_by=?";
        String imageNameToDelete = null;
        try (PreparedStatement getImagePs = conn.prepareStatement(getImageSql)) {
            getImagePs.setInt(1, id);
            getImagePs.setInt(2, createdBy);
            try (ResultSet rs = getImagePs.executeQuery()) {
                if (rs.next()) {
                    imageNameToDelete = rs.getString("image");
                }
            }
        }

        // Then, delete the employee record
        String deleteSql = "DELETE FROM employees WHERE id=? AND created_by=?";
        int rowsDeleted = 0;
        try (PreparedStatement deletePs = conn.prepareStatement(deleteSql)) {
            deletePs.setInt(1, id);
            deletePs.setInt(2, createdBy);
            rowsDeleted = deletePs.executeUpdate();
        }

        // Return true if at least one row was deleted, false otherwise
        return rowsDeleted > 0;

        // Note: The actual file deletion from the file system should be handled in the Servlet.
        // This DAO only manages the database operation. Returning the imageName might be useful
        // if you want the Servlet to handle the file deletion explicitly.
        // You could modify this method to return the imageNameToDelete.
    }



    public boolean isEmailExists(Connection conn, String email) throws SQLException {
        String sql = "SELECT COUNT(*) FROM employees WHERE email = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }
}

================================================ login.jsp ==============================
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Login Form</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom CSS to center the form */
        html, body {
            height: 100%;
        }
        .container {
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .login-form {
            width: 100%;
            max-width: 400px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="login-form">
            <h2 class="text-center mb-4">Login</h2>
            <c:if test="${not empty errorMessage}">
        	<div class="alert alert-danger">${errorMessage}</div>
    		</c:if>


		    <form action="LoginServlet" method="post"> <%-- Create a LoginServlet --%>
		        <div class="mb-3">
		            <label for="username" class="form-label">Username:</label>
		            <input type="text" class="form-control" id="username" name="username">
		        </div>
		        <div class="mb-3">
		            <label for="password" class="form-label">Password:</label>
		            <input type="password" class="form-control" id="password" name="password">
		        </div>
		        <button type="submit" class="btn btn-primary">Login</button>
		    </form>
    
        </div>
    </div>

    <!-- Bootstrap 5 JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
</body>
</html>



=================================== employee_list.jsp ====================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Employee List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        $(document).ready(function() {
            $(".btn-danger").click(function(e) {
                e.preventDefault(); // Prevent the default link behavior
                var deleteUrl = $(this).attr("href"); // Get the delete URL

                if (confirm("Are you sure to delete?")) {
                    // If the user confirms, redirect to the delete URL
                    window.location.href = deleteUrl;
                } else {
                    // If the user cancels, do nothing
                }
            });
        });
    </script>
</head>
<body>
<div class="container">
    <br><br>
    <h1>Employee List</h1>
    <br><br>

    <c:if test="${not empty message}">
        <div class="${message == 'success' ? 'text-success' : 'text-danger'}">
            <c:out value="${messageText}"/>
        </div>
    </c:if>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <a href="employee_form.jsp" class="btn btn-success">Add Employee</a> |
    <a href="LoginServlet?action=logout" class="btn btn-primary">Logout</a> <br><br>

    <table class="table table-bordered">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Image</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        <c:choose>
            <c:when test="${empty employees}">
                <tr>
                    <td colspan="5" class="text-center">You do not have any entry yet.</td>
                </tr>
            </c:when>
            <c:otherwise>
                <c:forEach var="employee" items="${employees}">
                    <tr>
                        <td>${employee.id}</td>
                        <td>${employee.name}</td>
                        <td>${employee.email}</td>
                        <td>
                            <c:if test="${not empty employee.image}">
                                <img src="${pageContext.request.contextPath}/uploads/${employee.image}" alt="Image" width="50">
                            </c:if>
                            <c:if test="${empty employee.image}">
                                No Image
                            </c:if>
                        </td>
                        <td>
                            <a href="EmployeeServlet?action=updateForm&id=${employee.id}" class="btn btn-sm btn-warning">Update</a>
                            <a href="EmployeeServlet?action=delete&id=${employee.id}" class="btn btn-sm btn-danger">Delete</a>
                        </td>
                    </tr>
                </c:forEach>
            </c:otherwise>
        </c:choose>
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
========================== update_form.jsp ============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Update Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Update Employee</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <form action="EmployeeServlet?action=update" method="post" enctype="multipart/form-data">
        <input type="hidden" name="id" value="${not empty id ? id : employee.id}">
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <input type="text" class="form-control" id="name" name="name" value="${not empty name ? name : employee.name}">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" class="form-control" id="email" name="email" value="${not empty email ? email : employee.email}">
        </div>

        <div class="mb-3">
            <label class="form-label">Current Image:</label><br>
            <c:if test="${not empty employee.image}">
                <img src="${pageContext.request.contextPath}/uploads/${employee.image}" alt="Current Employee Image" width="100">
            </c:if>
            <c:if test="${empty employee.image}">
                No current image.
            </c:if>
        </div>

        <div class="mb-3">
            <label for="image" class="form-label">Update Employee Image (PNG or JPEG, max 200KB, leave blank to keep existing):</label>
              <input type="file" class="form-control" id="image" name="image" accept=".png, .jpeg, .jpg" onchange="validateImageSize(this)">
			  <img id="imagePreview" src="#" alt="Image Preview" style="display: none;">
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <a href="EmployeeServlet?action=list" class="btn btn-secondary">Cancel</a>
    </form>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function previewImage(input) {
        const imagePreview = document.getElementById('imagePreview');
        if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            }

            reader.readAsDataURL(input.files[0]); // convert to base64 string
        } else {
            imagePreview.src = '#';
            imagePreview.style.display = 'none';
        }
    }
    
  //Image Size Validation on the browser
    function validateImageSize(input) {
        const maxSizeKB = 200; // Maximum size in KB
        const maxSizeBytes = maxSizeKB * 1024;
        const imagePreview = document.getElementById('imagePreview'); // Assuming you have an image preview element

        if (input.files && input.files[0]) {
            if (input.files[0].size > maxSizeBytes) {
                alert(`Image size exceeds the maximum allowed size of ${maxSizeKB}KB. Please choose a smaller image.`);
                input.value = ''; // Clear the file input
                imagePreview.src = '#'; // Clear the preview
                imagePreview.style.display = 'none';
                return false; // Prevent further processing (optional, as the input is cleared)
            } else {
                // Proceed with image preview (if you have it)
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                }
                reader.readAsDataURL(input.files[0]);
                return true;
            }
        } else {
            imagePreview.src = '#';
            imagePreview.style.display = 'none';
            return true;
        }
    }
</script>
</body>
</htm

========================== employee_form.jsp (add new employee) ============================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Create Employee</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #imagePreview {
            max-width: 200px;
            height: auto;
            margin-top: 10px;
            border: 1px solid #ccc;
            padding: 5px;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Create Employee</h1>

    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>

    <form action="EmployeeServlet?action=create" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <input type="text" class="form-control" id="name" name="name" value="${not empty name ? name : ''}">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" class="form-control" id="email" name="email" value="${not empty email ? email : ''}">
        </div>
        <div class="mb-3">
            <label for="image" class="form-label">Employee Image (PNG or JPEG, max 200KB):</label>
            <input type="file" class="form-control" id="image" name="image" accept=".png, .jpeg, .jpg" onchange="validateImageSize(this)">
			<img id="imagePreview" src="#" alt="Image Preview" style="display: none;">
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
        <a href="EmployeeServlet?action=list" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function previewImage(input) {
        const imagePreview = document.getElementById('imagePreview');
        if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            }

            reader.readAsDataURL(input.files[0]); // convert to base64 string
        } else {
            imagePreview.src = '#';
            imagePreview.style.display = 'none';
        }
    }
  
    
    //Image Size Validation on the browser
    function validateImageSize(input) {
        const maxSizeKB = 200; // Maximum size in KB
        const maxSizeBytes = maxSizeKB * 1024;
        const imagePreview = document.getElementById('imagePreview'); // Assuming you have an image preview element

        if (input.files && input.files[0]) {
            if (input.files[0].size > maxSizeBytes) {
                alert(`Image size exceeds the maximum allowed size of ${maxSizeKB}KB. Please choose a smaller image.`);
                input.value = ''; // Clear the file input
                imagePreview.src = '#'; // Clear the preview
                imagePreview.style.display = 'none';
                return false; // Prevent further processing (optional, as the input is cleared)
            } else {
                // Proceed with image preview (if you have it)
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                }
                reader.readAsDataURL(input.files[0]);
                return true;
            }
        } else {
            imagePreview.src = '#';
            imagePreview.style.display = 'none';
            return true;
        }
    }
</script>
</body>
</html>









-
