Date: 28-March-2025


I want to design an advanced Java e-commerce website,  aiming for a robust and well-structured application suitable for Eclipse 2024,
With the following logic:

"
-Homepage contains a paragraph of text
-Admin panel to add and upload products with images, price per quantity, total quantity, and publisher name. It will check all the orders as a list with a search option with order ID and show order details on click
-Admins can only see the message sent through the Contact Us page.

-The shopping cart page contains 
Functional Shopping Cart: 6 books as products (image, title, price, quantity). The cart page should display selected items, quantities, prices, and provide options for updating or removing items using jQuery.
-Server-side sessions or a database linked to user accounts are recommended for reliable order processing, especially if users leave and return.
-involves jQuery to dynamically adjust the cart display and potentially local storage or server-side logic to persist the cart data.
-Cart will be cleared once the order is successfully placed. 
-Quantity will be minus once the product is sold. If the quantity is empty product can not be selected.
-The user will register with name, email, and phone, and a login is required to complete the order
-After successful purchase/order payment amount will be stored in the table. Payment gateway is not recommended now, I will implement it later

-visually represent the "add to wishlist" functionality (using a font icon like Font Awesome or Bootstrap Icons, or a custom image) and how the jQuery will target and update its state when a user clicks it.
-also, A server-side wishlist across devices and user accounts functionalities with features like products from the wishlist can be removed, 
"



Create: SQL for Database and Table with CSRF protection, Database Connection Class, Models with separation  ----------------------model.(put model name here)--------------- and no gap in constructor, setter, and getter
Create: All necessary HttpServlets with CSRF protection with package servlet in a different file with servlet name title and use the try block to close the database connection automatically.
Create: All necessary DAOs with CSRF protection in a different file
Create: All necessary Frontend UI as Bootstrap 5, Jquery and Add CSRF protection with bootstrap file name.



--------------------------------------------------------------------------

--------------------------------------------------------------------------

===============================================================
your-bookstore/
├── pom.xml
└── src/
    ├── main/
    │   ├── java/
    │   │   └── com/yourbookstore/
    │   │       ├── admin/
    │   │       │   ├── controller/
    │   │       │   │   ├── AdminContactController.java // New
    │   │       │   │   ├── AdminOrderController.java
    │   │       │   │   └── AdminProductController.java
    │   │       │   └── service/
    │   │       │       ├── AdminContactService.java // New
    │   │       │       ├── AdminOrderService.java
    │   │       │       └── AdminProductService.java
    │   │       ├── config/
    │   │       │   ├── WebMvcConfig.java
    │   │       │   └── SecurityConfig.java
    │   │       ├── controller/
    │   │       │   ├── CartController.java
    │   │       │   ├── ContactController.java // Updated
    │   │       │   ├── HomeController.java
    │   │       │   ├── OrderController.java
    │   │       │   ├── UserController.java
    │   │       │   └── WishlistController.java
    │   │       ├── model/
    │   │       │   ├── Book.java
    │   │       │   ├── CartItem.java
    │   │       │   ├── ContactMessage.java // New
    │   │       │   ├── Order.java
    │   │       │   ├── OrderDetail.java
    │   │       │   ├── User.java
    │   │       │   └── WishlistItem.java
    │   │       ├── repository/
    │   │       │   ├── BookRepository.java
    │   │       │   ├── CartRepository.java
    │   │       │   ├── ContactMessageRepository.java // New
    │   │       │   ├── OrderDetailRepository.java
    │   │       │   ├── OrderRepository.java
    │   │       │   ├── UserRepository.java
    │   │       │   └── WishlistRepository.java
    │   │       ├── service/
    │   │       │   ├── BookService.java
    │   │       │   ├── CartService.java
    │   │       │   ├── ContactService.java // Updated
    │   │       │   ├── OrderService.java
    │   │       │   ├── UserService.java
    │   │       │   └── WishlistService.java
    │   │       └── validator/
    │   │           └── UserRegistrationValidator.java
    │   └── resources/
    │       ├── application.properties
    │       └── templates/
    │           ├── home.html
    │           ├── cart.html
    │           ├── wishlist.html
    │           ├── contact.html
    │           ├── register.html
    │           ├── login.html
    │           ├── order-success.html
    │           ├── admin/
    │           │   ├── dashboard.html
    │           │   ├── add-product.html
    │           │   ├── list-orders.html
    │           │   ├── order-details.html
    │           │   └── list-contacts.html // New
    └── webapp/ // If using JSPs
        ├── WEB-INF/
        │   ├── web.xml
        │   └── views/
        │       ├── home.jsp
        │       └── ...
        ├── css/
        │   ├── style.css
        │   └── admin.css
        ├── js/
        │   ├── script.js
        │   └── admin.js
        └── images/
            └── (book images)

========================== SQL ====================================

-- Database: your_bookstore (You can change this)
CREATE DATABASE IF NOT EXISTS your_bookstore;
USE your_bookstore;

-- Table: users
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: books
CREATE TABLE IF NOT EXISTS books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    image_url VARCHAR(255),
    total_quantity INT UNSIGNED NOT NULL DEFAULT 0,
    publisher VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: cart_items
CREATE TABLE IF NOT EXISTS cart_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    quantity INT UNSIGNED NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_book (user_id, book_id)
);

-- Table: wishlist_items
CREATE TABLE IF NOT EXISTS wishlist_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_book (user_id, book_id)
);

-- Table: orders
CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Table: order_details
CREATE TABLE IF NOT EXISTS order_details (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    book_id INT NOT NULL,
    quantity INT UNSIGNED NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE RESTRICT
);

-- Table: contact_messages
CREATE TABLE IF NOT EXISTS contact_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: csrf_tokens (For basic CSRF protection if not using a framework)
CREATE TABLE IF NOT EXISTS csrf_tokens (
    token VARCHAR(255) PRIMARY KEY,
    user_id INT,
    expiry TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

========================== DATABASE CONNECTION ====================================
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {

    private static final String URL = "jdbc:mysql://localhost:3306/bookstore_app";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("MySQL JDBC driver not found.", e);
        }
    }
}




========================== MODELS ====================================
-----------------------------model.User.java---------------------------

package model;

public class User {
    private int id;
    private String name;
    private String email;
    private String phone;
    private String password;

    public User(int id, String name, String email, String phone, String password) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.password = password;
    }
    public User(String name, String email, String phone, String password) {
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.password = password;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}
-----------------------------model.Book.java---------------------------

package model;

public class Book {
    private int id;
    private String title;
    private double price;
    private int quantity;
    private String publisher;
    private String imagePath;

    public Book(int id, String title, double price, int quantity, String publisher, String imagePath) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.quantity = quantity;
        this.publisher = publisher;
        this.imagePath = imagePath;
    }
    public Book(String title, double price, int quantity, String publisher, String imagePath) {
        this.title = title;
        this.price = price;
        this.quantity = quantity;
        this.publisher = publisher;
        this.imagePath = imagePath;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    public String getPublisher() { return publisher; }
    public void setPublisher(String publisher) { this.publisher = publisher; }
    public String getImagePath() { return imagePath; }
    public void setImagePath(String imagePath) { this.imagePath = imagePath; }
}
-----------------------------model.Order.java---------------------------

package model;

import java.sql.Timestamp;

public class Order {
    private int id;
    private int userId;
    private Timestamp orderDate;
    private double totalAmount;

    public Order(int id, int userId, Timestamp orderDate, double totalAmount) {
        this.id = id;
        this.userId = userId;
        this.orderDate = orderDate;
        this.totalAmount = totalAmount;
    }
    public Order(int userId, double totalAmount) {
        this.userId = userId;
        this.totalAmount = totalAmount;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public Timestamp getOrderDate() { return orderDate; }
    public void setOrderDate(Timestamp orderDate) { this.orderDate = orderDate; }
    public double getTotalAmount() { return totalAmount; }
    public void setTotalAmount(double totalAmount) { this.totalAmount = totalAmount; }
}
-----------------------------model.OrderItem.java---------------------------

package model;

public class OrderItem {
    private int id;
    private int orderId;
    private int bookId;
    private int quantity;
    private double price;

    public OrderItem(int id, int orderId, int bookId, int quantity, double price) {
        this.id = id;
        this.orderId = orderId;
        this.bookId = bookId;
        this.quantity = quantity;
        this.price = price;
    }
    public OrderItem(int orderId, int bookId, int quantity, double price) {
        this.orderId = orderId;
        this.bookId = bookId;
        this.quantity = quantity;
        this.price = price;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getOrderId() { return orderId; }
    public void setOrderId(int orderId) { this.orderId = orderId; }
    public int getBookId() { return bookId; }
    public void setBookId(int bookId) { this.bookId = bookId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
}
-----------------------------model.Wishlist.java---------------------

package model;

public class Wishlist {
    private int id;
    private int userId;
    private int bookId;

    public Wishlist(int id, int userId, int bookId) {
        this.id = id;
        this.userId = userId;
        this.bookId = bookId;
    }
    public Wishlist(int userId, int bookId) {
        this.userId = userId;
        this.bookId = bookId;
    }

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getBookId() { return bookId; }
    public void setBookId(int bookId) { this.bookId = bookId; }
}
========================== SERVLET ====================================
//---------------------- AuthServlet.java (servlets) --------------------------------
package servlets;

import dao.UserDao;
import model.User;
import util.CSRFTokenManager;
import util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

@WebServlet(name = "AuthServlet", urlPatterns = {"/register", "/login"})
public class AuthServlet extends HttpServlet {

    private UserDao userDao;

    @Override
    public void init() throws ServletException {
        super.init();
        userDao = new UserDao();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String action = request.getServletPath();
        if ("/register".equals(action)) {
            registerUser(request, response);
        } else if ("/login".equals(action)) {
            loginUser(request, response);
        }
    }

    private void registerUser(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String password = request.getParameter("password");

        User user = new User(name, email, phone, password); //Password should be hashed.

        try (Connection connection = DatabaseConnection.getConnection()) {
            userDao.setConnection(connection);
            userDao.createUser(user);
            response.sendRedirect("login.jsp");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Registration failed: " + e.getMessage());
            request.getRequestDispatcher("register.jsp").forward(request, response);
        }
    }

    private void loginUser(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        String email = request.getParameter("email");
        String password = request.getParameter("password");

        try (Connection connection = DatabaseConnection.getConnection()) {
            userDao.setConnection(connection);
            User user = userDao.getUserByEmail(email);

            if (user != null && user.getPassword().equals(password)) { //Password should be compared by hash.
                session.setAttribute("user", user);
                response.sendRedirect("home.jsp");
            } else {
                request.setAttribute("error", "Invalid email or password");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Login failed: " + e.getMessage());
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if ("/register".equals(request.getServletPath())) {
            String csrfToken = CSRFTokenManager.generateToken();
            request.getSession().setAttribute("csrf_token", csrfToken);
            request.setAttribute("csrf_token", csrfToken);
            request.getRequestDispatcher("register.jsp").forward(request, response);
        } else if ("/login".equals(request.getServletPath())) {
            String csrfToken = CSRFTokenManager.generateToken();
            request.getSession().setAttribute("csrf_token", csrfToken);
            request.setAttribute("csrf_token", csrfToken);
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }

}


// --------------------  CartServlet.java (servlets) -----------------------------------
package servlets;

import dao.BookDao;
import model.Book;
import util.CSRFTokenManager;
import util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@WebServlet(name = "CartServlet", urlPatterns = {"/cart/add", "/cart/remove", "/cart"})
public class CartServlet extends HttpServlet {

    private BookDao bookDao;

    @Override
    public void init() throws ServletException {
        super.init();
        bookDao = new BookDao();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String action = request.getServletPath();
        if ("/cart/add".equals(action)) {
            addToCart(request, response);
        } else if ("/cart/remove".equals(action)) {
            removeFromCart(request, response);
        } else if ("/cart".equals(action)) {
            displayCart(request,response);
        }
    }

    private void addToCart(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int bookId = Integer.parseInt(request.getParameter("bookId"));
        HttpSession session = request.getSession();

        List<Book> cart = (List<Book>) session.getAttribute("cart");
        if (cart == null) {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }

        try (Connection connection = DatabaseConnection.getConnection()) {
            bookDao.setConnection(connection);
            Book book = bookDao.getBookById(bookId);
            if(book != null){
                cart.add(book);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        response.sendRedirect("cart.jsp");
    }

    private void removeFromCart(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int bookId = Integer.parseInt(request.getParameter("bookId"));
        HttpSession session = request.getSession();
        List<Book> cart = (List<Book>) session.getAttribute("cart");

        if (cart != null) {
            cart.removeIf(book -> book.getId() == bookId);
        }
        response.sendRedirect("cart.jsp");
    }

    private void displayCart(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
        request.getRequestDispatcher("cart.jsp").forward(request,response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        doGet(request, response);
    }
}
Java

// --------------------  WishlistServlet.java (servlets) -----------------------------------
package servlets;

import dao.WishlistDao;
import model.Wishlist;
import model.User;
import util.CSRFTokenManager;
import util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

@WebServlet(name = "WishlistServlet", urlPatterns = {"/wishlist/add", "/wishlist"})
public class WishlistServlet extends HttpServlet {

    private WishlistDao wishlistDao;

    @Override
    public void init() throws ServletException {
        super.init();
        wishlistDao = new WishlistDao();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String action = request.getServletPath();
        if ("/wishlist/add".equals(action)) {
            addToWishlist(request, response);
        } else if ("/wishlist".equals(action)) {
            displayWishlist(request,response);
        }
    }

    private void addToWishlist(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int bookId = Integer.parseInt(request.getParameter("bookId"));
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        try (Connection connection = DatabaseConnection.getConnection()) {
            wishlistDao.setConnection(connection);
            wishlistDao.addToWishlist(new Wishlist(user.getId(), bookId));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        response.sendRedirect("wishlist.jsp");
    }

    private void displayWishlist(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
        request.getRequestDispatcher("wishlist.jsp").forward(request,response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        doGet(request, response);
    }
}



// ---------------------------------  OrderServlet.java (servlets)  ------------------------------------
package servlets;

import dao.BookDao;
import dao.OrderDao;
import model.Book;
import model.Order;
import model.OrderItem;
import model.User;
import util.CSRFTokenManager;
import util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "OrderServlet", urlPatterns = {"/order"})
public class OrderServlet extends HttpServlet {

    private OrderDao orderDao;
    private BookDao bookDao;

    @Override
    public void init() throws ServletException {
        super.init();
        orderDao = new OrderDao();
        bookDao = new BookDao();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        User user = (User) session.getAttribute("user");
        if (user == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        List<Book> cart = (List<Book>) session.getAttribute("cart");
        if (cart == null || cart.isEmpty()) {
            response.sendRedirect("cart.jsp");
            return;
        }

        double totalAmount = 0;
        for (Book book : cart) {
            totalAmount += book.getPrice();
        }

        try (Connection connection = DatabaseConnection.getConnection()) {
            orderDao.setConnection(connection);
            bookDao.setConnection(connection);

            Order order = orderDao.createOrder(new Order(user.getId(), totalAmount));
            if(order != null) {
                for(Book book : cart){
                    orderDao.createOrderItem(new OrderItem(order.getId(), book.getId(), 1, book.getPrice()));
                    int updatedQuantity = bookDao.getBookById(book.getId()).getQuantity() - 1;
                    bookDao.updateBookQuantity(book.getId(), updatedQuantity);
                }
            }

            session.removeAttribute("cart");
            response.sendRedirect("home.jsp");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Order placement failed: " + e.getMessage());
            request.getRequestDispatcher("cart.jsp").forward(request, response);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = CSRFTokenManager.generateToken();
        request.getSession().setAttribute("csrf_token", csrfToken);
        request.setAttribute("csrf_token", csrfToken);
        request.getRequestDispatcher("cart.jsp").forward(request,response);
    }
}




// ---------------------------------  AdminServlet.java (servlets)  ------------------------------------
package servlets;

import dao.BookDao;
import dao.OrderDao;
import model.Book;
import model.Order;
import model.OrderItem;
import util.CSRFTokenManager;
import util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "AdminServlet", urlPatterns = {"/admin/add_product", "/admin/orders", "/admin/order_details"})
public class AdminServlet extends HttpServlet {

    private BookDao bookDao;
    private OrderDao orderDao;

    @Override
    public void init() throws ServletException {
        super.init();
        bookDao = new BookDao();
        orderDao = new OrderDao();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String action = request.getServletPath();
        if ("/admin/add_product".equals(action)) {
            addProduct(request, response);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String action = request.getServletPath();
        if ("/admin/orders".equals(action)) {
            getOrders(request, response);
        } else if ("/admin/order_details".equals(action)) {
            getOrderDetails(request, response);
        }
        else {
            String csrfToken = CSRFTokenManager.generateToken();
            request.getSession().setAttribute("csrf_token", csrfToken);
            request.setAttribute("csrf_token", csrfToken);
            if ("/admin/add_product".equals(action)){
                request.getRequestDispatcher("admin/add_product.jsp").forward(request, response);
            }
            else if ("/admin/orders".equals(action)){
                request.getRequestDispatcher("admin/order_list.jsp").forward(request, response);
            }
            else if ("/admin/order_details".equals(action)){
                request.getRequestDispatcher("admin/order_details.jsp").forward(request, response);
            }
        }
    }

    private void addProduct(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String csrfToken = request.getParameter("csrf_token");
        HttpSession session = request.getSession();

        if (!CSRFTokenManager.isValidToken(csrfToken, session)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
            return;
        }

        String title = request.getParameter("title");
        double price = Double.parseDouble(request.getParameter("price"));
        int quantity = Integer.parseInt(request.getParameter("quantity"));
        String publisher = request.getParameter("publisher");
        String imagePath = request.getParameter("imagePath");

        Book book = new Book(title, price, quantity, publisher, imagePath);

        try (Connection connection = DatabaseConnection.getConnection()) {
            bookDao.setConnection(connection);
            bookDao.createBook(book);
            response.sendRedirect("admin/add_product.jsp");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Product addition failed: " + e.getMessage());
            request.getRequestDispatcher("admin/add_product.jsp").forward(request, response);
        }
    }

    private void getOrders(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        try (Connection connection = DatabaseConnection.getConnection()) {
            orderDao.setConnection(connection);
            List<Order> orders = orderDao.getAllOrders();
            request.setAttribute("orders", orders);
            request.getRequestDispatcher("admin/order_list.jsp").forward(request, response);
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Failed to retrieve orders: " + e.getMessage());
            request.getRequestDispatcher("admin/order_list.jsp").forward(request, response);
        }
    }

    private void getOrderDetails(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        int orderId = Integer.parseInt(request.getParameter("orderId"));

        try (Connection connection = DatabaseConnection.getConnection()) {
            orderDao.setConnection(connection);
            List<OrderItem> orderItems = orderDao.getOrderItemsByOrderId(orderId);
            request.setAttribute("orderItems", orderItems);
            request.getRequestDispatcher("admin/order_details.jsp").forward(request, response);
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Failed to retrieve order details: " + e.getMessage());
            request.getRequestDispatcher("admin/order_details.jsp").forward(request, response);
        }
    }
}

// -------------------------- HomeServlet.java (servlets) -----------------------------------
package servlets;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(name = "HomeServlet", urlPatterns = {"/home"})
public class HomeServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("home.jsp").forward(request, response);
    }
}



// -------------------------- ContactServlet.java (servlets) -----------------------------------
package servlets;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(name = "ContactServlet", urlPatterns = {"/contact"})
public class ContactServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("contact.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Handle contact form submission (e.g., send email)
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String message = request.getParameter("message");

        // Implement email sending logic here
        // ...

        request.setAttribute("message", "Thank you for your message!");
        request.getRequestDispatcher("contact.jsp").forward(request, response);
    }
}


=========================== CSRFTokenManager.java (util) ===============================


package util;

import javax.servlet.http.HttpSession;
import java.util.UUID;

public class CSRFTokenManager {

    public static String generateToken() {
        return UUID.randomUUID().toString();
    }

    public static boolean isValidToken(String token, HttpSession session) {
        if (token == null || session == null) {
            return false;
        }

        String sessionToken = (String) session.getAttribute("csrf_token");
        if (sessionToken == null) {
            return false;
        }

        return token.equals(sessionToken);
    }
}



========================== DAO ============================================

//----------------------------------- UserDao.java (dao) --------------------------------
package dao;

import models.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDao {

    private Connection connection;

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public void createUser(User user) throws SQLException {
        String sql = "INSERT INTO Users (name, email, phone, password) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, user.getName());
            statement.setString(2, user.getEmail());
            statement.setString(3, user.getPhone());
            statement.setString(4, user.getPassword()); // Hash the password
            statement.executeUpdate();
        }
    }

    public User getUserByEmail(String email) throws SQLException {
        String sql = "SELECT * FROM Users WHERE email = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, email);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new User(
                        resultSet.getInt("id"),
                        resultSet.getString("name"),
                        resultSet.getString("email"),
                        resultSet.getString("phone"),
                        resultSet.getString("password")
                    );
                }
                return null;
            }
        }
    }

    // Other user-related database operations
}
Java

//----------------------------------- BookDao.java (dao) --------------------------------
package dao;

import models.Book;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class BookDao {

    private Connection connection;

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public Book getBookById(int bookId) throws SQLException {
        String sql = "SELECT * FROM Books WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, bookId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new Book(
                        resultSet.getInt("id"),
                        resultSet.getString("title"),
                        resultSet.getDouble("price"),
                        resultSet.getInt("quantity"),
                        resultSet.getString("publisher"),
                        resultSet.getString("image_path")
                    );
                }
                return null;
            }
        }
    }

    public void createBook(Book book) throws SQLException {
        String sql = "INSERT INTO Books (title, price, quantity, publisher, image_path) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, book.getTitle());
            statement.setDouble(2, book.getPrice());
            statement.setInt(3, book.getQuantity());
            statement.setString(4, book.getPublisher());
            statement.setString(5, book.getImagePath());
            statement.executeUpdate();
        }
    }

    public void updateBookQuantity(int bookId, int quantity) throws SQLException {
        String sql = "UPDATE Books SET quantity = ? WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, quantity);
            statement.setInt(2, bookId);
            statement.executeUpdate();
        }
    }

    // Other book-related database operations
}
Java

//----------------------------------- OrderDao.java (dao) --------------------------------
package dao;

import models.Order;
import models.OrderItem;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class OrderDao {

    private Connection connection;

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public Order createOrder(Order order) throws SQLException {
        String sql = "INSERT INTO Orders (user_id, total_amount) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            statement.setInt(1, order.getUserId());
            statement.setDouble(2, order.getTotalAmount());
            statement.executeUpdate();
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return new Order(
                        generatedKeys.getInt(1),
                        order.getUserId(),
                        Timestamp.valueOf(java.time.LocalDateTime.now()),
                        order.getTotalAmount()
                    );
                } else {
                    return null;
                }
            }
        }
    }

    public void createOrderItem(OrderItem orderItem) throws SQLException {
        String sql = "INSERT INTO OrderItems (order_id, book_id, quantity, price) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, orderItem.getOrderId());
            statement.setInt(2, orderItem.getBookId());
            statement.setInt(3, orderItem.getQuantity());
            statement.setDouble(4, orderItem.getPrice());
            statement.executeUpdate();
        }
    }

    public List<Order> getAllOrders() throws SQLException {
        String sql = "SELECT * FROM Orders";
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            List<Order> orders = new ArrayList<>();
            while (resultSet.next()) {
                orders.add(new Order(
                    resultSet.getInt("id"),
                    resultSet.getInt("user_id"),
                    resultSet.getTimestamp("order_date"),
                    resultSet.getDouble("total_amount")
                ));
            }
            return orders;
        }
    }

    public List<OrderItem> getOrderItemsByOrderId(int orderId) throws SQLException {
         String sql = "SELECT * FROM OrderItems WHERE order_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, orderId);
            try (ResultSet resultSet = statement.executeQuery()) {
                List<OrderItem> orderItems = new ArrayList<>();
                while (resultSet.next()) {
                    orderItems.add(new OrderItem(
                        resultSet.getInt("id"),
                        resultSet.getInt("order_id"),
                        resultSet.getInt("book_id"),
                        resultSet.getInt("quantity"),
                        resultSet.getDouble("price")
                    ));
                }
                return orderItems;
            }
        }
    }

    // Other order-related database operations
}
Java

//----------------------------------- WishlistDao.java (dao) --------------------------------
package dao;

import models.Wishlist;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class WishlistDao {

    private Connection connection;

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public void addToWishlist(Wishlist wishlist) throws SQLException {
        String sql = "INSERT INTO Wishlist (user_id, book_id) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, wishlist.getUserId());
            statement.setInt(2, wishlist.getBookId());
            statement.executeUpdate();
        }
    }

    // Other wishlist-related database operations
}

======================= BOOTSTRAP 5 ====================================


<%------------------------------ home.jsp -----------------------------------------------%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>

<html>
<head>
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Welcome to Our Bookstore</h1>
        <p>Explore our wide range of books and find your next favorite read.</p>
        <a href="cart" class="btn btn-primary">View Cart</a>
        <a href="wishlist" class="btn btn-secondary">View Wishlist</a>
        <a href="contact" class="btn btn-info">Contact Us</a>
        <% if (session.getAttribute("user") == null) { %>
            <a href="login" class="btn btn-success">Login</a>
            <a href="register" class="btn btn-warning">Register</a>
        <% } else { %>
            <a href="/admin/orders" class="btn btn-danger">Admin Panel</a>
        <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ cart.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Shopping Cart</h1>
        <c:if test="${not empty sessionScope.cart}">
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${sessionScope.cart}" var="book">
                        <tr>
                            <td>${book.title}</td>
                            <td>${book.price}</td>
                            <td>
                                <a href="cart/remove?bookId=${book.id}" class="btn btn-danger btn-sm">Remove</a>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
            <form action="order" method="post">
                <input type="hidden" name="csrf_token" value="${csrf_token}">
                <button type="submit" class="btn btn-success">Place Order</button>
            </form>
        </c:if>
        <c:if test="${empty sessionScope.cart}">
            <p>Your cart is empty.</p>
        </c:if>

        <a href="home" class="btn btn-secondary">Continue Shopping</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ wishlist.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Wishlist</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Wishlist</h1>
        <c:if test="${not empty sessionScope.user}">
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${sessionScope.user.wishlist}" var="book">
                        <tr>
                            <td>${book.title}</td>
                            <td>${book.price}</td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </c:if>
        <c:if test="${empty sessionScope.user}">
            <p>Please log in to view your wishlist.</p>
        </c:if>
        <a href="home" class="btn btn-secondary">Continue Shopping</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ contact.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Contact Us</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Contact Us</h1>
        <form action="contact" method="post">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="message" class="form-label">Message</label>
                <textarea class="form-control" id="message" name="message" rows="4" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
        <p>${message}</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ register.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Register</h1>
        <form action="register" method="post">
            <input type="hidden" name="csrf_token" value="${csrf_token}">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Phone</label>
                <input type="text" class="form-control" id="phone" name="phone">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
        <p style="color: red;">${error}</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ login.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Login</h1>
        <form action="login" method="post">
            <input type="hidden" name="csrf_token" value="${csrf_token}">
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
        <p style="color: red;">${error}</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ add_product.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Add Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-5">
    <h1>Add Product</h1>
    <form action="/admin/add_product" method="post">
        <input type="hidden" name="csrf_token" value="${csrf_token}">
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        <div class="mb-3">
            <label for="price" class="form-label">Price</label>
            <input type="number" class="form-control" id="price" name="price" required>
        </div>
        <div class="mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <input type="number" class="form-control" id="quantity" name="quantity" required>
        </div>
        <div class="mb-3">
            <label for="publisher" class="form-label">Publisher</label>
            <input type="text" class="form-control" id="publisher" name="publisher">
        </div>
        <div class="mb-3">
            <label for="imagePath" class="form-label">Image Path</label>
            <input type="text" class="form-control" id="imagePath" name="imagePath">
        </div>
        <button type="submit" class="btn btn-primary">Add Product</button>
    </form>
    <p style="color: red;">${error}</p>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




<%------------------------------ order_list.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Order List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Order List</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>User ID</th>
                    <th>Order Date</th>
                    <th>Total Amount</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach items="${orders}" var="order">
                    <tr>
                        <td>${order.id}</td>
                        <td>${order.userId}</td>
                        <td>${order.orderDate}</td>
                        <td>${order.totalAmount}</td>
                        <td>
                            <a href="/admin/order_details?orderId=${order.id}" class="btn btn-primary btn-sm">View Details</a>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
ml>



<%------------------------------ order_details.jsp -----------------------------------------------%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Order Details</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Book ID</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach items="${orderItems}" var="item">
                    <tr>
                        <td>${item.bookId}</td>
                        <td>${item.quantity}</td>
                        <td>${item.price}</td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <a href="/admin/orders" class="btn btn-secondary">Back to Orders</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
