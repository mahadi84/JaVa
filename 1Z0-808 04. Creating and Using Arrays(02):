


=======================04. Creating and Using Arrays(02): =================4-Aug-24(Sunday)

01. Declare, instantiate, initialize, and use a one-dimensional array
02. Declare, instantiate, initialize, and use multi-dimensional arrays

=============================================================================================

######################################################################################
-------01. Declare, instantiate, initialize, and use a one-dimensional array --------
######################################################################################
0. Definition
1. Declare a One-Dimensional Array 
2. Instantiate a One-Dimensional Array 
3. Initialize a One-Dimensional Array
    -Initialization at Declaration
    -Initialization After Instantiation
 4. Use a One-Dimensional Array
    -Accessing Array Elements  
    -Modifying Array Elements  
    -Looping Through Array Elements   
    -Example Code  


######### Definition   ######
- Declare: Specify the type and name of the array.
- Instantiate: Create the array object and allocate memory.
- Initialize: Assign values to the array elements.
- Use: Access, modify, and process the elements of the array.

######### 1. Declare a One-Dimensional Array   ######
    -Specifying the (data) type of elements the array will hold and the array variable. 
    -No memory is allocated for the actual elements.
        Example:
        int[] numbers; // Declaration of an array of integers

######### 2. Instantiate a One-Dimensional Array   ######
    -Creating the actual array OBJECT and allocating MEMORY for it. 
    -Using the `new` keyword followed by the array TYPE and SIZE.
        Example:
        numbers = new int[5]; // Instantiation of an array with 5 integer elements

######### 3. Initialize a One-Dimensional Array   ######
    -Assigning values to the elements of the array. 
    -Can do this either at the time of declaration or after instantiation.

Example:
########## Initialization at Declaration
    int[] numbers = {1, 2, 3, 4, 5}; // Declaration and initialization in one line

########## Initialization After Instantiation
      int[] numbers; // Declaration of an array of integers
            numbers[0] = 1; // Assigning values to each index
            numbers[1] = 2;
            numbers[2] = 3;
            numbers[3] = 4;
            numbers[4] = 5;

######### 4. Use a One-Dimensional Array   ######
Once the array is declared, instantiated, and initialized, you can use it to access its elements. You can retrieve or modify elements using their index.

########## Accessing Array Elements   ######
    int firstNumber = numbers[0]; // Access the first element (1)
    int secondNumber = numbers[1]; // Access the second element (2)

########## Modifying Array Elements   ######
    numbers[2] = 10; // Modify the third element to 10

########## Looping Through Array Elements   ######
    A common way to process all elements in an array is by using a loop, typically a `for` loop.
    for (int i = 0; i < numbers.length; i++) {
        System.out.println(numbers[i]); // Print each element
    }

######### Example Code   ######
Here’s a complete example that incorporates all the steps:
        public class ArrayExample {
            public static void main(String[] args) {
                // Declare and instantiate the array
                int[] numbers = new int[5];
                
                // Initialize the array elements
                numbers[0] = 1;
                numbers[1] = 2;
                numbers[2] = 3;
                numbers[3] = 4;
                numbers[4] = 5;
                
                // Use the array
                // Accessing and printing individual elements
                System.out.println("First element: " + numbers[0]); // Output: 1
                System.out.println("Second element: " + numbers[1]); // Output: 2
                
                // Modifying an element
                numbers[2] = 10;
                
                // Print all elements using a loop
                System.out.println("Array elements:");
                for (int i = 0; i < numbers.length; i++) {
                    System.out.println(numbers[i]);
                }
            }
        }



######################################################################################
---------02. Declare, instantiate, initialize, and use multi-dimensional arrays ------
######################################################################################

0. Definition
1. Declare a Multi-Dimensional Array  
2. Instantiate a Multi-Dimensional Array  
3. Initialize a Multi-Dimensional Array  
    -Initialization at Declaration  
    -Initialization After Instantiation  
4. Use a Multi-Dimensional Array  
    -Accessing Array Elements  
    -Modifying Array Elements  
    -Looping Through Array Elements  
    -Example Code 


########### 0. Definition  ###########

- Declare: Specify the type and dimensions of the multi-dimensional array.
- Instantiate: Create the array object and allocate memory for its dimensions.
- Initialize: Assign values to the elements in the array.
- Use: Access, modify, and process the elements using nested loops.


########### 1. Declare a Multi-Dimensional Array  ###########
In Java, a multi-dimensional array is essentially an array of arrays. 
For a two-dimensional array, you declare it by specifying the type of elements and the number of dimensions.

int[][] matrix; // Declaration of a 2D array of integers

########### 2. Instantiate a Multi-Dimensional Array  ###########
Instantiation involves creating the actual array object and allocating memory for it. 
You do this using the `new` keyword and specifying the size of each dimension.

matrix = new int[3][4]; // Instantiation of a 2D array with 3 rows and 4 columns

########### 3. Initialize a Multi-Dimensional Array  ###########
Initialization involves assigning values to the elements in the array. 
You can do this either at the time of declaration or after instantiation.

############ Initialization at Declaration  ###########

        int[][] matrix = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12}
        }; // Declaration and initialization in one line

############ Initialization After Instantiation  ###########
        matrix[0][0] = 1; // Initialize elements individually
        matrix[0][1] = 2;
        matrix[0][2] = 3;
        matrix[0][3] = 4;
        matrix[1][0] = 5;
        matrix[1][1] = 6;
        matrix[1][2] = 7;
        matrix[1][3] = 8;
        matrix[2][0] = 9;
        matrix[2][1] = 10;
        matrix[2][2] = 11;
        matrix[2][3] = 12;

########### 4. Use a Multi-Dimensional Array  ###########
You can access or modify the elements of a multi-dimensional array using two indices: one for the row and one for the column.

############ Accessing Array Elements  ###########
        int value = matrix[0][0]; // Access the element in the first row, first column (1)
        int anotherValue = matrix[1][2]; // Access the element in the second row, third column (7)

############ Modifying Array Elements  ###########
        matrix[2][3] = 99; // Modify the element in the third row, fourth column to 99

############ Looping Through Array Elements  ###########
To process all elements in a multi-dimensional array, you typically use nested loops.

        for (int i = 0; i < matrix.length; i++) { // Loop through rows
            for (int j = 0; j < matrix[i].length; j++) { // Loop through columns
                System.out.print(matrix[i][j] + " "); // Print each element
            }
            System.out.println(); // Print a newline after each row
        }

########### Example Code  ###########
Here’s a complete example that demonstrates declaring, instantiating, initializing, and using a two-dimensional array:

        public class MultiDimArrayExample {
            public static void main(String[] args) {
                // Declare and instantiate the 2D array
                int[][] matrix = new int[3][4];
                
                // Initialize the array elements
                matrix[0][0] = 1;
                matrix[0][1] = 2;
                matrix[0][2] = 3;
                matrix[0][3] = 4;
                matrix[1][0] = 5;
                matrix[1][1] = 6;
                matrix[1][2] = 7;
                matrix[1][3] = 8;
                matrix[2][0] = 9;
                matrix[2][1] = 10;
                matrix[2][2] = 11;
                matrix[2][3] = 12;
                
                // Use the array
                // Accessing and printing elements
                System.out.println("Element at (0,0): " + matrix[0][0]); // Output: 1
                
                // Modifying an element
                matrix[2][3] = 99;
                
                // Print all elements using nested loops
                System.out.println("Matrix elements:");
                for (int i = 0; i < matrix.length; i++) {
                    for (int j = 0; j < matrix[i].length; j++) {
                        System.out.print(matrix[i][j] + " ");
                    }
                    System.out.println(); // Print newline after each row
                }
            }
        }


