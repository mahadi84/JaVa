


=======================04. Creating and Using Arrays(02): =================4-Aug-24(Sunday)
01. Declare, instantiate, initialize, and use a one-dimensional array
02. Declare, instantiate, initialize, and use multi-dimensional arrays

=============================================================================================

----------------------------01. Declare, instantiate, initialize, and use a one-dimensional array --------------
0. Definition
1. Declare a One-Dimensional Array 
2. Instantiate a One-Dimensional Array 
3. Initialize a One-Dimensional Array
    -Initialization at Declaration
    -Initialization After Instantiation
 4. Use a One-Dimensional Array
    -Accessing Array Elements  
    -Modifying Array Elements  
    -Looping Through Array Elements   
    -Example Code  


######### Definition   ######
- Declare: Specify the type and name of the array.
- Instantiate: Create the array object and allocate memory.
- Initialize: Assign values to the array elements.
- Use: Access, modify, and process the elements of the array.

######### 1. Declare a One-Dimensional Array   ######
In Java, declaring an array means specifying the type of elements the array will hold and the array variable. You only declare the array at this stage; no memory is allocated for the actual elements.
int[] numbers; // Declaration of an array of integers

######### 2. Instantiate a One-Dimensional Array   ######
Instantiation involves creating the actual array object and allocating memory for it. You do this using the `new` keyword followed by the array type and size.

numbers = new int[5]; // Instantiation of an array with 5 integer elements

######### 3. Initialize a One-Dimensional Array   ######
Initialization involves assigning values to the elements of the array. You can do this either at the time of declaration or after instantiation.

########## Initialization at Declaration   ######
int[] numbers = {1, 2, 3, 4, 5}; // Declaration and initialization in one line

########## Initialization After Instantiation   ######
numbers[0] = 1; // Assigning values to each index
numbers[1] = 2;
numbers[2] = 3;
numbers[3] = 4;
numbers[4] = 5;

######### 4. Use a One-Dimensional Array   ######
Once the array is declared, instantiated, and initialized, you can use it to access its elements. You can retrieve or modify elements using their index.

########## Accessing Array Elements   ######
int firstNumber = numbers[0]; // Access the first element (1)
int secondNumber = numbers[1]; // Access the second element (2)

########## Modifying Array Elements   ######
numbers[2] = 10; // Modify the third element to 10

########## Looping Through Array Elements   ######
A common way to process all elements in an array is by using a loop, typically a `for` loop.
for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]); // Print each element
}

######### Example Code   ######
Hereâ€™s a complete example that incorporates all the steps:
public class ArrayExample {
    public static void main(String[] args) {
        // Declare and instantiate the array
        int[] numbers = new int[5];
        
        // Initialize the array elements
        numbers[0] = 1;
        numbers[1] = 2;
        numbers[2] = 3;
        numbers[3] = 4;
        numbers[4] = 5;
        
        // Use the array
        // Accessing and printing individual elements
        System.out.println("First element: " + numbers[0]); // Output: 1
        System.out.println("Second element: " + numbers[1]); // Output: 2
        
        // Modifying an element
        numbers[2] = 10;
        
        // Print all elements using a loop
        System.out.println("Array elements:");
        for (int i = 0; i < numbers.length; i++) {
            System.out.println(numbers[i]);
        }
    }
}
```
