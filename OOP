
সংক্ষিপ্ত ধারণা (Brief Concepts)

01. এনক্যাপসুলেশন: ডেটা এবং ফাংশনকে একটি ক্যাপসুলের মধ্যে রাখা। যেমন: একটি মোটরগাড়ির ইঞ্জিনকে তার বডির মধ্যে লুকিয়ে রাখা।

02. অ্যাবস্ট্রাকশন: জটিলতা লুকিয়ে সহজ ইন্টারফেস তৈরি করা। যেমন: গাড়ির চালক কেবল স্টিয়ারিং, ব্রেক ও অ্যাক্সেলেটর দেখে, ইঞ্জিনের ভেতরের প্রক্রিয়া নয়।

03. ইনহেরিটেন্স: বিদ্যমান ক্লাস থেকে নতুন ক্লাস তৈরি করা। যেমন: 'গাড়ি' ক্লাস থেকে 'বাস' এবং 'ট্রাক' ক্লাসের সৃষ্টি।

04. পলিমরফিজম: একটি কাজ বিভিন্নভাবে করা। যেমন: 'ড্রাইভ' ফাংশনটি বাস এবং ট্রাক উভয়ের জন্যই থাকলেও তাদের ড্রাইভিং প্রক্রিয়া ভিন্ন হতে পারে।

Inheritance | ইনহেরিটেন্স (উত্তরাধিকার) | এটি একটি ক্লাসকে (Child Class বা Subclass) অন্য একটি ক্লাসের (Parent Class বা Superclass) বৈশিষ্ট্য ও মেথডগুলো উত্তরাধিকার সূত্রে পেতে সাহায্য করে। এটি কোড পুনরায় ব্যবহার (Code Reusability) নিশ্চিত করে। | 
Polymorphism | পলিমরফিজম (বহুরূপতা) | এর মাধ্যমে একই নামে থাকা ফাংশন বা মেথড বিভিন্ন প্রেক্ষাপটে ভিন্ন ভিন্ন কাজ করতে পারে। অর্থাৎ, একটি নাম কিন্তু একাধিক রূপ। |
Encapsulation	| এনক্যাপসুলেশন (আবরণ বা একত্রীকরণ) |	এটি ডাটা এবং সেই ডাটার উপর কাজ করার মেথডগুলোকে একটি সিঙ্গেল ইউনিটের মধ্যে একত্রিত করে এবং বাইরের অ্যাক্সেস থেকে লুকিয়ে রাখে (ডাটা হাইডিং)। এটি ডেটার নিরাপত্তা নিশ্চিত করে।
Abstraction	| অ্যাবস্ট্রাকশন (বিমূর্ততা) |	এটি শুধুমাত্র প্রয়োজনীয় তথ্যগুলো ব্যবহারকারীকে দেখায় এবং ভেতরের জটিল বাস্তব বা কার্যকরী দিকগুলো গোপন রাখে। ব্যবহারকারী কেবল ফাংশনালিটি (কার্যকারিতা) দেখে, ভেতরের কার্যপ্রক্রিয়া নয়।




-
