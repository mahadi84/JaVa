Date: 3-Aug-24(Saturday)

=====================Chpter 03. Using Operators and Decision Constructs(05): =========

01. Use Java operators; 
02. use parentheses to override operator precedence
03. Test equality between Strings and other objects using == and equals ()
04. Create if and if/else and ternary constructs 
05. Use a switch statement

====================================================================

--------------------01. Use Java operators; ---------------------

## Java Operators 
    ######### Arithmetic Operators ###### 
    Used for performing mathematical operations.
        +(Addition)
        -(Subtraction)
        \(Multiplication)
        /(Division)
        %(Modulo - remainder)
        ++(Increment)
        --(Decrement)

    Example:
        int a = 10, b = 5;
        int sum = a + b;
        int difference = a - b;
        int product = a * b;
        int quotient = a / b;
        int remainder = a % b;
        a++; // Increment a by 1
        b--; // Decrement b by 1
   

###### Assignment Operators ###### 
    Used to assign values to variables.

    * **=** (Simple assignment)
    * **+=** (Addition assignment)
    * **-=** (Subtraction assignment)
    * **\*==** (Multiplication assignment)
    * **/=** (Division assignment)
    * **%=** (Modulo assignment)

    Example:
    int x = 5;
    x += 3; // Equivalent to x = x + 3
    ```

###### Comparison Operators ###### 
    Used to compare values.

    * **==** (Equal to)
    * **!=** (Not equal to)
    * **>** (Greater than)
    * **<** (Less than)
    * **>=** (Greater than or equal to)
    * **<=** (Less than or equal to)

    Example:
    int a = 10, b = 5;
    boolean isEqual = a == b; // false
    boolean isGreaterThan = a > b; // true

###### Logical Operators ###### 
    Used to combine boolean expressions.

    * **&&** (Logical AND)
    * **||** (Logical OR)
    * **!** (Logical NOT)

    Example:
    boolean isTrue = true;
    boolean isFalse = false;
    boolean result1 = isTrue && isFalse; // false
    boolean result2 = isTrue || isFalse; // true
    boolean result3 = !isTrue; // false
    ```

###### Bitwise Operators ###### 
    Used to perform operations on individual bits of integer values.

    * **&** (Bitwise AND)
    * **|** (Bitwise OR)
    * **^** (Bitwise XOR)
    * **~** (Bitwise complement)
    * **<<** (Left shift)
    * **>>** (Right shift)
    * **>>>** (Unsigned right shift)

    Example:
    int a = 5, b = 3;
    int result = a & b; // Bitwise AND
    ```

###### Ternary Operator ###### 
A shorthand for if-else statements.
    Example:
    int x = 10;
    String result = (x > 5) ? "Greater than 5" : "Less than or equal to 5";
    ```

###### Operator Precedence ###### 
The order in which operators are evaluated. Use parentheses to override the default precedence.

    int result = 5 + 3 * 2; // Multiplication has higher precedence, so result is 11




--------------------02. use parentheses to override operator precedence---------------------

Operator precedence: determines the order in which operations are performed in an expression.
 However, you can explicitly control the order of evaluation by using parentheses.

######### Example:
Consider the expression:
int result = 5 + 3 * 2;
```
Without parentheses, the multiplication (3 * 2) is performed first due to operator precedence, resulting in `result` being 11.

####### To change the order of operations, you can use parentheses:
int result = (5 + 3) * 2;
Now, the addition (5 + 3) is performed first, resulting in `result` being 16.

########### General Rule: ###########

* Expressions within parentheses are evaluated first.
* Nested parentheses are evaluated from the innermost to the outermost.

########### Example with Nested Parentheses: ###########
int result = (2 + (3 * 4)) - 5;
```
In this case, the multiplication (3 * 4) is performed first due to the innermost parentheses, followed by the addition (2 + 12), and finally the subtraction (14 - 5), resulting in `result` being 9.

########### Key Points #############
* Parentheses can be used to clarify the intended order of operations, even when the default precedence is correct.
* Excessive use of parentheses can make code harder to read, so use them judiciously.

**Example demonstrating clarity:**
int result = (a + b) * (c - d);
```
While the parentheses might not be strictly necessary in this case, they improve readability by explicitly showing the two separate calculations being multiplied.

--------------------03. Test equality between Strings and other objects using == and equals ()---------------------
--------------------04. Create if and if/else and ternary constructs ---------------------
--------------------05. Use a switch statement---------------------
