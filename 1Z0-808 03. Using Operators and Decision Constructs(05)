Date: 3-Aug-24(Saturday)

=====================Chpter 03. Using Operators and Decision Constructs(05): =========

01. Use Java operators; 
02. use parentheses to override operator precedence
03. Test equality between Strings and other objects using == and equals ()
04. Create if and if/else and ternary constructs 
05. Use a switch statement

====================================================================

######################################################################################
               --------------------01. Use Java operators; ---------------------
######################################################################################

###### Arithmetic Operators
###### Assignment Operators
###### Comparison Operators
###### Logical Operators
###### Bitwise Operators
###### Ternary Operator
########## Operator Precedence

######### Arithmetic Operators ###### 
    Used for performing mathematical operations.
        +(Addition),           -(Subtraction)
        \(Multiplication)      /(Division)
        %(Modulo - remainder)  ++(Increment)    --(Decrement)

    Example:
        int a = 10, b = 5;
        int sum = a + b;
        int quotient = a / b;
        int remainder = a % b;
        a++; // Increment a by 1
        b--; // Decrement b by 1
   

###### Assignment Operators ###### 
    Used to assign values to variables.
     = (Simple assignment)          += (Addition assignment)
    -= (Subtraction assignment)     \== (Multiplication assignment)
    /= (Division assignment)         %= (Modulo assignment)

    Example:
    int x = 5;
    x += 3; // Equivalent to x = x + 3


###### Comparison Operators ###### 
    Used to compare values.
        == (Equal to)                    != (Not equal to)
        > (Greater than)                 < (Less than)
        >= (Greater than or equal to)    <= (Less than or equal to)

    Example:
    int a = 10, b = 5;
    boolean isEqual = a == b; // false
    boolean isGreaterThan = a > b; // true

###### Logical Operators ###### 
    Used to combine boolean expressions.
      && (Logical AND)
      || (Logical OR)
      ! (Logical NOT)

    Example:
    boolean isTrue = true;
    boolean isFalse = false;
    boolean result1 = isTrue && isFalse; // false
    boolean result2 = isTrue || isFalse; // true
    boolean result3 = !isTrue; // false


###### Bitwise Operators ###### 
    Used to perform operations on individual bits of integer values.

     & (Bitwise AND)     | (Bitwise OR)
     ^ (Bitwise XOR)     ~ (Bitwise complement)
     << (Left shift)     >> (Right shift)
     >>> (Unsigned right shift)

    Example:
    int a = 5, b = 3;
    int result = a & b; // Bitwise AND

###### Ternary Operator ###### 
A shorthand for if-else statements.
    Example:
    int x = 10;
    String result = (x > 5) ? "Greater than 5" : "Less than or equal to 5";



######################################################################################
--------------------02. use parentheses to override operator precedence--------------
######################################################################################

########### What is Operator precedence?
########### Why parentheses and nested parentheses are used in Operator precedence?
########### which one performed first: int result = (2 + (3 * 4)) - 5;


######### Operator precedence: ######### 
 determines the order in which operations are performed in an expression.
 However, you can explicitly control the order of evaluation by using parentheses.

######### Example:
Consider the expression:
int result = 5 + 3 * 2;
Without parentheses, the multiplication (3 * 2) is performed first due to operator precedence, resulting in `result` being 11.

####### To change the order of operations, you can use parentheses:
- Expressions within parentheses() are evaluated first.
-Nested parentheses are evaluated from the innermost to the outermost.
-Parentheses can be used to clarify the intended order of operations, even when the default precedence is correct.
-Excessive use of parentheses can make code harder to read, so use them judiciously.

int result = (5 + 3) * 2;
Now, the addition (5 + 3) is performed first, resulting in `result` being 16.



########### Example with Nested Parentheses: ###########
int result = (2 + (3 * 4)) - 5;
In this case, the multiplication (3 * 4) is performed first due to the innermost parentheses, followed by the addition (2 + 12), and finally the subtraction (14 - 5), resulting in `result` being 9.

#############Example demonstrating clarity:
    int result = (a + b) * (c - d);
While the parentheses might not be strictly necessary in this case, they improve readability by explicitly showing the two separate calculations being multiplied.


######################################################################################
------03. Test equality between Strings and other objects using == and equals ()------
######################################################################################

######### Object reference variable(Declare, Access): 
######### Understanding the Difference between `==` and `equals()`
######### What is String?
######### Comparing Strings VS Comparing Other Objects
######### Why and When to use:
             -hashCode()  -Objects.equals()  -@Override

####### Object reference variable:  
-is a variable that holds the memory address of an object rather than the object itself. 
-It is used to interact with the object and access its fields and methods.
    Example:
        Declaration: declare an object reference variable with the data type of the class it will reference.
        Car myCar; // Declares a reference variable of type Car
          Car myCar = null; // ***A reference variable can hold the value null if it doesn't refer to any object.
            myCar = new Car("red", 2023); // Creates a Car object and assigns it to myCar
            System.out.println(myCar.color); // Accesses the color property
            myCar.start(); // Calls the start() method
              
Another Details Example:-----
          class Car {
              String color;
              int year;          
              public Car(String color, int year) {
                  this.color = color;
                  this.year = year;
              }
          }
          public class Main {
              public static void main(String[] args) {
                  Car car1 = new Car("red", 2023);
                  Car car2 = car1; // Both car1 and car2 refer to the same car object
                  car1.color = "blue"; // Changes the color for both car1 and car2          
                  System.out.println(car1.color); // Output: blue
                  System.out.println(car2.color); // Output: blue
              }
          }


***Same Object vs Two Objects vs Custome Objects


### Understanding the Difference
    There are two primary ways to test equality between objects:
    1. `==` -operator:   
            -Compares object references. 
            -It checks if two references point to the same object in memory.
    2. `equals()` 
            -method: 
            -Compares the contents of two objects. 
            -It checks if the objects represent the same value.

######### What is String?
-SPECIAL OBJECT: Strings are a special OBJECT in Java whereas in some other programming languages where strings might be primitive data types.
                -collection of characters treated as a single unit
-IMMUTABLE: Once a string object is created, its content cannot be changed.

### Comparing Strings
 While they are objects, the `String` class overrides the `equals()` method to compare the actual content of the strings.

#### Example:
    String s1 = "hello";
    String s2 = "hello";
    String s3 = new String("hello");

    System.out.println(s1 == s2); // Output: true (due to String interning)
    System.out.println(s1 == s3); // Output: false (different objects)
    System.out.println(s1.equals(s2)); // Output: true (content is equal)
    System.out.println(s1.equals(s3)); // Output: true (content is equal)

Explanation:
    * `s1 == s2`: Both `s1` and `s2` refer to the same String object in the String pool, so `==` returns `true`.
    * `s1 == s3`: `s1` and `s3` refer to different String objects, even though they have the same content, so `==` returns `false`.
    * `s1.equals(s2)` and `s1.equals(s3)`: Both comparisons check the content of the strings, which is the same, so `equals()` returns `true` in both cases.

### Comparing Other Objects
    For custom objects, the default implementation of `equals()` inherited from the `Object` class compares object references using `==`. To compare the contents of custom objects, you need to override the `equals()` method appropriately.

    #### Example:
    class Person {
        String name;
        int age;

        // Overridden equals method
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null || getClass() != obj.getClass())
                return false;
            Person other = (Person) obj;
            return Objects.equals(name, other.name) && age == other.age;
        }
    }


    In this example, the `equals()` method compares the `name` and `age` fields of two `Person` objects.

############Important points: ############
    * Always override `hashCode()` when overriding `equals()` to maintain consistency.
    * Use `Objects.equals()` for null-safe comparisons.
    * Consider using `@Override` annotation to prevent accidental overriding.

######################################################################################
--------------------04. Create if and if/else and ternary constructs -----------------
######################################################################################

### If/Else Statement and Nested if statements
### Ternary Operator

### If/Else Statement
    The `if/else` statement provides an alternative block of code to execute if the condition is false.
   ### Example with multiple conditions:
    int number = 5;
    if (number > 0) {
        System.out.println("Number is positive.");
    } else if (number == 0) {
        System.out.println("Number is zero.");
    } else {
        System.out.println("Number is negative.");
    }

### Nested if statements:
    int age = 16;
    int weight = 60;
    if (age >= 18) {
        if (weight >= 50) {
            System.out.println("Eligible for blood donation.");
        } else {
            System.out.println("Not eligible due to weight.");
        }
    } else {
        System.out.println("Not eligible due to age.");
    }

### Ternary Operator
The ternary operator is a shorthand way to write an `if/else` statement. It takes three operands:
    * A condition
    * The expression to evaluate if the condition is true
    * The expression to evaluate if the condition is false
        int age = 20;
        String message = (age >= 18) ? "You are an adult." : "You are a minor.";
        System.out.println(message);



######################################################################################
      --------------------------05. Use a switch statement---------------------
######################################################################################

###### Why it is #####
###### What are Syntex and ..? ######
          -Expression: Data Type
          -Case Labels
          -Break Statement
          -Default Case

###### What and Why it is #####
-When I need to check a variable against several possible constant values.
-It's a cleaner and more readable alternative to using multiple `if-else-if` statements. 

**The `switch` statement in Java is used to execute one block of code among many alternatives based on the value of an expression. 

### Syntax
    switch (expression) {
        case value1:
            // code block
            break;
        case value2:
            // code block
            break;
        // you can have any number of case statements
        default:
            // default code block
    }

### Example
public class Main {
    public static void main(String[] args) {
        int day = 5;
        String dayName;

        switch (day) {
            case 1:
                dayName = "Monday";
                break;
            case 2:
                dayName = "Tuesday";
                break;
            case 3:
                dayName = "Wednesday";
                break;
            default:
                dayName = "Invalid day";
                break;
        }
        System.out.println("Day: " + dayName);
    }
}

###### What are? ######
-Expression: The expression inside the `switch` statement must be of type `byte`, `short`, `char`, `int`, `String`, or an enum.
-Case Labels: Each `case` label must be a constant or a literal. Duplicate case values are not allowed.
-Break Statement: The `break` statement is used to terminate a `case` block. If omitted, the execution will continue to the next `case` block (this is called "fall-through").
-Default Case: The `default` case is optional and can be used to execute a block of code if none of the `case` values match the expression.



-
