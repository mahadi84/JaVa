
===============08. Handling Exceptions(05): ====================8-9Aug-24(Thursday-Friddy)

01. Differentiate among checked exceptions, unchecked exceptions, and Errors
02. Create a try-catch block and determine how exceptions alter normal program flow
03. Describe the advantages of Exception handling 
04. Create and invoke a method that throws an exception
05. Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException)


============================================================================================================
-----------01. Differentiate among checked exceptions, unchecked exceptions, and Errors-----------
============================================================================================================

###### Exception, type of Exception.
###### 1. Checked Exceptions(Name any three of them)
###### Example with 01. try-catch block and 02. throws: 
###### 2. Unchecked Exceptions(Name any three of them)
###### Errors(Name any three of them)
###### Difference among Checked Exceptions, Unchecked Exceptions and  Errors
###### Key Differences: try-catch and throws


########### Exception ###########
An event that disrupts the normal flow of a program's execution.
When an exception is thrown, the program's execution stops at the point of the exception and looks for a suitable handler.   
   They are objects:: Exceptions are instances of classes that extend the Throwable class.
   Thrown at runtime:: Exceptions occur during program execution, not during compilation.   

   Types of exceptions: 
      01. Checked Exceptions 
      02. Unchecked Exceptions

###### 1. Checked Exceptions ######
-the compiler forces me to handle or declare. 
-represent potential EXTERNAL(file I/O errors, SQL, network issues, or invalid user input.) errors 
 that can occur OUTSIDE the immediate control of the program, 

####### Name any three of them: #######
- `IOException`: Thrown when an I/O operation fails.
- `SQLException`: Thrown when there is a database access error.
- `FileNotFoundException`: Thrown when a file with the specified pathname does not exist.

####### Example Code: #######
There are 2 two primary ways to handle checked exceptions:

   01. Using a try-catch block:
      try {
      // Code that might throw a checked exception
      } catch (IOException e) {
      // Handle the exception
      }
      ----
      Example:
          import java.io.File;
          import java.io.FileReader;
          import java.io.IOException;
          
          public class CheckedExceptionExample {
              public static void main(String[] args) {
                  try {
                      File file = new File("nonexistentfile.txt");
                      FileReader fr = new FileReader(file); // This line may throw IOException
                  } catch (IOException e) {
                      e.printStackTrace(); // Handling the checked exception
                  }
              }
          }
   
   02. Declaring the exception with throws:
      -The throws keyword in Java is used to declare that a method might throw a specific exception. 
      -It's a way to inform the caller of the method about potential exceptions that could occur.
         Example:
         public void myMethod() throws IOException {
             // Method might throw IOException
         }
                 Example:
                 import java.io.IOException;
                   public static void readFile(String fileName) throws IOException {
                         // Code to read from the file
                     }

                    public class CheckedExceptionExample {
                        public static void main(String[] args) throws IOException {
                            readFile("data.txt");
                        }
                  ----
                     public static void main(String[] args) {
                        try {
                             readFile("data.txt");
                        } catch (IOException e) {
                        System.out.println("Error reading file: " + e.getMessage());
                        }
                     }
                 }
         ------- multiple exceptions: -----
         Example with multiple exceptions:
         
         import java.io.IOException;
         import java.sql.SQLException;
         
         public class MultipleExceptions {
           public static void processData(String fileName, String databaseUrl) throws IOException, SQLException {
             // Code to read data from file and process it
             // Might throw IOException or SQLException
           }
         }


###### 2. Unchecked Exceptions ######
-Compiler does not force I to handle or declare. 
-It represents PROGRAMMING(logic or improper use of APIs) errors or 
-Unexpected conditions that should not occur in normal program execution.
-Runtime Checking: Not checked at compile time but are checked at runtime. They occur due to programming errors such as 

####### Name any three of them: #######
- `NullPointerException`: Thrown when an application attempts to use `null` where an object is required.
- `ArrayIndexOutOfBoundsException`: Thrown when an array is accessed with an illegal index.
- `ArithmeticException`: Thrown when an exceptional arithmetic condition has occurred, such as division by zero.

####### Example Code: #######
public class UncheckedExceptionExample {
    public static void main(String[] args) {
        int[] array = new int[5];
        try {
            int value = array[10]; // This line may throw ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            e.printStackTrace(); // Handling the unchecked exception
        }
    }
}

###### Errors ######
-Is a serious problem that occurs during program execution, 
 typically indicating a system-level issue rather than a programming mistake. 
-These are often unrecoverable conditions that result in program termination.
**They are subclasses of the `Error` class and are generally used by the Java Virtual Machine (JVM) to indicate severe problems that are outside the control of the application.

####### Name any three of them #######
- OutOfMemoryError: Thrown when the JVM cannot allocate memory.
- StackOverflowError: Thrown when the stack of a thread overflows, typically due to deep or infinite recursion.
- VirtualMachineError: A superclass of errors that are related to the virtual machine's internal issues.
- ThreadDeath: Signals that a thread has been forcibly terminated.
- LinkageError: Occurs during linking, when classes or interfaces cannot be correctly linked.
- AssertionError: Thrown when an assertion fails.

####### Example Code: #######
public class ErrorExample {
    public static void main(String[] args) {
        // This code will throw StackOverflowError due to infinite recursion
        try {
            recurseIndefinitely();
        } catch (StackOverflowError e) {
            e.printStackTrace(); // Handling the error
        }
    }

    public static void recurseIndefinitely() {
        recurseIndefinitely();
    }
}

###### Difference among Checked Exceptions,  Unchecked Exceptions and  Errors ######
- Checked Exceptions:
  - Defination
  - Represent conditions that a program should anticipate and handle.
  - Examples: `IOException`, `SQLException`, `FileNotFoundException`.

- Unchecked Exceptions:
  - Defination
  - Represent programming errors or bugs, typically indicating flaws in the logic.
  - Examples: `NullPointerException`, `ArrayIndexOutOfBoundsException`, `ArithmeticException`.

- Errors:
  - Defination
  - Represent issues related to the JVM or system-level problems.
  - Examples: `OutOfMemoryError`, `StackOverflowError`, `VirtualMachineError`.


######### Key Differences: try-catch and throws  ##########
 Example: Check: 1. Checked Exceptions 
----------------------------------------------------------------------
Feature        |	try-catch         |	throws
----------------------------------------------------------------------
Scope	  -------|  Local to a block	| Method level
Responsibility-|	Handles exception |	Declares potential exception
Mandatory -----|	Not required	   | Required for checked exceptions
-----------------------------------------------------------------------



============================================================================================================
-----------02. Create a try-catch block and determine how exceptions alter normal program flow-----------
============================================================================================================
###### Exception
###### Why Try-Catch Block 
####### Structure of a Try-Catch Block, Finally Block,  Multiple Catch Blocks
###### How Exceptions Alter Normal Program Flow 


###### Exception######
Exceptions interrupt the normal flow of program-execution.

###### Why Try-Catch Block ######
A `try-catch` block allows I to handle exceptions gracefully, preventing the program from crashing and enabling I to manage errors more effectively.

####### Structure of a Try-Catch Block ######
1. Try Block:
   -The `try` block contains code that might throw an exception. 
   -Used to enclose the statements where exceptions are likely to occur.

2. Catch Block:
   -The `catch` block follows the `try` block and is used to handle specific types of exceptions. 
   -Can have multiple `catch` blocks to handle different exceptions differently.

3. Finally Block (Optional):
   -The `finally` block, if present, is executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or not. 
   -It is typically used for cleanup code, such as closing files or releasing resources.

4. Multiple Catch Blocks:
   -I can have multiple `catch` blocks to handle different types of exceptions, allowing I to specify different handling logic for different exceptions.

####### Example ######
   public class TryCatchExample {
       public static void main(String[] args) {
         --- 01---
           try {
               int[] numbers = {1, 2, 3};
               int result = numbers[5]; // This line throws ArrayIndexOutOfBoundsException
               System.out.println(result);
           } catch (ArrayIndexOutOfBoundsException e) {
               System.out.println("Caught an ArrayIndexOutOfBoundsException: " + e.getMessage());
           } catch (Exception e) {
               System.out.println("Caught an exception: " + e.getMessage());
           } finally {
               System.out.println("This block always executes");
           }
   }

     --- 02---
       public class MultipleExceptions {
          public static void main(String[] args) {
              int[] numbers = {1, 2, 3};
              int divisor = 0;
      
              try {
                  // This block might throw ArithmeticException or ArrayIndexOutOfBoundsException
                  int result = numbers[4] / divisor;
                  System.out.println(result);
              } catch (ArithmeticException e) {
                  System.out.println("Arithmetic Exception occurred: " + e.getMessage());
              } catch (ArrayIndexOutOfBoundsException e) {
                  System.out.println("Array Index Out Of Bounds Exception occurred: " + e.getMessage());
              } catch (Exception e) {
                  System.out.println("Generic Exception occurred: " + e.getMessage());
              }
          }
      }



###### How Exceptions Alter Normal Program Flow ######
When an exception occurs, it alters the normal flow of the program in the following ways:

1. Interrupts Normal Execution:
   -When an exception is thrown, the normal flow of execution is interrupted. 
   -The JVM looks for a `catch` block that can handle the thrown exception.

2. Exception Propagation:
   -If a `catch` block is not found in the current method, the exception is propagated up the call stack to the calling method. 
   -This continues until the exception is either caught or the program terminates.

3. Execution of Catch Block:
   -Once a matching `catch` block is found, control is transferred to that block, and the code within it is executed. 
   -The program then continues after the `try-catch` block.

4. Finally Block Execution:
   -Regardless of whether an exception was thrown or not, the `finally` block is executed after the `try` and `catch` blocks. 
   -This block is used for cleanup tasks that need to be performed regardless of the exception occurrence.

5. Termination of the Program:
   - If no `catch` block can handle the exception and the exception propagates up to the main method or any top-level method, the program may terminate and display the stack trace.




============================================================================================================
-----------03. Describe the advantages of Exception handling -----------
============================================================================================================

###### Defination for all
###### 1. Improved Program Stability 
###### 2. Enhanced Code Readability and Maintenance 
###### 3. Centralized Error Handling 
###### 4. Error Reporting and Debugging 
###### 5. Graceful Degradation 
###### 6. Robust and Resilient Code 


###### Defination for all ######
- Improved Stability: Prevents program crashes by handling errors gracefully.
- Enhanced Readability and Maintenance: Separates error handling from business logic, making code cleaner.
- Centralized Error Handling: Allows for consistent error management across the application.
- Error Reporting and Debugging: Provides detailed information for diagnosing and fixing issues.
- Graceful Degradation: Offers fallback mechanisms or alternative solutions when errors occur.
- Robust and Resilient Code: Helps build applications that can handle unexpected situations without failure.


###### 1. Improved Program Stability ######
Example:
public class StabilityExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0; // ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Cannot divide by zero. Exception handled.");
        }
        System.out.println("Program continues after exception handling.");
    }
}

Explanation:
- The program catches the `ArithmeticException` and handles it, allowing it to continue executing the remaining code.

###### 2. Enhanced Code Readability and Maintenance ######
Using exceptions helps separate error handling code from regular business logic, making the codebase cleaner and more readable. This separation improves maintainability by organizing error handling into specific `catch` blocks and allowing the main logic to focus on its primary responsibilities.

Example:
public class ReadabilityExample {
    public static void main(String[] args) {
        try {
            processFile("file.txt");
        } catch (IOException e) {
            System.out.println("File processing error: " + e.getMessage());
        }
    }

    public static void processFile(String filename) throws IOException {
        // File processing logic
    }
}

Explanation:
- The file processing logic and error handling are separated, enhancing code readability and maintenance.

###### 3. Centralized Error Handling ######
Exception handling provides a mechanism for centralizing error handling logic, which is particularly useful in large applications. 
I can use custom exception handlers or a global exception handling strategy to manage errors in a centralized manner, improving consistency and reducing redundancy.

Example:
public class CentralizedErrorHandlingExample {
    public static void main(String[] args) {
        try {
            performOperation();
        } catch (Exception e) {
            handleException(e);
        }
    }

    public static void performOperation() throws Exception {
        // Some operation that may throw an exception
    }

    public static void handleException(Exception e) {
        System.out.println("Handling exception: " + e.getMessage());
    }
}

Explanation:
- The `handleException` method centralizes the error handling logic, which simplifies managing exceptions across the application.

###### 4. Error Reporting and Debugging ######
Exception handling allows for detailed error reporting and debugging. By catching exceptions, 
I can log detailed information about the error, including stack traces, which aids in diagnosing and fixing issues. 
This is especially valuable in production environments where I need to track down and resolve errors without stopping the application.

Example:
import java.io.IOException;

public class DebuggingExample {
    public static void main(String[] args) {
        try {
            readFile("nonexistentfile.txt");
        } catch (IOException e) {
            e.printStackTrace(); // Prints stack trace for debugging
        }
    }

    public static void readFile(String filename) throws IOException {
        // Simulate reading file
        throw new IOException("File not found");
    }
}

Explanation:
- The `e.printStackTrace()` method provides detailed information about the exception, which helps in debugging the issue.

###### 5. Graceful Degradation ######
Exception handling allows programs to degrade gracefully by providing fallback mechanisms or alternative solutions when an error occurs. 
Instead of failing completely, the program can use exception handling to recover from errors or provide a meaningful message to the user.

Example:
public class GracefulDegradationExample {
    public static void main(String[] args) {
        try {
            performOperation();
        } catch (IOException e) {
            System.out.println("Operation failed. Please try again later.");
        }
    }

    public static void performOperation() throws IOException {
        // Some operation that may fail
    }
}

Explanation:
- When an exception occurs, a user-friendly message is displayed, allowing the application to handle errors gracefully and provide a better user experience.

###### 6. Robust and Resilient Code ######
Exception handling enables I to write more robust and resilient code by anticipating potential errors and handling them appropriately. 
This approach helps ensure that Ir application can deal with unexpected situations without crashing and maintains its functionality.

Example:
public class RobustCodeExample {
    public static void main(String[] args) {
        try {
            processTransaction();
        } catch (Exception e) {
            System.out.println("Transaction processing error: " + e.getMessage());
        }
    }

    public static void processTransaction() throws Exception {
        // Code to process a transaction
        throw new Exception("Transaction failed");
    }
}

Explanation:
- By handling exceptions, the code becomes more resilient to errors and can provide meaningful feedback or recovery options.



============================================================================================================
-----------04. Create and invoke a method that throws an exception-----------
============================================================================================================

###### Creating(01.Declare and 02.Throw the Exception) a Method That Throws an Exception
###### Invoking (01.Handle the Exception, 02.Propagating an Exception) a Method That Throws an Exception


###### Creating a Method That Throws an Exception ######
To create a method that throws an exception, I need to:

1. Declare the Exception in the Method Signature:
   -Use the `throws` keyword in the method signature to declare that the method can throw one or more exceptions. 
   -This informs the caller of the method that they need to handle or declare the exceptions.

2. Throw the Exception Using the `throw` Keyword:
   - Use the `throw` keyword inside the method to actually throw an exception when a specific condition is met.

###### Example: Creating a Method That Throws an Exception ######
public class ExceptionThrowExample {
    // Method that throws an IOException
    public void readFile(String filePath) throws IOException {
        if (filePath == null || filePath.isEmpty()) {
            throw new IOException("File path is invalid.");
        }
        // Code to read the file (not implemented here)
    }

    public static void main(String[] args) {
        ExceptionThrowExample example = new ExceptionThrowExample();

        try {
            // Invoking the method
            example.readFile(""); // This will throw an IOException
        } catch (IOException e) {
            System.out.println("Caught an IOException: " + e.getMessage());
        }
    }
}


###### Invoking a Method That Throws an Exception ######
When I invoke a method that declares it can throw an exception, I need to:
1. Handle the Exception:
   -Use a `try-catch` block to handle the exception within the code that calls the method.

2. Propagate the Exception:
   -If I don't handle the exception within the method that invokes it, I must declare that the method itself can throw the exception using the `throws` keyword. 
   -This propagates the exception to the method that called it.

###### Example: Propagating an Exception ######
public class ExceptionPropagationExample {
    // Method that calls another method which throws an exception
    public void performOperation() throws IOException {
        readFile("somefile.txt"); // This method can throw IOException
    }

    // Method that throws an IOException
    public void readFile(String filePath) throws IOException {
        if (filePath == null || filePath.isEmpty()) {
            throw new IOException("File path is invalid.");
        }
        // Code to read the file (not implemented here)
    }

    public static void main(String[] args) {
        ExceptionPropagationExample example = new ExceptionPropagationExample();

        try {
            example.performOperation(); // This method can throw IOException
        } catch (IOException e) {
            System.out.println("Caught an IOException: " + e.getMessage());
        }
    }
}

- Exception Propagation: The `performOperation` method calls `readFile`, which throws an `IOException`. Since `performOperation` doesn't handle the exception itself, it declares that it can throw `IOException` using the `throws` keyword.
- Exception Handling: The `main` method invokes `performOperation` within a `try` block, handling the potential `IOException` in the `catch` block.


====================================================================================================================================================================
-----------05. Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException)-----------
====================================================================================================================================================================

What are these, How to Recognize them?
######## NullPointerException, 
######## ArithmeticException, 
######## ArrayIndexOutOfBoundsException, 
######## ClassCastException

########### Definaiton ==============
-NullPointerException: Occurs when operations are performed on a `null` reference. Common when accessing methods or fields of `null` objects.
-ArithmeticException: Raised for exceptional arithmetic conditions, such as division by zero.
-ArrayIndexOutOfBoundsException: Thrown when attempting to access an array with an invalid index.
-ClassCastException: Happens when an object is cast to a type it is not an instance of.


### 1. `NullPointerException`
-Thrown when Ir code attempts to use `null` in a situation where an object is required. 
-This is one of the most common exceptions in Java.

######## Common Causes: ########
- Calling a method on a `null` object reference.
- Accessing or modifying a field of a `null` object.
- Taking the length of a `null` array.
- Accessing or modifying the elements of a `null` array.

######## Example: ########
public class NullPointerExceptionExample {
    public static void main(String[] args) {
        String str = null;
        try {
            int length = str.length(); // This line throws NullPointerException
        } catch (NullPointerException e) {
            System.out.println("Caught NullPointerException: " + e.getMessage());
        }
    }
}

Explanation:
- The `str` variable is `null`, and calling `length()` on it results in a `NullPointerException`.

### 2. `ArithmeticException`
`ArithmeticException` is thrown when an exceptional arithmetic condition occurs, such as division by zero.

######## Common Causes: ########
- Dividing an integer by zero.
- Performing other illegal arithmetic operations, such as overflow in integer calculations.

######## Example: ########
public class ArithmeticExceptionExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0; // This line throws ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Caught ArithmeticException: " + e.getMessage());
        }
    }
}

Explanation:
- Dividing `10` by `0` is an illegal operation and results in an `ArithmeticException`.

### 3. `ArrayIndexOutOfBoundsException`
`ArrayIndexOutOfBoundsException` is thrown when an array is accessed with an illegal index, such as an index that is negative or greater than or equal to the array size.

######## Common Causes: ########
- Accessing an array element with an index less than `0` or greater than or equal to the array’s length.

######## Example: ########
public class ArrayIndexOutOfBoundsExceptionExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3};
        try {
            int value = numbers[5]; // This line throws ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
        }
    }
}

Explanation:
- Accessing `numbers[5]` is out of bounds because the valid indices for the array are `0`, `1`, and `2`.

### 4. `ClassCastException`
`ClassCastException` is thrown when an attempt is made to cast an object to a class of which it is not an instance.

######## Common Causes: ########
- Attempting to cast an object to a subclass of which it is not an instance.
- Casting between incompatible types, such as between unrelated classes.

######## Example: ########
public class ClassCastExceptionExample {
    public static void main(String[] args) {
        Object obj = "Hello";
        try {
            Integer num = (Integer) obj; // This line throws ClassCastException
        } catch (ClassCastException e) {
            System.out.println("Caught ClassCastException: " + e.getMessage());
        }
    }
}

Explanation:
- The `obj` variable holds a `String`, but casting it to `Integer` results in a `ClassCastException`.




-
