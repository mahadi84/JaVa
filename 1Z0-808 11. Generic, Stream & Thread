

01. What is Generic? Where it is used? Key Benefits of Generics?
02. What is a Stream with examples of all three types?
03. What/WHY is Thread?  Explain the concept of multithreading and how to create and manage threads in Java.



====================01. Generics ==========================
-Define classes, interfaces, and methods that can work with different data (integers, strings, custom objects, or any other) types without compromising type safety.

#### Where it is used?
      A) Collections Framework (ArrayList, HashSet,HashMap)
      B) Method and Constructor Parameters: Example: public <T> void printElements(List<T> list) can print elements of any type.
      C) Custom Data Structures: Example: A generic "Stack" class can store elements of any type.

##### Key Benefits of Generics:
    Type Safety: Prevents type-related errors at compile time, improving code reliability.
    Reusability: Creates more reusable code by defining classes and methods that can work with different data types.
    Efficiency: Can sometimes improve performance by reducing the need for boxing and unboxing operations.
    
    Example:
      class GenericClass<T>{
          private T data;
          public GenericClass(T t){
              this.data = t;
          }
          public T getData(){
              return data;
          }    
      }
      
      public class InnerGenericClass {
          public static void main(String[] args) {
              GenericClass<Integer>  tInt = new GenericClass<>(10);
              GenericClass<String>  tInt1 = new GenericClass<>("Bismillah");
              System.out.println(tInt.getData());
              System.out.println(tInt1.getData());              
          }
      }



==================== 02. What is Stream? ===========================

-Stream processes the Collection like Filtering, Sorting, Mapping and Reducing

Example:
  import java.util.*;
  import java.util.stream.Collectors;

      public class StreamExample {
          // Define the Person class (replace with your actual implementation)
          public static class Person {
              private int age;
              private String name;
      
              Person(int a, String n) {
                  this.age=a;
                  this.name=n;
              }
      
              // Getters and setters for age and name (omitted for brevity)
              public int getAge() { return age; }
      
              public String getName() { return name;  }
          }
      
          public static void main(String[] args) {
              // Replace this with your actual way of creating a list of Person objects
              List<Person> people = List.of(
                      new Person(20, "Alice"),
                      new Person(16, "Bob"),
                      new Person(25, "Charlie")
              );
      
              // Filter by age, map to names, sort, and collect into a list
              List<String> names = people.stream()
                                         .filter(p -> p.getAge() >= 18) // Filter adults
                                         .map(Person::getName) // Map to names
                                         .sorted() // Sort names alphabetically
                                         .collect(Collectors.toList()); // Collect into a List
      
              System.out.println(names); // Output: [Alice, Charlie]
      
              // Reduce
               List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
                  int sum = numbers.stream()
                       .reduce(0, Integer::sum);
                  System.out.println(sum);
          }
      }


#######Key Points:
Intermediate operations: filter, sorted, and map are intermediate operations that create a new stream. They don't produce a final result.
Terminal operations: collect(Collectors.toList()) is a terminal operation that consumes the stream and produces a final result (a list in this case).
Pipelines: Multiple operations can be chained together in a pipeline to perform complex transformations.
Readability: Using streams can improve code readability and maintainability by expressing operations in a declarative style.




==================== 02. What are Threads and Multithreading? ===========================
Thread: --Concurrent Execution of multiple tasks within a single program.
        --Breaking down tasks into smaller, independent subtasks.
        --Executing these subtasks concurrently on multiple cores.
              -perform parallel
              -Shared resources
              -Lightweight

Multithreading: Concurrent Execution of two or more threads within a single program

########## Why Thread?
A) Multi-threaded Game Development:
  -Handling game logic, graphics rendering, and input processing simultaneously.
  -Creating smooth and responsive gameplay.
    Examples: Online multiplayer games, real-time strategy games.

B) Asynchronous Programming:
  -Executing long-running tasks without blocking the main thread.
  -Updating the user interface while performing background tasks.
  -Preventing the application from freezing.
     Examples: File I/O operations, network communication, database queries.

C) Server-Side Applications:
  -Handling multiple client requests simultaneously.Processing incoming data and sending responses efficiently.
    Examples: Web servers, database servers, chat servers.

#######Thread Synchronization:
  -Mechanisms to prevent race conditions(attempts to perform two or more operations at the same time) and ensure data consistency,
  -It uses synchronized blocks or methods, wait() and notify() methods, or ReentrantLock.

########## Creating Threads:---
        There are two primary ways to create threads in Java:

        01. Extending the Thread class:
        -------------------------------
        class MyThread extends Thread {
            public void run() {
                // Thread's execution code
            }
        }

        
        02. Implementing the Runnable interface:
        ----------------------------------------
        class MyTask implements Runnable {
            public void run() {
                // Thread's execution code
            }
        }

    ######## Example:
                public class MultithreadedExample {
                    public static void main(String[] args) {
                        Runnable task = () -> {
                            for (int i = 0; i < 5; i++) {
                                System.out.println("Thread: " + Thread.currentThread().getName() + ", Iteration: " + i);
                            }
                        };
        
                        Thread thread1 = new Thread(task, "Thread 1");
                        Thread thread2 = new Thread(task, "Thread 2");
                        Thread thread3 = new Thread(task, "Thread 3");
                
                        thread1.start();
                        thread2.start();
                        thread3.start();
                    }
                }

########Managing Threads:
Starting a Thread: Call the start() method on the Thread object to start the thread's execution.
Stopping a Thread: While Java doesn't have a built-in method to stop a thread directly, you can use techniques like setting a flag or using interrupt() to signal the thread to stop.
Joining a Thread: Use the join() method to wait for a thread to finish its execution before continuing the main thread.
Synchronization: Use synchronization mechanisms like synchronized blocks or methods to ensure that multiple threads access shared resources safely.
Thread Pools: Use ExecutorService to manage a pool of threads efficiently and avoid creating and destroying threads for each task.





-
