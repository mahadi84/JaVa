


=========================== Main =============================================

public class Main{
    public static void main(String[] args) throws Exception {
        DatabaseConnection databaseConnection = new DatabaseConnection();
        PatientCRUD patientCRUD = new PatientCRUD(databaseConnection);

        Patient patient = new Patient();        
        
        // Create a new patient
            patient.setName("Shafiullah");
            patient.setAge(18);
            patient.setGender("Male");
            patientCRUD.createPatient(patient);
    }
}


============================== Get Appointment ===============================

CREATE TABLE `book_appointment` (
  `id` int(20) AUTO_INCREMENT PRIMARY KEY,
  `patientId` int(100) NOT NULL,
  `doctorId` int(100) NOT NULL,
  `appointmentDate` varchar(100) NOT NULL
)









=========================== Patient ==========================================

CREATE TABLE `patients` (
  `id` int(20) AUTO_INCREMENT PRIMARY KEY,
  `name` varchar(100) NOT NULL,
  `age` int(100) NOT NULL,
  `gender` varchar(100) NOT NULL
)
--------------------------------------------------


public class Patient {
    private int id;
    private String name;
    private int age;
    private String gender;

    // Getters 
    public int getId() {return id; }
    public String getName() {return name; }
    public int getAge() {return age; }
    public String getGender() {return gender; }

    //Setters
    public void setId(int id) {this.id=id; }
    public void setName(String name) {
        if (name == null || name.isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
            this.name = name;
    }
    public void setAge(int age) {
        if (age < 18 || age > 110) {
            throw new IllegalArgumentException("Age cannot be 0");
        }
            this.age = age;

    }

    public void setGender(String gender) {
        if (gender == null || gender.isEmpty()) {
            throw new IllegalArgumentException("Gender cannot be null or empty");
        }
            this.gender=gender; 

    }
//Update Field Validation
    public void updateName(String newName){
        setName(newName);        
    }
    public void updateAge(int newAge){
        setAge(newAge);
    }
    public void updateGender(String newAge){
        setGender(newAge);
    }



}

------------------------ Patient CRUD --------------------------

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PatientCRUD {
    private DatabaseConnection databaseConnection;

    public PatientCRUD(DatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

    // Create a new customer
    public void createPatient(Patient patient) throws SQLException {
        String query = "INSERT INTO patients (name, age, gender) VALUES (?, ?, ?)";
    
        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
            statement.setString(1, patient.getName());
            statement.setInt(2, patient.getAge());
            statement.setString(3, patient.getGender());

            int affectedRows = statement.executeUpdate();
            if (affectedRows > 0) {
                System.out.println("Patient added successfully!");
            } else {
                System.out.println("Failed to add patient!");
            }
        } catch (SQLException e) {
            System.err.println("Error while adding patient: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }    

// Show all customers
    public void viewPatients(){
        String query = "select * from patients";
        try{
            PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            System.out.println("Patients: ");
            System.out.println("+------------+------------------------------+----------+------------+");
            System.out.println("| Patient Id | Name                         | Age      | Gender     |");
            System.out.println("+------------+------------------------------+----------+------------+");
            while(resultSet.next()){
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                int age = resultSet.getInt("age");
                String gender = resultSet.getString("gender");
                System.out.printf("| %-10s | %-28s | %-8s | %-10s |\n", id, name, age, gender);
                System.out.println("+------------+------------------------------+----------+------------+");
            }

        }catch (SQLException e){
            e.printStackTrace();
        }

    }

    
    // Get patient by ID
    public Patient getPatientById(int id) throws SQLException {
        if (id <= 0) { throw new IllegalArgumentException("ID must be a numaric."); }

        String query = "SELECT * FROM patients WHERE id = ?";
        Patient patient = null; // Initialize the Patient object

        try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Create a new Patient object from the result set
                    patient = new Patient();
                    patient.setId(resultSet.getInt("id"));
                    patient.setName(resultSet.getString("name"));
                    patient.setAge(resultSet.getInt("age"));
                    patient.setGender(resultSet.getString("gender"));
                    System.out.println("Patient found: " + patient.getName());
                } else {
                    System.out.println("No patient found with this ID.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error while retrieving patient: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }

        return patient; // Return the Patient object (or null if not found)
    }



      // Update a customer
    public void updatePatient(Patient patient) throws SQLException {
        List<String> updates = new ArrayList<>();
        List<Object> parameters = new ArrayList<>();
        
        if (patient.getName() != null) {
            updates.add("name = ?");
            parameters.add(patient.getName());
        }
        if (patient.getAge() != 0) {
            updates.add("age = ?");
            parameters.add(patient.getAge());
        }
        if (patient.getGender() != null) {
            updates.add("gender = ?");
            parameters.add(patient.getGender());
        }

        if (updates.isEmpty()) {
            System.out.println("No fields to update.");
            return; // No updates to perform
        }

        String sql = "UPDATE patients SET " + String.join(", ", updates) + " WHERE id = ?";
        parameters.add(patient.getId());

        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql)) {
            for (int i = 0; i < parameters.size(); i++) {
                statement.setObject(i + 1, parameters.get(i));
            }

            int affectedRows = statement.executeUpdate();
            if (affectedRows > 0) {
                System.out.println("Patient updated successfully!");
            } else {
                System.out.println("Failed to update patient!");
            }
        }
    }


        // Delete a Patient
        public void deletePatient(int patientId) throws SQLException {
            if (patientId <= 0) {throw new IllegalArgumentException("Patient ID must be nemeric"); }

            String query = "DELETE FROM patients WHERE id = ?";
            try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
                statement.setInt(1, patientId);
                
                int affectedRows = statement.executeUpdate();
                if (affectedRows > 0) {
                    System.out.println("Patient deleted successfully!");
                } else {
                    System.out.println("No patient found with the provided ID. Deletion failed.");
                }
            } catch (SQLException e) {
                System.err.println("Error while deleting patient: " + e.getMessage());
                throw e; // Rethrow or handle the exception as needed
            }
        }


}


     // ----------------------- Update a Patient (Way_01) ---------------------------------------
** try and catch block will close DB Connection not need  "statement.close();"

public void updatePatient(Patient patient) throws SQLException {
        List<String> updates = new ArrayList<>();
        List<Object> parameters = new ArrayList<>();
        
        if (patient.getName() != null) {
            updates.add("name = ?");
            parameters.add(patient.getName());
        }
        if (patient.getAge() != 0) {
            updates.add("age = ?");
            parameters.add(patient.getAge());
        }
        if (patient.getGender() != null) {
            updates.add("gender = ?");
            parameters.add(patient.getGender());
        }

        if (updates.isEmpty()) {
            System.out.println("No fields to update.");
            return; // No updates to perform
        }

        String sql = "UPDATE patients SET " + String.join(", ", updates) + " WHERE id = ?";
        parameters.add(patient.getId());

        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql)) {
            for (int i = 0; i < parameters.size(); i++) {
                statement.setObject(i + 1, parameters.get(i));
            }

            int affectedRows = statement.executeUpdate();
            if (affectedRows > 0) {
                System.out.println("Patient updated successfully!");
            } else {
                System.out.println("Failed to update patient!");
            }
        }
    }


      // ----------------------- Update a Patient (Way_02) using Map<Integer, Object>   ---------------------------------------

            public void updatePatient(Patient patient) throws SQLException {
                StringBuilder sql = new StringBuilder("UPDATE patients SET ");
                Map<Integer, Object> parameters = new HashMap<>();
                int parameterIndex = 1;
            
                if (patient.getName() != null) {
                    parameters.put(parameterIndex++, patient.getName());
                    sql.append("name = ?, ");
                }
                if (patient.getAge() != 0) {
                    parameters.put(parameterIndex++, patient.getAge());
                    sql.append("age = ?, ");
                }
                if (patient.getGender() != null) {
                    parameters.put(parameterIndex++, patient.getGender());
                    sql.append("gender = ?, ");
                }
            
                if (sql.length() > 0) {
                    sql.deleteCharAt(sql.length() - 2);
                }
                sql.append(" WHERE id = ?");
            
                PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql.toString());
                for (Map.Entry<Integer, Object> entry : parameters.entrySet()) {
                    statement.setObject(entry.getKey(), entry.getValue());
                }
                statement.setInt(parameterIndex, patient.getId());
            
                int affectedRows = statement.executeUpdate();
                // ... handle success or failure as before
            }
      // ----------------------- Update a Patient (Way_03) ---------------------------------------

      public void updatePatient(Patient patient) throws SQLException {

        StringBuilder sql = new StringBuilder("UPDATE patients SET ");
         sql= patient.getName() != null ? sql.append("name = ?,"): sql.append("");
         sql= patient.getAge()  != 0 ? sql.append("age = ?,"): sql.append("");
         sql= patient.getGender() != null ? sql.append("gender = ?"): sql.append("");
         // Remove the last comma if it exists
            if (sql.length() > 0 && sql.charAt(sql.length() - 1) == ',') {
                 sql.deleteCharAt(sql.length() - 1);
            }        
         sql= sql.append(" WHERE id = ?");        
        
        PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql.toString());
        
        int parameterIndex = 1;

        if (patient.getName() != null) {            
            statement.setString(parameterIndex++, patient.getName());
        }
        if (patient.getAge() != 0) {
            statement.setInt(parameterIndex++, patient.getAge());
        }
        if (patient.getGender() != null) {
            statement.setString(parameterIndex++, patient.getGender());
        }
        statement.setInt(parameterIndex, patient.getId());

        int affectedRows= statement.executeUpdate();
        if(affectedRows>0){
            System.out.println("Patient update Successfully!!");
        }else{
            System.out.println("Failed to update Patient!!");
        }
        statement.close();        

    }

    // Delete a Patient
    public void deletePatient(int patientId) throws SQLException {
        String query = "DELETE FROM patients WHERE id = ?";
        PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query);
        statement.setInt(1, patientId);
        
        int affectedRows= statement.executeUpdate();
        if(affectedRows>0){
            System.out.println("Patient delete Successfully!!");
        }else{
            System.out.println("Failed to delete Patient!!");
        }

        statement.close();
    }

}

=========================== Doctor ===================================
CREATE TABLE `doctors` (
  `id` int(20) AUTO_INCREMENT PRIMARY KEY,
  `name` varchar(100) NOT NULL,
  `specialization` varchar(100) NOT NULL
)


------------------------ Doctor CRUD --------------------------



=========================== Appoinment ===============================



=========================== Database Connection ==============================

import java.sql.*;
        public class DatabaseConnection {
            private Connection connection;
            
            public DatabaseConnection() throws SQLException {
                // Replace placeholders with your database credentials
                String jdbcURL="jdbc:mysql:///java_doctor_appoinment";
                String username="root";
                String password="Mahadi@123";
                
                try{
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    // System.out.println("Driver is working fine.");
                }catch (ClassNotFoundException e){
                    System.out.println(e.getMessage());
                }
                
                try{
                    connection = DriverManager.getConnection(jdbcURL, username, password);
                    // System.out.println("Database connected succesfully");
                }catch( Exception e){
                    System.out.println(e);
                }
            }
        
            public Connection getConnection() {
                return connection;
            }
        
            public void closeConnection() {
                if (connection != null) {
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        System.out.println("Failed to close the database connection."+ e.getMessage());
                    }
                }
            }
        }
