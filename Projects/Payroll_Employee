
Date: 28 Oct 2024


Objective: 
    - Register Full Time and Part Time Employees using Abstract Class, Method and Inheritance
    - Calculate the Salary for both

Use of :
    - Abstract Class and Method
    - Find/Check specific Objects using id
    - Remove an element by value(Object), by index both works fine


------------------------------------------------

public class Main {
    public static void main(String[] args)  {
      PayRollSystem pr = new PayRollSystem();
       FullTimeEmployee fte= new FullTimeEmployee("Muhammad Mahadi Hasan", 20242201, 2500);
       FullTimeEmployee fte1= new FullTimeEmployee("Md. Shafiullah", 20242202, 3000);

       PartTimeEmployee pte= new PartTimeEmployee("Kabir Hossain", 20242101, 100, 30);

       pr.setEmployee(fte);
       pr.setEmployee(fte1);
       pr.setEmployee(pte);

       System.out.println("\n All Employees");
       pr.displayEmployee();
       pr.removeEmployee(20242201);
       System.out.println("\n After Remove one employee \n ");
       pr.displayEmployee();
       System.out.println("\n ");


    }
}




========================================== PayrollSystem ================================================

public class PayRollSystem {
    // private List<Employee> employees = new ArrayList<>();
    private List<Employee> employeesList;

    public PayRollSystem() {
        employeesList = new ArrayList<>();
    }

    public void setEmployee(Employee e) {
        employeesList.add(e);
    }

    public void removeEmployee(int removeEmpWithId){
         Employee removeEmployee = null;
        for (Employee emp : employeesList) {
            if (emp.getId() == removeEmpWithId) {
                removeEmployee = emp;
                break;               
            }
        }
        if (removeEmployee != null) {
            employeesList.remove(removeEmployee);  // Remove an element by value, by index both works fine
        }
    }

    public void displayEmployee(){
        for (Employee emp : employeesList) {
            System.out.println(emp);
        }
    }
}



========================================== Employee (Abstract Class) ================================================

abstract class Employee {
    private String name;
    private int id;

    public Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public int getId() { return id;}
    public String getName() {return name;}

    // Abstract method to be implemented by subclasses
    public abstract double calculateSalary();

    @Override
    public String toString() {
      return "Employee [name=" + name + ", id=" + id + ", salary=" + calculateSalary() + "]";
    }
}


========================================== FullTimeEmployee (Sub Class) ================================================
class FullTimeEmployee extends Employee {
    private double monthlySalary;

    public FullTimeEmployee(String name, int id, double monthlySalary) {
        super(name, id);
        this.monthlySalary = monthlySalary;
    }

    @Override
    public double calculateSalary() { return monthlySalary; }

}


========================================== PartTimeEmployee (Sub Class) ================================================
class PartTimeEmployee extends Employee {
    private int hoursWorked;
    private double hourlyRate;

    public PartTimeEmployee(String name, int id, int hoursWorked, double hourlyRate) {
        super(name, id);
        this.hoursWorked = hoursWorked;
        this.hourlyRate = hourlyRate;
    }

    @Override
    public double calculateSalary() { return hoursWorked * hourlyRate; }
}






-
