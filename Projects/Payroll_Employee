
Date: 28 Oct 2024


Objective: 
    - Register Full Time and Part Time Employees using Abstract Class, Method and Inheritance
    - Calculate the Salary for both

Use of :
    - Abstract Class and Method
    - ArrayList as Data Type and Parameter
    - Find/Check specific Objects using id
    - Remove an element by value(Object), by index both works fine


------------------- Database-Table-------------------------
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    employee_type VARCHAR(255) NOT NULL,
    monthly_salary DECIMAL(10, 2), 
    hourly_rate DECIMAL(10, 2),
    hours_worked INT
);


----------------------- Java Code ------------------------
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        PayRollSystem pr = new PayRollSystem("your_database_url", "your_username", "your_password"); 

        // Add employees
        pr.addEmployee(new FullTimeEmployee("Muhammad Mahadi Hasan", 20242201, 2500));
        pr.addEmployee(new FullTimeEmployee("Md. Shafiullah", 20242202, 3000));
        pr.addEmployee(new PartTimeEmployee("Kabir Hossain", 20242101, 100, 30)); 

        // Display employees
        System.out.println("\nAll Employees");
        pr.displayEmployee();

        // Remove an employee
        pr.removeEmployee(20242201); 
        System.out.println("\nAfter Remove one employee \n");
        pr.displayEmployee();
        System.out.println("\n");
    }
}

// ====================== PayrollSystem =======================

public class PayRollSystem {
    private String dbUrl;
    private String dbUsername;
    private String dbPassword;

    public PayRollSystem(String dbUrl, String dbUsername, String dbPassword) {
        this.dbUrl = dbUrl;
        this.dbUsername = dbUsername;
        this.dbPassword = dbPassword;
    }

    public void addEmployee(Employee e) {
        try (Connection connection = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
             PreparedStatement statement = connection.prepareStatement(
                     "INSERT INTO employees (id, name, employee_type, monthly_salary, hourly_rate, hours_worked) " +
                             "VALUES (?, ?, ?, ?, ?, ?)")) {

            statement.setInt(1, e.getId());
            statement.setString(2, e.getName());

            if (e instanceof FullTimeEmployee) {
                statement.setString(3, "FullTime");
                statement.setDouble(4, ((FullTimeEmployee) e).getMonthlySalary());
                statement.setNull(5, Types.DECIMAL); 
                statement.setNull(6, Types.INTEGER);
            } else if (e instanceof PartTimeEmployee) {
                statement.setString(3, "PartTime");
                statement.setNull(4, Types.DECIMAL);
                statement.setDouble(5, ((PartTimeEmployee) e).getHourlyRate());
                statement.setInt(6, ((PartTimeEmployee) e).getHoursWorked());
            } else {
                throw new IllegalArgumentException("Unsupported employee type");
            }

            statement.executeUpdate();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }


    public void removeEmployee(int removeEmpWithId) {
        try (Connection connection = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
             PreparedStatement statement = connection.prepareStatement(
                     "DELETE FROM employees WHERE id = ?")) {

            statement.setInt(1, removeEmpWithId);
            statement.executeUpdate();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void displayEmployee() {
        try (Connection connection = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM employees")) {

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String employeeType = resultSet.getString("employee_type");
                double salary = 0.0;

                if ("FullTime".equals(employeeType)) {
                    salary = resultSet.getDouble("monthly_salary");
                } else if ("PartTime".equals(employeeType)) {
                    double hourlyRate = resultSet.getDouble("hourly_rate");
                    int hoursWorked = resultSet.getInt("hours_worked");
                    salary = hourlyRate * hoursWorked;
                }

                System.out.println("Employee [name=" + name + ", id=" + id + ", salary=" + salary + "]");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

// ====================== Employee (Abstract Class) =======================
abstract class Employee {
    // ... (no changes in this class)
}

// ====================== FullTimeEmployee =======================
class FullTimeEmployee extends Employee {
    private double monthlySalary;

    // ... (constructor)

    public double getMonthlySalary() {
        return monthlySalary;
    }

    // ... (other methods)
}

// ====================== PartTimeEmployee =======================
class PartTimeEmployee extends Employee {
    private int hoursWorked;
    private double hourlyRate;

    // ... (constructor)

    public int getHoursWorked() {
        return hoursWorked;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    // ... (other methods)
}








----------------------Without Database--------------------------

public class Main {
    public static void main(String[] args)  {
      PayRollSystem pr = new PayRollSystem();
       FullTimeEmployee fte= new FullTimeEmployee("Muhammad Mahadi Hasan", 20242201, 2500);
       FullTimeEmployee fte1= new FullTimeEmployee("Md. Shafiullah", 20242202, 3000);

       PartTimeEmployee pte= new PartTimeEmployee("Kabir Hossain", 20242101, 100, 30);

       pr.setEmployee(fte);
       pr.setEmployee(fte1);
       pr.setEmployee(pte);

       System.out.println("\n All Employees");
       pr.displayEmployee();
       pr.removeEmployee(20242201);
       System.out.println("\n After Remove one employee \n ");
       pr.displayEmployee();
       System.out.println("\n ");


    }
}




========================================== PayrollSystem ================================================

public class PayRollSystem {
    // private List<Employee> employees = new ArrayList<>();
    private List<Employee> employeesList;

    public PayRollSystem() {
        employeesList = new ArrayList<>();
    }

    public void setEmployee(Employee e) {
        employeesList.add(e);
    }

    public void removeEmployee(int removeEmpWithId){
         Employee removeEmployee = null;
        for (Employee emp : employeesList) {
            if (emp.getId() == removeEmpWithId) {
                removeEmployee = emp;
                break;               
            }
        }
        if (removeEmployee != null) {
            employeesList.remove(removeEmployee);  // Remove an element by value, by index both works fine
        }
    }

    public void displayEmployee(){
        for (Employee emp : employeesList) {
            System.out.println(emp);
        }
    }
}



========================================== Employee (Abstract Class) ================================================

abstract class Employee {
    private String name;
    private int id;

    public Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public int getId() { return id;}
    public String getName() {return name;}

    // Abstract method to be implemented by subclasses
    public abstract double calculateSalary();

    @Override
    public String toString() {
      return "Employee [name=" + name + ", id=" + id + ", salary=" + calculateSalary() + "]";
    }
}


========================================== FullTimeEmployee (Sub Class) ================================================
class FullTimeEmployee extends Employee {
    private double monthlySalary;

    public FullTimeEmployee(String name, int id, double monthlySalary) {
        super(name, id);
        this.monthlySalary = monthlySalary;
    }

    @Override
    public double calculateSalary() { return monthlySalary; }

}


========================================== PartTimeEmployee (Sub Class) ================================================
class PartTimeEmployee extends Employee {
    private int hoursWorked;
    private double hourlyRate;

    public PartTimeEmployee(String name, int id, int hoursWorked, double hourlyRate) {
        super(name, id);
        this.hoursWorked = hoursWorked;
        this.hourlyRate = hourlyRate;
    }

    @Override
    public double calculateSalary() { return hoursWorked * hourlyRate; }
}






-
