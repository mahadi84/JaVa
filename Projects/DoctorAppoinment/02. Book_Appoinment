


------------- Table ----------------
CREATE TABLE book_appointment(
  id int(20) AUTO_INCREMENT PRIMARY KEY,
  patientId int(100) NOT NULL,
  doctorId int(100) NOT NULL,
  appointmentDate varchar(100) NOT NULL
  bookingDate varchar(100) NOT NULL
)

---------------------



import java.sql.*;

public class BookAppointment {

    private DatabaseConnection databaseConnection;

    public BookAppointment(DatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

    public boolean checkDoctorAvailable(int doctorId, String appointmentDate) throws SQLException {
        validateInputs(doctorId, appointmentDate);

        String query = "SELECT COUNT(*) FROM book_appointment WHERE doctorId = ? AND appointmentDate = ?";
        try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
            preparedStatement.setInt(1, doctorId);
            preparedStatement.setString(2, appointmentDate);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt(1) == 0; // Return true if no appointments exist
                }
            }
        }
        return false; // Default to false if no results
    }

    public boolean bookAppointment(int doctorId, int patientId, String appointmentDate) throws SQLException {
        validateInputs(doctorId, appointmentDate);
        if (patientId <= 0) {
            throw new IllegalArgumentException("Patient ID must be positive.");
        }

        String query = "INSERT INTO book_appointment (doctorId, patientId, appointmentDate) VALUES (?, ?, ?)";
        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
            statement.setInt(1, doctorId);
            statement.setInt(2, patientId);
            statement.setString(3, appointmentDate);

            int affectedRows = statement.executeUpdate();
            return affectedRows > 0; // Return true if appointment was booked successfully
        } catch (SQLException e) {
            System.err.println("Error while booking appointment: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }

    public void viewAllAppointments() throws SQLException {
        String query = "SELECT * FROM book_appointment";
        try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            System.out.println("Booked Appointments: ");
            System.out.println("+------------+----------------+----------------+------------+");
            System.out.println("| Sl.        | Doctor ID      |  Patient ID    | Date       |");
            System.out.println("+------------+----------------+----------------+------------+");
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                int doctorId = resultSet.getInt("doctorId");
                int patientId = resultSet.getInt("patientId");
                String appointmentDate = resultSet.getString("appointmentDate");
                System.out.printf("| %-10s | %-14s | %-14s | %-10s |\n", id, doctorId, patientId, appointmentDate);
                System.out.println("+------------+----------------+----------------+------------+");
            }
        }
    }

    private void validateInputs(int doctorId, String appointmentDate) {
        if (doctorId <= 0) {
            throw new IllegalArgumentException("Doctor ID must be positive.");
        }
        if (appointmentDate == null || appointmentDate.trim().isEmpty()) {
            throw new IllegalArgumentException("Appointment date cannot be null or empty.");
        }
    }
}




-
