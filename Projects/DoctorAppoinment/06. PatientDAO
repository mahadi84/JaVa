import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PatientDAO {
    private DatabaseConnection databaseConnection;

    public PatientDAO(DatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

//------------------------ Create a new customer------------------------------------
    public void createPatient(Patient patient) throws SQLException {
        String query = "INSERT INTO patients (name, age, gender) VALUES (?, ?, ?)";
    
        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
            statement.setString(1, patient.getName());
            statement.setInt(2, patient.getAge());
            statement.setString(3, patient.getGender());

            int affectedRows = statement.executeUpdate();
            System.out.println(affectedRows > 0 ? "Patient added successfully!" : "Failed to add patient!");
        } catch (SQLException e) {
            System.err.println("Error while adding patient: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }    

//----------------------------- Show all customers---------------------------------------
    public void viewPatients(){
        String query = "select * from patients";
        try{
            PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            System.out.println("Patients: ");
            System.out.println("+------------+------------------------------+----------+------------+");
            System.out.println("| Patient Id | Name                         | Age      | Gender     |");
            System.out.println("+------------+------------------------------+----------+------------+");
            while(resultSet.next()){
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                int age = resultSet.getInt("age");
                String gender = resultSet.getString("gender");
                System.out.printf("| %-10s | %-28s | %-8s | %-10s |\n", id, name, age, gender);
                System.out.println("+------------+------------------------------+----------+------------+");
            }

        }catch (SQLException e){
            e.printStackTrace();
        }

    }

    
//--------------------------------- Get patient by ID ------------------------------------
    public Patient getPatientById(int id) throws SQLException {
        if (id <= 0) { throw new IllegalArgumentException("ID must be a numaric."); }

        String query = "SELECT * FROM patients WHERE id = ?";
        Patient patient = null; // Initialize the Patient object

        try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Create a new Patient object from the result set
                    patient = new Patient();
                    patient.setId(resultSet.getInt("id"));
                    patient.setName(resultSet.getString("name"));
                    patient.setAge(resultSet.getInt("age"));
                    patient.setGender(resultSet.getString("gender"));
                    System.out.println("Patient found: " + patient.getName());
                } else {
                    System.out.println("No patient found with this ID.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error while retrieving patient: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }

        return patient; // Return the Patient object (or null if not found)
    }



//------------------------ Update a patient -------------------------------
    public void updatePatient(Patient patient) throws SQLException {
        List<String> updates = new ArrayList<>();
        List<Object> parameters = new ArrayList<>();
        
        if (patient.getName() != null) {
            updates.add("name = ?");
            parameters.add(patient.getName());
        }
        if (patient.getAge() != 0) {
            updates.add("age = ?");
            parameters.add(patient.getAge());
        }
        if (patient.getGender() != null) {
            updates.add("gender = ?");
            parameters.add(patient.getGender());
        }

        if (updates.isEmpty()) {
            System.out.println("No fields to update.");
            return; // No updates to perform
        }

        String sql = "UPDATE patients SET " + String.join(", ", updates) + " WHERE id = ?";
        parameters.add(patient.getId());

        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql)) {
            for (int i = 0; i < parameters.size(); i++) {
                statement.setObject(i + 1, parameters.get(i));
            }

            int affectedRows = statement.executeUpdate();
            System.out.println(affectedRows > 0 ? "Patient updated successfully!" : "Failed to update patient! No Patient found.");
        }catch (SQLException e) {
            System.err.println("Error while adding doctor: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }


//---------------------- Delete a Patient -----------------------------------
        public void deletePatient(int patientId) throws SQLException {
            if (patientId <= 0) {throw new IllegalArgumentException("Patient ID must be nemeric"); }

            String query = "DELETE FROM patients WHERE id = ?";
            try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
                statement.setInt(1, patientId);
                int affectedRows = statement.executeUpdate();
                System.out.println(affectedRows > 0 ? "Patient deleted successfully!" : "No patient found with the provided ID. Deletion failed.");
            } catch (SQLException e) {
                System.err.println("Error while deleting patient: " + e.getMessage());
                throw e; // Rethrow or handle the exception as needed
            }
        }


//---------------------------- Patients Exist? ---------------------------
public  boolean patientExist(int patientId) throws SQLException {
    if (patientId <= 0) {
        throw new IllegalArgumentException("Patient ID must be numeric.");
    }

    String query = "SELECT count(*) FROM patients WHERE id = ?";
    try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
        preparedStatement.setInt(1, patientId);
        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                return resultSet.getInt(1) > 0; // Return true if count is greater than 0
            }
        }
    }
    return false; // No patient found
}


}


-
