
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DoctorDAO {
    private DatabaseConnection databaseConnection;

    public DoctorDAO(DatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

// ------------------------------ Create a new Doctor -------------------------------------------------
    public void createDoctor(Doctor doctor) throws SQLException {
        if (doctor == null) {
            throw new IllegalArgumentException("Doctor object cannot be null.");
        }

        String query = "INSERT INTO doctors (name, specialization) VALUES (?, ?)";
        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
            statement.setString(1, doctor.getName());
            statement.setString(2, doctor.getSpecialization());
            int affectedRows = statement.executeUpdate();
            System.out.println(affectedRows > 0 ? "Doctor updated successfully!" : "Failed to update doctor! No Doctor found.");
        } catch (SQLException e) {
            System.err.println("Error while adding doctor: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }


// ---------------------------------- Show all doctors ----------------------------------------
    public void viewDoctors(){
        String query = "select * from doctors";
        try{
            PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            System.out.println("Doctors: ");
            System.out.println("+------------+----------------------------+--------------------+");
            System.out.println("| Doctor Id | Name                        | Specialization     |");
            System.out.println("+------------+----------------------------+--------------------+");
            while(resultSet.next()){
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String specialization = resultSet.getString("specialization");
                System.out.printf("| %-10s | %-30s | %-18s  \n", id, name, specialization);
                System.out.println("+------------+----------------------------+----------------+");
            }

        }catch (SQLException e){
            e.printStackTrace();
        }

    }

//--------------------------------- Get doctor by ID ------------------------------------
    public Doctor getDoctorById(int id) throws SQLException {
        if (id <= 0) { throw new IllegalArgumentException("ID must be a numaric."); }

        String query = "SELECT * FROM doctors WHERE id = ?";
        Doctor doctor = null; // Initialize the Doctor object

        try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Create a new Doctor object from the result set
                    doctor = new Doctor();                    
                    doctor.setId(resultSet.getInt("id"));
                    doctor.setName(resultSet.getString("name"));
                    doctor.setSpecialization(resultSet.getString("specialization"));
                    System.out.println("Doctor found: " + doctor.getName());
                } else {
                    System.out.println("No Doctor found with this ID.");
                }
            }
        }catch (SQLException e) {
            System.err.println("Error while retrieving Doctor: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
        return doctor; // Return the Doctor object (or null if not found)
    }

//--------------------------- Update a doctor -------------------------------------
     public void updateDoctor(Doctor doctor) throws SQLException {
        List<String> updates = new ArrayList<>();
        List<Object> parameters = new ArrayList<>();
        
        if (doctor.getName() != null) {
            updates.add("name = ?");
            parameters.add(doctor.getName());
        }
        
        if (doctor.getSpecialization() != null) {
            updates.add("specialization = ?");
            parameters.add(doctor.getSpecialization());
        }

        if (updates.isEmpty()) {
            System.out.println("No fields to update.");
            return; // No updates to perform
        }

        String sql = "UPDATE doctors SET " + String.join(", ", updates) + " WHERE id = ?";
        parameters.add(doctor.getId());

        try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(sql)) {
            for (int i = 0; i < parameters.size(); i++) {
                statement.setObject(i + 1, parameters.get(i));
            }            

            int affectedRows = statement.executeUpdate();
            System.out.println(affectedRows > 0 ? "Doctor updated successfully!" : "Failed to update doctor! No Doctor found.");
        }catch (SQLException e) {
            System.err.println("Error while adding doctor: " + e.getMessage());
            throw e; // Rethrow or handle the exception as needed
        }
    }


    
//------------------------------ Delete a Doctor ----------------------------
        public void deleteDoctor(int doctorId) throws SQLException {
            if (doctorId <= 0) {throw new IllegalArgumentException("Doctor ID must be nemeric"); }

            String query = "DELETE FROM doctors WHERE id = ?";
            try (PreparedStatement statement = databaseConnection.getConnection().prepareStatement(query)) {
                statement.setInt(1, doctorId);

                int affectedRows = statement.executeUpdate();
                System.out.println(affectedRows > 0 ? "Doctor deleted successfully!" : "No Doctor found with the provided ID. Deletion failed.");
            } catch (SQLException e) {
                System.err.println("Error while deleting Doctor: " + e.getMessage());
                throw e; // Rethrow or handle the exception as needed
            }
        }

//-------------------------------------- Doctor Exists?  --------------------------------------
        public boolean doctorExist(int doctorId) throws SQLException {
            if (doctorId <= 0) {
                throw new IllegalArgumentException("Doctor ID must be numeric.");
            }

            String query = "SELECT count(*) FROM doctors WHERE id = ?";
            try (PreparedStatement preparedStatement = databaseConnection.getConnection().prepareStatement(query)) {
                preparedStatement.setInt(1, doctorId);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getInt(1) > 0; // Return true if count is greater than 0
                    }
                }
            }
            return false; // No doctor found
        }

}

