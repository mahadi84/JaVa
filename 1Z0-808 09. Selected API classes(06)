
===========09. Working with Selected classes from the Java API(06) String, StringBuilder, ArrayList, DataTime, Lamda Expression: ======= 10-12Aug-24(Wednesday)


---------------- Creating a String  ------------------------ 
String is a special class and immutable(can not add, delete to it only replace).

Functions:
         01. length() 02. charAt() 03. indexOf() 
         04. substring() 
                  Ex: 
                  String string = "animals";
                  System.out.println(string.substring(3)); // mals
                  System.out.println(string.substring(string.indexOf('m'))); // mals
                  System.out.println(string.substring(3, 4)); // m
                  
         05. toLowerCase() and toUpperCase 
         06. equals() and equalsIgnoreCase()
                  Ex:
                  System.out.println("abc".equals("ABC")); // false
                  System.out.println("ABC".equals("ABC")); // true
                  System.out.println("abc".equalsIgnoreCase("ABC")); // true
         07. startsWith() and endsWith() 08. contains() 
         09. replace() Ex:String result = lowercase.replace('a', 'A'); 
         10. trim()


String[] arr = new String[3];
String [] arrText = new String[3] { "cricket", "beetle", "ladybug" }; //Can not assaign Size and data at the same time


String [] bugs = { "cricket", "beetle", "ladybug" };
OR
String [] bugs = new String[] { "cricket", "beetle", "ladybug" };
String [] alias = bugs; //assign reference(possible)
System.out.println(bugs.equals(alias)); // true

----------------------- Creating a StringBuilder ----------------
Functions:
         01. length() 02. charAt() 03. indexOf() 04. substring() 05. append() 
         06. insert() (Ex: sb.insert(7, "-");)
         07. delete() and deleteCharAt() Ex: sb.delete(1, 3); sb.deleteCharAt(5); // throws an exception
         08. reverse() 09. toString()


There are three ways to construct a StringBuilder:
         StringBuilder sb1 = new StringBuilder();
         StringBuilder sb2 = new StringBuilder("animal");
         StringBuilder sb3 = new StringBuilder(10);

4: StringBuilder a = new StringBuilder("abc");
5: StringBuilder b = a.append("de");
6: b = b.append("f").append("g");
7: System.out.println("a=" + a);
8: System.out.println("b=" + b);

againStrings[0] = new StringBuilder(); // DOES NOT COMPILE
objects[0] = new StringBuilder(); // careful!

========================== Array =================================
-Fixed-size
-Can not Add/Insert, Edit, and Delete once declared/initialized.


String[] mammals = {"monkey", "chimp", "donkey"};
String[] birds = new String[6];
System.out.println(birds.length);

int[] numbers = {2,4,6,8};
System.out.println(Arrays.binarySearch(numbers, 2)); // 0

String[] numbers = { "10", "9", "100" };
Arrays.sort(numbers);
Arrays.binarySearch(numbers, 2)

--------------------------- ArrayList --------------------------
-Java Class and mutable
-Can Add/Insert, Edit, and Delete once declared/initialized.

There are 3 ways to create an ArrayList:--
         ArrayList list1 = new ArrayList();
         ArrayList list2 = new ArrayList(10);
         ArrayList list3 = new ArrayList(list2);

Array Functions: 
         01. add() 
         02. get() 03.set() 04. size() and  isEmpty() 
         05. remove() 06. removeOf()
         07. clear()  08. contains()
         09. equals()


List<String> list6 = new ArrayList<>();
ArrayList<String> list7 = new List<>(); // DOES NOT COMPILE

ArrayList list = new ArrayList(); //When no data type declared
list.add("hawk"); // [hawk]list.add(Boolean.TRUE); // [hawk, true]
System.out.println(list); // [hawk, true]

ArrayList<String> safer = new ArrayList<>(); //When data(String) type declared
safer.add(Boolean.TRUE); // DOES NOT COMPILE

01. add()
 List<String> birds = new ArrayList<>();
5: birds.add("hawk"); // [hawk]
6: birds.add(1, "robin"); // [hawk, robin]
7: birds.add(0, "blue jay"); // [blue jay, hawk, robin]
8: birds.add(1, "cardinal"); // [blue jay, cardinal, hawk, robin]
9: System.out.println(birds); // [blue jay, cardinal, hawk, robin]

02. get()
List<String> birds = new ArrayList<>();
birds.add("robin");
birds.add("cardinal"); 
birds.add("hawk"); 
String secondBirds = birds.get(1); // Get the element at index 1 (second element)
System.out.println("Second birds: " + secondBirds);
Output:

03. set()
The set() method changes one of the elements of the ArrayList without changing the size.
15: List<String> birds = new ArrayList<>();
16: birds.add("hawk"); // [hawk]
17: System.out.println(birds.size()); // 1
18: birds.set(0, "robin"); // [robin]
19: System.out.println(birds.size()); // 1
20: birds.set(1, "robin"); // IndexOutOfBoundsException

04. size() and  isEmpty() 
System.out.println(birds.isEmpty()); // true
System.out.println(birds.size()); // 0
birds.add("hawk"); // [hawk]
birds.add("hawk"); // [hawk, hawk]System.out.println(birds.isEmpty()); // false
System.out.println(birds.size()); // 2


05. remove()
List<String> birds = new ArrayList<>();
4: birds.add("hawk"); // [hawk]
5: birds.add("hawk"); // [hawk, hawk]
6: System.out.println(birds.remove("cardinal")); // prints false
7: System.out.println(birds.remove("hawk")); // prints true

06. removeOf()


07. clear()
The clear() method provides an easy way to discard all elements of the ArrayList. The
List<String> birds = new ArrayList<>();
birds.add("hawk"); // [hawk]
birds.add("hawk"); // [hawk, hawk]
System.out.println(birds.isEmpty()); // false
System.out.println(birds.size()); // 2
birds.clear(); // []
System.out.println(birds.isEmpty()); // true
System.out.println(birds.size()); // 0
After we call clear(), birds is back to being an empty ArrayList of size 0.

08. contains()
The contains() method checks whether a certain value is in the ArrayList. The method
signature is as follows:
boolean contains(Object object)
The following shows how to use this method:
List<String> birds = new ArrayList<>();
birds.add("hawk"); // [hawk]
System.out.println(birds.contains("hawk")); // true
System.out.println(birds.contains("robin")); // false


09. equals()
Finally, ArrayList has a custom implementation of equals() so you can compare two lists
to see if they contain the same elements in the same order.
boolean equals(Object object)
Understanding an ArrayList 133134 Chapter 3 ■ Core Java APIs
The following shows an example:
31: List<String> one = new ArrayList<>();
32: List<String> two = new ArrayList<>();
33: System.out.println(one.equals(two)); // true
34: one.add("a"); // [a]
35: System.out.println(one.equals(two)); // false
36: two.add("a"); // [a]
37: System.out.println(one.equals(two)); // true
38: one.add("b"); // [a,b]
39: two.add(0, "b"); // [b,a]
40: System.out.println(one.equals(two)); // false


------------------------ Converting Between array and List --------------------------
Convert between an array and an ArrayList:
3: List<String> list = new ArrayList<>();
4: list.add("hawk");Understanding an ArrayList 137
5: list.add("robin");
6: Object[] objectArray = list.toArray();
7: System.out.println(objectArray.length); // 2
8: String[] stringArray = list.toArray(new String[0]);
9: System.out.println(stringArray.length); // 2

20: String[] array = { "hawk", "robin" }; // [hawk, robin]
21: List<String> list = Arrays.asList(array); // returns fixed size list
22: System.out.println(list.size()); // 2
23: list.set(1, "test"); // [hawk, test]
24: array[0] = "new"; // [new, test]
25: for (String b : array) System.out.print(b + " "); // new test
26: list.remove(1); // throws UnsupportedOperation Excep


=================================== Wrapper Class ==============================================
int primitive = Integer.parseInt("123"); //converts a String to an int primitive
Integer wrapper = Integer.valueOf("123"); //converts a String to an Integer wrapper class

int bad1 = Integer.parseInt("a"); // throws NumberFormatException
Integer bad2 = Integer.valueOf("123.45"); // throws NumberFormatException


Autoboxing
Why won’t you need to be concerned with whether a primitive or wrapper class is returned,
you ask? Since Java 5, you can just type the primitive value and Java will convert it to the
relevant wrapper class for you. This is called autoboxing. Let’s look at an example:
4: List<Double> weights = new ArrayList<>();
5: weights.add(50.5); // [50.5]
6: weights.add(new Double(60)); // [50.5, 60.0]
7: weights.remove(50.5); // [60.0]
8: double first = weights.get(0); // 60.0

What do you think happens if you try to unbox a null?
3: List<Integer> heights = new ArrayList<>();
4: heights.add(null);
5: int h = heights.get(0); // NullPointerException

=========================================== Date and Time =========================================
01. LocalDate currentDate = LocalDate.now();
02. LocalDate date = LocalDate.of(2014, Month.JANUARY, 2);
03. TwoDayAhead = currentDate.plusDays(2);
04. Period oneMonth = Period.ofMonths(1);
         LocalDate nextMonth = currentDate.plus(oneMonth);
05. DateTimeFormatter f = DateTimeFormatter.ofPattern("MM-dd-yy, hh:mm");
         formatDate = currentDate.format(f)); // 13-20-2020, 11:12
06. week = currentDate.getDayOfWeek() //
07. LocalDate date = LocalDate.parse("01 02 2015", f); //Create/Parse date



System.out.println(LocalDate.now());
System.out.println(LocalTime.now());
System.out.println(LocalDateTime.now());

LocalDate date1 = LocalDate.of(2015, Month.JANUARY, 20);
LocalDate date2 = LocalDate.of(2015, 1, 20);

LocalTime time1 = LocalTime.of(6, 15); // hour and minute
LocalTime time2 = LocalTime.of(6, 15, 30); // + seconds
LocalTime time3 = LocalTime.of(6, 15, 30, 200); // + nanoseconds

public static LocalTime of(int hour, int minute)
public static LocalTime of(int hour, int minute, int second)
public static LocalTime of(int hour, int minute, int second, int nanos)

Manipulating Dates and Times:----
Adding to a date is easy. The date and time classes are immutable, just like String was.
This means that we need to remember to assign the results of these methods to a reference
variable so they are not lost.

12: LocalDate date = LocalDate.of(2014, Month.JANUARY, 20);
13: System.out.println(date); // 2014-01-20
14: date = date.plusDays(2);
15: System.out.println(date); // 2014-01-22
16: date = date.plusWeeks(1);

continuedWorking with Dates and Times 143
17: System.out.println(date); // 2014-01-29
18: date = date.plusMonths(1);
19: System.out.println(date); // 2014-02-28
20: date = date.plusYears(5);
21: System.out.println(date); // 2019-02-28

22: LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
23: LocalTime time = LocalTime.of(5, 15);
24: LocalDateTime dateTime = LocalDateTime.of(date, time);
25: System.out.println(dateTime); // 2020-01-20T05:15
26: dateTime = dateTime.minusDays(1);
27: System.out.println(dateTime); // 2020-01-19T05:15
28: dateTime = dateTime.minusHours(10);
29: System.out.println(dateTime); // 2020-01-18T19:15
30: dateTime = dateTime.minusSeconds(30);
31: System.out.println(dateTime); // 2020-01-18T19:14:30

Period:--


Period oneMonth = Period.ofMonths(1);
LocalDate currentDate = LocalDate.now();
LocalDate nextMonth = currentDate.plus(oneMonth);


public static void main(String[] args) {
LocalDate start = LocalDate.of(2015, Month.JANUARY, 1);
LocalDate end = LocalDate.of(2015, Month.MARCH, 30);
Period period = Period.ofMonths(1); // create a period
performAnimalEnrichment(start, end, period);
}

Period annually = Period.ofYears(1); // every 1 year
Period quarterly = Period.ofMonths(3); // every 3 monthsWorking with Dates and Times 147
Period everyThreeWeeks = Period.ofWeeks(3); // every 3 weeks
Period everyOtherDay = Period.ofDays(2); // every 2 days
Period everyYearAndAWeek = Period.of(1, 0, 7); // every year and 7 days

Period wrong = Period.ofYears(1).ofWeeks(1); // every week
This tricky code is really like writing the following:
Period wrong = Period.ofYears(1);
wrong = Period.ofWeeks(7);

3: LocalDate date = LocalDate.of(2015, 1, 20);
4: LocalTime time = LocalTime.of(6, 15);
5: LocalDateTime dateTime = LocalDateTime.of(date, time);
6: Period period = Period.ofMonths(1);
7: System.out.println(date.plus(period)); // 2015-02-20
8: System.out.println(dateTime.plus(period)); // 2015-02-20T06:15
9: System.out.println(time.plus(period)); // UnsupportedTemporalTypeException


Formatting Dates and Times

DateTimeFormatter f = DateTimeFormatter.ofPattern("MM-dd-yy, hh:mm");
System.out.println(dateTime.format(f)); // 13-20-2020, 11:12


The date and time classes support many methods to get data out of them:
LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
System.out.println(date.getDayOfWeek()); // MONDAY
System.out.println(date.getMonth()); // JANUARY
System.out.println(date.getYear()); // 2020
System.out.println(date.getDayOfYear()); // 20

DateTimeFormatter shortDateTime =
DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
System.out.println(shortDateTime.format(dateTime)); // 1/20/20
System.out.println(shortDateTime.format(date)); // 1/20/20
System.out.println(
shortDateTime.format(time)); // UnsupportedTemporalTypeException


Parsing Dates and Times:-------
DateTimeFormatter f = DateTimeFormatter.ofPattern("MM dd yyyy");
LocalDate date = LocalDate.parse("01 02 2015", f);
LocalTime time = LocalTime.parse("11:22");
System.out.println(date); // 2015-01-02
System.out.println(time); // 11:22



===================================== Lambda Expression =============================================
Lambdas work with interfaces that have only one method. These are called functional
interfaces—interfaces that can be used with functional programming. (It’s actually more
complicated than this, but for the OCA exam this definition is fine.)

a -> a.canHop()
(Animal a) -> { return a.canHop(); }

**These two lines do the exact same thing:

There are three parts:
         ■ Specify a single parameter with the name a
         ■ The arrow operator to separate the parameter and body
         ■ A body that calls a single method and returns the result of that method

3: print(() -> true); // 0 parameters
4: print(a -> a.startsWith("test")); // 1 parameter
5: print((String a) -> a.startsWith("test")); // 1 parameter
6: print((a, b) -> a.startsWith("test")); // 2 parameters
7: print((String a, String b) -> a.startsWith("test")); // 2 parameters


print(a, b -> a.startsWith("test")); // DOES NOT COMPILE (needs parentheses around the parameter lis)
print(a -> { a.startsWith("test"); }); // DOES NOT COMPILE (parentheses are only optional when there is one parameter and it doesn’t have a type declared, missing the return keyword)
print(a -> { return a.startsWith("test") }); // DOES NOT COMPILE  (missing the semicolon)

(a, b) -> { int a = 0; return 5;} // DOES NOT COMPILE  (doesn’t allow us to redeclare a local variable)
(a, b) -> { int c = 0; return 5;}  (okay, because it uses a different variable name:)

PREDICATES:
         an interface with one method:
         boolean test(Animal a);
         
         package java.util.function and the gist of it is as follows:
         public interface Predicate<T> {
         boolean test(T t);
         }

3: List<String> bunnies = new ArrayList<>();
4: bunnies.add("long ear");
5: bunnies.add("floppy");
6: bunnies.add("hoppy");
7: System.out.println(bunnies); // [long ear, floppy, hoppy]
8: bunnies.removeIf(s -> s.charAt(0) != 'h'); //A predicate that takes a String and returns a boolean. Remove the word that has "h" as the first latter.
9: System.out.println(bunnies); // [hoppy]



===============================================================================================


01. Manipulate data using the StringBuilder class and its methods
02. Create and manipulate Strings
03. Create and manipulate calendar data using classes from java.time.LocalDateTime,  java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period
04. Write a simple Lambda expression that consumes a Lambda Predicate expression

================================================================================
---------01. Manipulate data using the StringBuilder class and its methods -----
================================================================================

###### Why StringBuilder? StringBuilder vs String
###### Key Features of `StringBuilder` 
###### Common Methods and Use


###### Why StringBuilder ######
- `StringBuilder` allows for efficient, mutable string manipulation.
- Common methods include `append()`, `insert()`, `delete()`, `replace()`, `reverse()`, and `toString()`.
- `StringBuilder` is preferred over `String` when performing many modifications to strings due to its performance benefits.

###### Key Features of `StringBuilder` ######
1. Mutability:
   - Unlike `String`, which is immutable (cannot be changed once created), `StringBuilder` allows modifications to its content without creating new objects.

2. Performance:
   - `StringBuilder` is designed for scenarios where frequent modifications to strings are required, making it more performance-efficient than using `String` for such operations.

###### Common Methods of `StringBuilder` ######
Here’s a breakdown of some commonly used methods in the `StringBuilder` class:

1. `append()`
   - Appends the specified data (string, character, integer, etc.) to the end of the `StringBuilder` object.   
   StringBuilder sb = new StringBuilder("Hello");
   sb.append(" World");
   System.out.println(sb); // Output: Hello World
   

2. `insert(int offset, String str)`
   - Inserts the specified string at the specified position (`offset`).   
   StringBuilder sb = new StringBuilder("Hello World");
   sb.insert(6, "Java ");
   System.out.println(sb); // Output: Hello Java World
   

3. `delete(int start, int end)`
   - Deletes the characters between the specified `start` and `end` positions (end is exclusive).   
   StringBuilder sb = new StringBuilder("Hello Java World");
   sb.delete(6, 11);
   System.out.println(sb); // Output: Hello World
   

4. `replace(int start, int end, String str)`
   - Replaces the characters from the specified `start` to `end` with the specified string.   
   StringBuilder sb = new StringBuilder("Hello World");
   sb.replace(6, 11, "Java");
   System.out.println(sb); // Output: Hello Java
   

5. `reverse()`
   - Reverses the sequence of characters in the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   sb.reverse();
   System.out.println(sb); // Output: olleH
   

6. `toString()`
   - Converts the `StringBuilder` to a `String`. This is useful when you need to retrieve the string representation of the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   String str = sb.toString();
   System.out.println(str); // Output: Hello
   

7. `charAt(int index)`
   - Returns the character at the specified index.  
   StringBuilder sb = new StringBuilder("Hello");
   char ch = sb.charAt(1);
   System.out.println(ch); // Output: e
   

8. `length()`
   - Returns the length (number of characters) of the `StringBuilder`.   
   StringBuilder sb = new StringBuilder("Hello");
   int length = sb.length();
   System.out.println(length); // Output: 5
   

9. `capacity()`
   - Returns the current capacity of the `StringBuilder`. The capacity is the amount of space allocated for characters.   
   StringBuilder sb = new StringBuilder("Hello");
   int capacity = sb.capacity();
   System.out.println(capacity); // Output may vary; default capacity is 16 + length
   




================================================================================
----------------- 02. Create and manipulate Strings ---------------------------
================================================================================

###### What and Why Strings?
###### Key Features of `Strings` 
###### Common Methods and Use


###### What is Strings, how to Create, and Why String? +++++++++++++++++++
strings are instances of the `String` class, which is part of the `java.lang` package. Strings can be created in several ways:

1. Using String Literals:
   - Strings are typically created using string literals, which are enclosed in double quotes.
   String str1 = "Hello, World!";

   Explanation:
   - The literal `"Hello, World!"` is automatically interned, meaning it's stored in a common pool of string literals to save memory.

2. Using the `new` Keyword:
   - You can also create strings using the `new` keyword and the `String` constructor.
   String str2 = new String("Hello, World!");

- Performance Considerations:
  - While strings are immutable, frequent modifications can lead to performance issues. For extensive modifications, consider using `StringBuilder`.

   Explanation:
   - This creates a new `String` object with the content `"Hello, World!"`, regardless of whether an identical string already exists in the pool.

###### Common Methods for Manipulating Strings ######
Here are some commonly used methods of the `String` class:

1. `length()`
   - Returns the number of characters in the string.
   String str = "Hello";
   int length = str.length(); // Output: 5

2. `charAt(int index)`
   - Returns the character at the specified index.
   char ch = str.charAt(1); // Output: 'e'

3. `substring(int beginIndex, int endIndex)`
   - Returns a substring from the specified `beginIndex` to `endIndex` (endIndex is exclusive).

   String sub = str.substring(1, 4); // Output: "ell"

4. `indexOf(String str)`
   - Returns the index of the first occurrence of the specified substring.
   int index = str.indexOf("l"); // Output: 2

5. `toUpperCase()`
   - Converts all characters in the string to uppercase.
   String upper = str.toUpperCase(); // Output: "HELLO"

6. `toLowerCase()`
   - Converts all characters in the string to lowercase.
   String lower = str.toLowerCase(); // Output: "hello"

7. `trim()`
   - Removes any leading and trailing whitespace from the string.
   String trimmed = "   Hello   ".trim(); // Output: "Hello"

8. `replace(CharSequence target, CharSequence replacement)`
   - Replaces all occurrences of the specified substring with the specified replacement.
   String replaced = str.replace("l", "L"); // Output: "HeLLo"

9. `split(String regex)`
   - Splits the string around matches of the given regular expression.
   String[] parts = "one,two,three".split(","); // Output: ["one", "two", "three"]

10. `startsWith(String prefix)`
    - Checks if the string starts with the specified prefix.
    boolean starts = str.startsWith("He"); // Output: true


11. `endsWith(String suffix)`
    - Checks if the string ends with the specified suffix.
    boolean ends = str.endsWith("lo"); // Output: true


12. `contains(CharSequence sequence)`
    - Checks if the string contains the specified sequence of characters.
    boolean contains = str.contains("ell"); // Output: true



===========================================================================================
03. Create and manipulate calendar data using classes from java.time.LocalDateTime,  java.time.LocalDate, 
    java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period
===============================================================================================

####### What are these?
####### Creating and Manipulating:
###### 1. `LocalDateTime`
###### 2. `LocalDate`
###### 3. `LocalTime`
###### 4. `DateTimeFormatter`
###### 5. `Period`
###### Example of Using `java.time` Classes


###### What are these? ######
- `LocalDateTime`: Represents a date and time without time zone. Used for combining date and time operations.
- `LocalDate`: Represents a date without time. Useful for date manipulations.
- `LocalTime`: Represents a time without a date. Useful for time manipulations.
- `DateTimeFormatter`: Used for formatting and parsing date-time values.
- `Period`: Represents a span of time in terms of years, months, and days, useful for measuring the difference between dates.



###### 1. `LocalDateTime` ######
`LocalDateTime` represents a date-time without a time zone in the ISO-8601 calendar system. It combines a `LocalDate` and `LocalTime` into one object.

####### Creating and Manipulating `LocalDateTime` ######
- Creating an instance:
  LocalDateTime dateTime = LocalDateTime.now(); // Current date and time
  LocalDateTime specificDateTime = LocalDateTime.of(2024, 8, 4, 15, 30); // Specific date and time

- Manipulating date-time:
  LocalDateTime later = dateTime.plusDays(10).minusHours(5); // Add 10 days and subtract 5 hours

- Getting specific components:
  int year = dateTime.getYear();
  int month = dateTime.getMonthValue();
  int day = dateTime.getDayOfMonth();


###### 2. `LocalDate` ######
`LocalDate` represents a date without a time component. It’s useful for working with dates alone, without needing the time of day.

####### Creating and Manipulating `LocalDate` ######
- Creating an instance:
  LocalDate date = LocalDate.now(); // Current date
  LocalDate specificDate = LocalDate.of(2024, 8, 4); // Specific date

- Manipulating dates:
  LocalDate futureDate = date.plusWeeks(2).minusDays(5); // Add 2 weeks and subtract 5 days

- Getting specific components:
  int year = date.getYear();
  int month = date.getMonthValue();
  int day = date.getDayOfMonth();


###### 3. `LocalTime` ######
`LocalTime` represents a time without a date component. It’s useful for working with times of day.

####### Creating and Manipulating `LocalTime` ######
- Creating an instance:
  LocalTime time = LocalTime.now(); // Current time
  LocalTime specificTime = LocalTime.of(14, 30); // Specific time (2:30 PM)

- Manipulating times:
  LocalTime laterTime = time.plusHours(3).minusMinutes(15); // Add 3 hours and subtract 15 minutes

- Getting specific components:
  int hour = time.getHour();
  int minute = time.getMinute();


###### 4. `DateTimeFormatter` ######
import java.time.format.DateTimeFormatter;

`DateTimeFormatter` is used for formatting and parsing date-time objects. It provides flexible ways to format date-time data and parse strings into date-time objects.

####### Creating and Using `DateTimeFormatter` ######
- Formatting date-time:
  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  String formattedDateTime = dateTime.format(formatter);

- Parsing a date-time string:
  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
  LocalDate parsedDate = LocalDate.parse("2024-08-04", formatter);


###### 5. `Period` ######
`Period` represents a quantity of time in terms of years, months, and days. It is used to measure the difference between two dates.

####### Creating and Using `Period` ######
- Creating a period:
  Period period = Period.of(1, 2, 3); // Represents 1 year, 2 months, and 3 days

- Calculating periods between dates:
  LocalDate startDate = LocalDate.of(2024, 1, 1);
  LocalDate endDate = LocalDate.of(2024, 8, 4);
  Period periodBetween = Period.between(startDate, endDate);

- Getting period components:
  int years = periodBetween.getYears();
  int months = periodBetween.getMonths();
  int days = periodBetween.getDays();


###### Example of Using `java.time` Classes ######
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.Period;

public class DateTimeExample {
    public static void main(String[] args) {
        // LocalDateTime
        LocalDateTime now = LocalDateTime.now();
        System.out.println("Current DateTime: " + now);

        LocalDateTime futureDateTime = now.plusMonths(1).minusDays(5);
        System.out.println("Future DateTime: " + futureDateTime);

        // LocalDate
        LocalDate today = LocalDate.now();
        System.out.println("Today's Date: " + today);

        LocalDate nextWeek = today.plusWeeks(1);
        System.out.println("Next Week's Date: " + nextWeek);

        // LocalTime
        LocalTime currentTime = LocalTime.now();
        System.out.println("Current Time: " + currentTime);

        LocalTime timeInFuture = currentTime.plusHours(2);
        System.out.println("Time in 2 Hours: " + timeInFuture);

        // DateTimeFormatter
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String formattedDateTime = now.format(formatter);
        System.out.println("Formatted DateTime: " + formattedDateTime);

        LocalDate parsedDate = LocalDate.parse("04-08-2024", formatter);
        System.out.println("Parsed Date: " + parsedDate);

        // Period
        Period period = Period.between(LocalDate.of(2023, 1, 1), LocalDate.of(2024, 8, 4));
        System.out.println("Period between dates: " + period.getYears() + " years, " +
                           period.getMonths() + " months, " + period.getDays() + " days");
    }
}


=============================================================================================
--------04. Write a simple Lambda expression that consumes a Lambda Predicate expression ----
=============================================================================================

####### 1. Lambda Expressions and When to Lambda Expressions
####### 2. Functional Interfaces
####### 3. Predicate Functional Interface
####### Lambda Expression that Consumes a Predicate(Define Predicate & Use Predicate:)


####### 1. Lambda Expressions and When to Lambda Expressions ######
   Lambda Expressions:
         Anonymous functions: Lambda expressions are anonymous functions that can be treated as values.
         Functional interface: They can only be used to implement functional interfaces, which have exactly one abstract method.
            Syntax:
            parameters -> expression (if there's only one parameter and no parentheses)
            (parameters) -> expression (for single-line expressions)
            (parameters) -> { statements } (for multi-line expressions)
         
   Examples:         
      // **interface can not instantiate like class with new keyword */
      interface InterfaceA{
             void show(); 
      }
      
      // implements InterfaceA
      class ClassB implements InterfaceA{
             public void show(){
                    System.out.println("I am from Interface A");
             }    
      }
      
      public class Demo {       
             public static void main(String [] args){
                    /** call and show() from inteface ClassB */ 
                    // ClassB obj = new ClassB();
                    // obj.show();
      
                    /** Lamda Expression (call Functional interface) */
                    InterfaceA obj = ()->System.out.println("I am from Interface A with Lambda Exapression");
                    obj.show();
             } 
      }
            
   ###### When to Use Lambda Expressions
   * Use lambda expressions when you need to pass behavior as a parameter.
   * Prefer lambda expressions for short, concise code blocks.
   * Consider using method references for even shorter expressions.
   * Be aware of potential performance implications, especially in highly performance-critical code.
   Here are some common scenarios where they shine:
   
   ### 1. **Event Handling:**
   * Simplifying event listeners:
     button.addActionListener(e -> System.out.println("Button clicked!"));
   
   ### 2. **Collections:**
   * Filtering, mapping, and reducing data:
     List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
     List<Integer> evenNumbers = numbers.stream()
                                       .filter(n -> n % 2 == 0)
                                       .collect(Collectors.toList());
   
   ### 3. **Concurrency:**
   * Creating threads concisely:
     new Thread(() -> System.out.println("Hello from a thread")).start();
   
   ### 4. **Functional Interfaces:**
   * Implementing functional interfaces:
     Comparator<String> comparator = (s1, s2) -> s1.length() - s2.length();
   
   ### 5. **Method References:**
   * Using existing methods as lambda expressions:
     List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
     names.sort(Comparator.comparing(String::length));
   
   ### 6. **Stream API:**
   * Performing complex data manipulations:
     int sum = numbers.stream().reduce(0, Integer::sum);
   
         **Example: Combining Multiple Operations**
         List<String> words = Arrays.asList("apple", "banana", "orange", "grape");
         List<String> result = words.stream()
                                    .filter(word -> word.length() > 5)
                                    .map(String::toUpperCase)
                                    .collect(Collectors.toList());
         System.out.println(result); // Output: [BANANA, ORANGE]
            ***In this example, 
            lambda expressions are used to filter words based on length, convert them to uppercase, and collect the results into a new list.


####### 2. Functional Interfaces ######
   Functional interfaces are interfaces with a single abstract method. 
   The `java.util.function` package provides several functional interfaces, including `Predicate`, `Function`, `Consumer`, and `Supplier`.
   
   ####### 3. When to use and WHAT is Predicate Functional Interface ######
   -`Predicate<T>` is a functional interface in the `java.util.function` package 
   -that represents a BOOLEAN--valued function of one argument. 
   -It has a single abstract method `test(T t)` that evaluates or filter data the `Predicate`.
   
         Signature:
         @FunctionalInterface
         public interface Predicate<T> {
             boolean test(T t);
         }
   
   ###### Lambda Expression that Consumes a Predicate ######
   To write a lambda expression that consumes a `Predicate`, I need to:
   1. Define a `Predicate`: Create a lambda expression that implements the `Predicate` interface.
   2. Use the `Predicate`: Apply this `Predicate` to some data.
   
   ####### Example
   - Define a `Predicate` to test if a number is positive.
   - Use this `Predicate` with a lambda expression to filter a list of numbers.
   
            import java.util.ArrayList;
            import java.util.List;
            import java.util.function.Predicate;
            
            public class LambdaExample {
                public static void main(String[] args) {
                    // Define a Predicate to check if a number is positive
                    Predicate<Integer> isPositive = number -> number > 0;
            
                    // Create a list of integers
                    List<Integer> numbers = new ArrayList<>();
                    numbers.add(-5);
                    numbers.add(3);
                    numbers.add(0);
                    numbers.add(10);
            
                    // Filter the list using the Predicate
                    System.out.println("Positive numbers:");
                    for (Integer number : numbers) {
                        if (isPositive.test(number)) {
                            System.out.println(number);
                        }
                    }
                }
            }
   
   ########## Define Predicate & Use Predicate:
      - `Predicate<Integer> isPositive = number -> number > 0;`
      - This lambda expression(isPositive.test(number)) checks if a number is greater than zero.
   
 






-
