


=======================05. Using Loop Constructs(05): ===================5-Aug-24(Monday)

01. Create and use while loops
02. Create and use for loops including the enhanced for loop
03. Create and use do/while loops
04. Compare loop constructs
05. Use break and continue 

========================================================================


######################################################################################
         ----------------01. Create and use while loops ------------------
######################################################################################

1. Basic Syntax of `while` Loop 
2. Components of `while` Loop 
3. Example of `while` Loop
4. Infinite `while` Loop 
5. Using `break` and `continue` Statements in `while` Loop 



###### 1. Basic Syntax of `while` Loop ######
A `while` loop repeatedly executes a block of code as long as a specified condition is `true`. Here’s the basic syntax:

while (condition) {
    // Code to be executed
}

###### 2. Components of `while` Loop ######
- Condition: This is a boolean expression. If it evaluates to `true`, the code inside the loop will execute. If it evaluates to `false`, the loop will terminate.
- Code Block: The block of code inside the loop that gets executed repeatedly.

###### 3. Example of `while` Loop ######
        public class WhileLoopExample {
            public static void main(String[] args) {
                int i = 1; // Initialization
                
                while (i <= 5) { // Condition
                    System.out.println(i); // Code to be executed
                    i++; // Increment
                }
            }
        }


###### 4. Infinite `while` Loop ######
-Loop that continues to execute indefinitely unless explicitly terminated.
-An infinite `while` loop occurs when the condition always evaluates to `true`. 
--Infinite Loops: Ensure that the condition will eventually become `false` to avoid creating an infinite loop.
 **Be cautious with this, as it will cause your program to run indefinitely unless interrupted.
        Example:
        public class InfiniteWhileLoop {
            public static void main(String[] args) {
                while (true) {
                    // This code will run forever
                    System.out.println("This will print endlessly");
                }
            }
        }

###### 5. Using `break` and `continue` Statements in `while` Loop ######
- `break`: Exits the loop immediately, regardless of the condition.
- `continue`: Skips the current iteration and proceeds to the next iteration.

####### Example 2: Using `break` and `continue` ######
break, Example:
public class BreakExample {
    public static void main(String[] args) {
        int i = 1;        
        while (i <= 10) {
            if (i == 5) {
                break; // Exit the loop when i is 5
            }
            System.out.println(i);
            i++;
        }
    }
}
In this example, the loop will print numbers 1 through 4, then exit when `i` equals 5 due to the `break` statement.

Continue, Example:
 int i = 0;        
        while (i < 10) {
            i++;
            if (i % 2 == 0) {
                continue; // skips the printing of even numbers
            }
            System.out.println(i); // Print only odd numbers
        }

Result: only odd numbers (1, 3, 5, 7, 9) are printed.

######################################################################################
----------------02. Create and use for loops including the enhanced for loop --------
######################################################################################

 1. Standard `for` Loop  
 2. Nested `for` Loops  
 3. Enhanced `for` Loop (for-each Loop)  
 4. Enhanced `for` Loop with Collection  
 5. Standard  `for` Vs Enhanced `for` 


######### 1. Standard `for` Loop   ##########
 -The standard `for` loop is used when you know in advance how many times you want to iterate.
        for (initialization; condition; update) {
            // Code to be executed
        }

Components:
- Initialization: Sets up the loop control variable. It runs once at the start.
- Condition: A boolean expression that is checked before each iteration. If `true`, the loop continues; if `false`, the loop terminates.
- Update: Modifies the loop control variable after each iteration.

    public class ForLoopExample {
        public static void main(String[] args) {
            for (int i = 1; i <= 5; i++) {
                System.out.println(i);
            }
        }
    }

The loop will print numbers 1 through 5.

###### 2. Nested `for` Loops  ######
    -use `for` loops inside other `for` loops.
    -to handle multi-dimensional structures.

####### Example 2: Nested `for` Loops  ######
This example prints a multiplication table.

public class NestedForLoopExample {
    public static void main(String[] args) {
        for (int i = 1; i <= 3; i++) {
            for (int j = 1; j <= 3; j++) {
                System.out.print(i  j + " ");
            }
            System.out.println();
        }
    }
}

Explanation:
- The outer loop iterates through rows.
- The inner loop iterates through columns, printing the product of `i` and `j`.

###### 3. Enhanced `for` Loop (for-each Loop)  ######
The enhanced `for` loop is designed for iterating over arrays and collections. It simplifies code by eliminating the need for indexing.
    for (type element : arrayOrCollection) {
        // Code to be executed
    }

Components:
- type: The type of the elements in the array or collection.
- element: A variable that holds the current element during each iteration.
- arrayOrCollection: The array or collection you want to iterate over.

####### Example 3: Enhanced `for` Loop with Array  ######
This example prints each element of an array.
public class EnhancedForLoopExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        
        for (int number : numbers) {
            System.out.println(number);
        }
    }
}

Explanation:
- type: `int` is the type of the elements in the `numbers` array.
- element: `number` is a variable that takes each value from the array in turn.
- arrayOrCollection: `numbers` is the array being iterated over.

###### 4. Enhanced `for` Loop with Collection  ######
You can also use the enhanced `for` loop with collections such as `ArrayList`.

####### Example 4: Enhanced `for` Loop with Collection  ######
This example prints each element of an `ArrayList`.

      import java.util.ArrayList;
      
      public class EnhancedForLoopWithList {
          public static void main(String[] args) {
              ArrayList<String> names = new ArrayList<>();
              names.add("Alice");
              names.add("Bob");
              names.add("Charlie");
              
              for (String name : names) {
                  System.out.println(name);
              }
          }
      }

        Explanation:
        - type: `String` is the type of elements in the `names` list.
        - element: `name` is a variable that holds each value from the list during iteration.
        - arrayOrCollection: `names` is the collection being iterated over.

###### 5. Standard  `for` Vs Enhanced `for`  ######
- Standard `for` Loop: Ideal for when you need to control the loop variable and need to know how many times you need to loop.
- Enhanced `for` Loop: Ideal for iterating over arrays and collections when you don’t need to know the index of the current element.



######################################################################################
         ----------------03. Create and use do/while loops ------------------
######################################################################################
#### Syntax of `do/while` Loop 
#### Key Points: 
            >Guaranteed Execution  
            >Condition Checking
#### Example 2: Using `do/while` for Menu-Driven Programs 


####### Syntax of `do/while` Loop #######
The syntax for a `do/while` loop is as follows:

    Syntex:
    do {
        // Code to be executed
    } while (condition);

Components:
- Code Block: The block of code inside the `do` clause that will be executed once for sure.
- Condition: A boolean expression evaluated after the code block executes. If it evaluates to `true`, the loop repeats; if `false`, the loop terminates.

Example:
    public class DoWhileExample {
        public static void main(String[] args) {
            int i = 1; // Initialization
            
            do {
                System.out.println(i); // Code to be executed
                i++; // Update
            } while (i <= 5); // Condition
        }
    }
    
    The loop will print numbers 1 through 5. After printing 5 and incrementing `i` to 6, the condition `i <= 5` becomes `false`, and the loop terminates.
    
    Explanation:
    - Initialization: `int i = 1;` sets up the loop variable `i`.
    - Code Block: `System.out.println(i);` prints the value of `i`, and `i++` increments `i` after each iteration.
    - Condition: `while (i <= 5);` checks if `i` is less than or equal to 5 after the code block executes.


####### Key Points: #######
- Guaranteed Execution: The code block within the `do` section is executed at least once because the condition is checked after the execution.
- Condition Checking: The condition is evaluated after the loop's body executes, which is different from the `while` loop where the condition is evaluated before execution.


####### Example 2: Using `do/while` for Menu-Driven Programs #######
-to ensure that a block of code (like a menu) is displayed at least once and repeated based on user input.

import java.util.Scanner;

public class MenuExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("Menu:");
            System.out.println("1. Option 1");
            System.out.println("2. Option 2");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            
            choice = scanner.nextInt(); // User input

            switch (choice) {
                case 1:
                    System.out.println("Option 1 selected.");
                    break;
                case 2:
                    System.out.println("Option 2 selected.");
                    break;
                case 3:
                    System.out.println("Exiting.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 3); // Loop until user chooses to exit

        scanner.close();
    }
}

Explanation:
- Initialization: Not explicitly needed here; the `choice` variable is declared before the loop.
- Code Block: Displays a menu, takes user input, and performs actions based on the input.
- Condition: `while (choice != 3);` continues the loop as long as the user’s choice is not 3 (the exit option).

######################################################################################
           ----------------04. Compare loop constructs ------------------
######################################################################################

1. `for` Loop 
2. `while` Loop 
3. `do/while` Loop 
    ###### All loop Comparison Table
    ########## When to use what loop


########## 1. `for` Loop ##########
Syntax:
for (initialization; condition; update) {
    // Code to be executed
}

Components:
- Initialization: Set up the loop variable.
- Condition: Checked before each iteration; if `true`, the loop continues; if `false`, the loop terminates.
- Update: Updates the loop variable after each iteration.

Characteristics:
- Best for scenarios where the number of iterations is known beforehand.
- Compact and concise for iterating with a counter or index.

Example:
for (int i = 0; i < 5; i++) {
    System.out.println(i);
}

Use Cases:
- Iterating a fixed number of times.
- When you need a counter or index.
- Best for iterating over arrays or collections when you need the index.

########## 2. `while` Loop ##########
Syntax:
while (condition) {
    // Code to be executed
}

Components:
- Condition: Evaluated before each iteration; if `true`, the loop continues; if `false`, the loop terminates.

Characteristics:
- Best for scenarios where the number of iterations is not known beforehand.
- The loop might not execute at all if the condition is initially `false`.

Example:
int i = 0;
while (i < 5) {
    System.out.println(i);
    i++;
}

Use Cases:
- When the number of iterations is unknown or depends on dynamic conditions.
- Useful when you need to loop until a specific condition is met.

########## 3. `do/while` Loop ##########
Syntax:
do {
    // Code to be executed
} while (condition);

Components:
- Code Block: Executes at least once before the condition is evaluated.
- Condition: Evaluated after each iteration; if `true`, the loop continues; if `false`, the loop terminates.

Characteristics:
- Guarantees that the loop body will execute at least once, even if the condition is `false` initially.
- Useful when you need the loop body to execute regardless of the condition.

Example:
int i = 0;
do {
    System.out.println(i);
    i++;
} while (i < 5);

Use Cases:
- When you need the loop body to execute at least once, such as displaying a menu or prompting user input.

########## Comparison Table ##########

| Aspect                    | `for` Loop                              | `while` Loop                                              | `do/while` Loop                         |
|---------------------------|-----------------------------------------|-----------------------------------------------------------|----------------------------------------|
| Condition Check           | Before executing loop body              | Before executing loop body                                | After executing loop body               |
| Execution Guarantee       | May not execute if condition is `false` | May not execute if condition is `false`                   | Executes at least once                  |
| Initialization & Update   | Typically included in loop statement    | Initialization and update must be managed inside loop     | Initialization and update must be managed inside loop |
| Use Case                  | Known number of iterations or indexed access | Unknown number of iterations or based on dynamic conditions | Guaranteed execution at least once |
| Syntax Complexity         | Compact and concise                     | Simple but may require additional logic for initialization and update | Simple but condition checked after execution |

########## When to use what loop ##########
- `for` Loop: Best for iterating a known number of times with a counter or index. Compact and ideal for loops where the number of iterations is known before the loop starts.
- `while` Loop: Best for situations where the number of iterations is not predetermined. The loop may not run if the condition is `false` initially.
- `do/while` Loop: Best when you need to ensure that the loop body runs at least once, regardless of the condition. Ideal for scenarios like prompting users until valid input is received.



######################################################################################
---------------------------05. Use break and continue  -----------------------------
######################################################################################

#########   Purpose and Usage of 'break' and 'continue' Statement
#########  `break` Statement 
            Example: Using `break` in a `for` Loop 
            Example: Using `break` in a `while` Loop 
######### `continue` Statement 
            Example: Using `continue` in a `for` Loop 
            Example: Using `continue` in a `while` Loop 

######### Purpose and Usage of 'break' and 'continue' Statement #########
- `break` Statement:
  - Purpose: Exits the current loop or `switch` statement.
  - Usage: Use it to terminate a loop or `switch` early based on a condition.

- `continue` Statement:
  - Purpose: Skips the current iteration of the loop and proceeds to the next iteration.
  - Usage: Use it to skip certain iterations based on a condition without terminating the loop.


######### `break` Statement #########
The `break` statement is used to exit from a loop or a `switch` statement prematurely. 
When `break` is executed, the loop or `switch` statement is terminated, and control passes to the statement following the loop or `switch`.

########## Example: Using `break` in a `for` Loop #########
In this example, we use `break` to exit the loop when a certain condition is met.

public class BreakExample {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            if (i == 5) {
                break; // Exit the loop when i equals 5
            }
            System.out.println(i);
        }
    }
}

Explanation:
- The loop will print numbers from 1 to 4.
- When `i` equals 5, the `break` statement is executed, which exits the loop.

########## Example: Using `break` in a `while` Loop #########
This example demonstrates using `break` in a `while` loop to exit based on user input.

import java.util.Scanner;

public class BreakInWhileLoop {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input;
        
        while (true) {
            System.out.print("Enter a command (type 'exit' to quit): ");
            input = scanner.nextLine();
            if ("exit".equalsIgnoreCase(input)) {
                break; // Exit the loop if the user types 'exit'
            }
            System.out.println("You entered: " + input);
        }
        
        scanner.close();
    }
}

Explanation:
- The `while (true)` loop runs indefinitely until the `break` statement is encountered.
- If the user inputs "exit", the `break` statement is executed, terminating the loop.

######### `continue` Statement #########
  -The `continue` statement is used to skip the current iteration of a loop and proceed to the next iteration. 
  -It can be used in `for`, `while`, and `do/while` loops.


########## Example: Using `continue` in a `for` Loop #########
In this example, we use `continue` to skip printing even numbers.

public class ContinueExample {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            if (i % 2 == 0) {
                continue; // Skip even numbers
            }
            System.out.println(i); // Print only odd numbers
        }
    }
}

Explanation:
- The `continue` statement is executed when `i` is even, which skips the `System.out.println(i);` statement for even numbers.
- Only odd numbers from 1 to 10 are printed.

########## Example: Using `continue` in a `while` Loop #########
This example demonstrates using `continue` to skip processing of specific values in a `while` loop.

public class ContinueInWhileLoop {
    public static void main(String[] args) {
        int i = 1;
        
        while (i <= 10) {
            if (i % 2 == 0) {
                i++;
                continue; // Skip the even number and continue with the next iteration
            }
            System.out.println(i); // Print odd numbers
            i++;
        }
    }
}

Explanation:
- The `continue` statement is executed when `i` is even, which skips the `System.out.println(i);` statement.
- Only odd numbers from 1 to 10 are printed.





--
