

01. How to create a Thread? Example of  Threads Creation - Threading Overview & Debugging





########################### 01. How to create a Thread? Example of  Threads Creation - Threading Overview & Debugging ##################

জাভাতে থ্রেড তৈরি করার এবং সেগুলোর ওভারভিউ ও ডিবাগিংয়ের একটি উদাহরণ নিচে দেওয়া হলো।

জাভাতে থ্রেড তৈরির প্রধানত দুটি উপায় আছে:

1.  `Thread` ক্লাস এক্সটেন্ড করে।
2.  `Runnable` ইন্টারফেস ইমপ্লিমেন্ট করে।

সাধারণত, `Runnable` ইন্টারফেস ব্যবহার করা বেশি পছন্দনীয়, কারণ জাভা একাধিক ইনহেরিটেন্স সমর্থন করে না। `Runnable` ব্যবহার করলে আপনার ক্লাসটি অন্য কোনো ক্লাসকে এক্সটেন্ড করার স্বাধীনতা রাখে।

### উদাহরণ: থ্রেড তৈরি (Runnable ইন্টারফেস ব্যবহার করে)

এই উদাহরণে আমরা একটি সহজ থ্রেড তৈরি করব যা ১ থেকে ৫ পর্যন্ত সংখ্যা প্রিন্ট করবে এবং একটি থ্রেড তৈরি করব যা উল্টোভাবে (৫ থেকে ১) সংখ্যা প্রিন্ট করবে। এরপর আমরা দেখব কিভাবে ডিবাগ করা যায়।

```java
public class MyRunnable implements Runnable {

    private String threadName;

    public MyRunnable(String name) {
        this.threadName = name;
        System.out.println("Creating " + threadName);
    }

    @Override
    public void run() {
        System.out.println("Running " + threadName);
        try {
            for (int i = 1; i <= 5; i++) {
                System.out.println("Thread: " + threadName + ", Count: " + i);
                // প্রতি ১ সেকেন্ড অন্তর থ্রেডকে থামিয়ে রাখা (সিমুলেশন)
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread " + threadName + " interrupted.");
        }
        System.out.println("Thread " + threadName + " exiting.");
    }
}

public class MyReverseRunnable implements Runnable {

    private String threadName;

    public MyReverseRunnable(String name) {
        this.threadName = name;
        System.out.println("Creating " + threadName);
    }

    @Override
    public void run() {
        System.out.println("Running " + threadName);
        try {
            for (int i = 5; i >= 1; i--) {
                System.out.println("Thread: " + threadName + ", Count: " + i);
                // প্রতি ১ সেকেন্ড অন্তর থ্রেডকে থামিয়ে রাখা (সিমুলেশন)
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread " + threadName + " interrupted.");
        }
        System.out.println("Thread " + threadName + " exiting.");
    }
}


public class ThreadCreationExample {

    public static void main(String[] args) {
        System.out.println("Main Thread started.");

        // প্রথম থ্রেড তৈরি
        MyRunnable runnable1 = new MyRunnable("Thread-1 (Forward)");
        Thread thread1 = new Thread(runnable1);

        // দ্বিতীয় থ্রেড তৈরি
        MyReverseRunnable runnable2 = new MyReverseRunnable("Thread-2 (Reverse)");
        Thread thread2 = new Thread(runnable2);

        // থ্রেডগুলো শুরু করা
        thread1.start(); // run() মেথড কল করবে
        thread2.start(); // run() মেথড কল করবে

        System.out.println("Main Thread finished starting other threads. They are running concurrently.");

        // আমরা main থ্রেডকে অন্য থ্রেডগুলো শেষ হওয়ার জন্য অপেক্ষা করাতে পারি (ঐচ্ছিক)
        try {
            thread1.join(); // thread1 শেষ হওয়ার জন্য অপেক্ষা করবে
            thread2.join(); // thread2 শেষ হওয়ার জন্য অপেক্ষা করবে
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted while waiting for child threads.");
        }

        System.out.println("All threads have finished. Main Thread exiting.");
    }
}

```

কোড ব্যাখ্যা:

1.  `MyRunnable` ক্লাস:

       এটি `Runnable` ইন্টারফেস ইমপ্লিমেন্ট করে।
       `run()` মেথডটি থ্রেডের কার্যকারিতা ধারণ করে। এখানে এটি ১ থেকে ৫ পর্যন্ত সংখ্যা প্রিন্ট করে এবং প্রতি ১ সেকেন্ড পর পর থামে।
       `InterruptedException` হ্যান্ডেল করা হয়েছে, যা নির্দেশ করে যে থ্রেডকে বাইরে থেকে বন্ধ করার চেষ্টা করা হয়েছে।

2.  `MyReverseRunnable` ক্লাস:

       এটিও `Runnable` ইন্টারফেস ইমপ্লিমেন্ট করে।
       এর `run()` মেথডটি ৫ থেকে ১ পর্যন্ত উল্টোভাবে সংখ্যা প্রিন্ট করে।

3.  `ThreadCreationExample` ক্লাস (Main ক্লাস):

       `main` মেথডটি প্রোগ্রামের এন্ট্রি পয়েন্ট।
       আমরা `MyRunnable` এবং `MyReverseRunnable` এর অবজেক্ট তৈরি করি।
       তারপর, এই `Runnable` অবজেক্টগুলোকে প্যারামিটার হিসেবে `Thread` ক্লাসের কনস্ট্রাক্টরে পাস করে `Thread` অবজেক্ট (`thread1`, `thread2`) তৈরি করি।
       `thread1.start()` এবং `thread2.start()` কল করলে জাভা ভার্চুয়াল মেশিন (JVM) নতুন থ্রেড তৈরি করে এবং প্রতিটি থ্রেডের `run()` মেথডকে সমান্তরালভাবে চালানো শুরু করে।
       `System.out.println("Main Thread finished starting other threads. They are running concurrently.");` এই লাইনটি দেখায় যে `main` থ্রেড নিজে চলতে থাকে যখন অন্যান্য থ্রেডগুলি ব্যাকগ্রাউন্ডে তাদের কাজ করে।
       `thread1.join()` এবং `thread2.join()` ব্যবহার করা হয়েছে যাতে `main` থ্রেডটি `thread1` এবং `thread2` এর কাজ শেষ না হওয়া পর্যন্ত অপেক্ষা করে। এটি না করলে, `main` থ্রেড দ্রুত শেষ হয়ে যেতে পারে এবং আপনি আউটপুটের সম্পূর্ণ ধারাবাহিকতা দেখতে নাও পেতে পারেন।

আউটপুট (উদাহরণস্বরূপ, সঠিক ক্রম নাও হতে পারে কারণ থ্রেড শিডিউলিং অনির্দিষ্ট):

```
Main Thread started.
Creating Thread-1 (Forward)
Creating Thread-2 (Reverse)
Main Thread finished starting other threads. They are running concurrently.
Running Thread-1 (Forward)
Running Thread-2 (Reverse)
Thread: Thread-1 (Forward), Count: 1
Thread: Thread-2 (Reverse), Count: 5
Thread: Thread-1 (Forward), Count: 2
Thread: Thread-2 (Reverse), Count: 4
Thread: Thread-1 (Forward), Count: 3
Thread: Thread-2 (Reverse), Count: 3
Thread: Thread-1 (Forward), Count: 4
Thread: Thread-2 (Reverse), Count: 2
Thread: Thread-1 (Forward), Count: 5
Thread: Thread-1 (Forward) exiting.
Thread: Thread-2 (Reverse), Count: 1
Thread: Thread-2 (Reverse) exiting.
All threads have finished. Main Thread exiting.
```

লক্ষ্য করুন, আউটপুটে `Thread-1 (Forward)` এবং `Thread-2 (Reverse)` এর লাইনগুলো এলোমেলোভাবে আসতে পারে, কারণ অপারেটিং সিস্টেমের থ্রেড শিডিউলার কোন থ্রেড কখন CPU পাবে তা নির্ধারণ করে। এটাই কনকারেন্সির প্রকৃতি।

### থ্রেডিং ওভারভিউ:

   থ্রেড (Thread): একটি প্রোগ্রামের মধ্যে একটি স্বাধীন এক্সিকিউশনের পথ। প্রতিটি জাভা অ্যাপ্লিকেশন অন্তত একটি থ্রেড দিয়ে শুরু হয়, যা "main" থ্রেড নামে পরিচিত।
   মাল্টিথ্রেডিং (Multithreading): একটি প্রোগ্রামের মধ্যে একাধিক থ্রেডকে সমান্তরালভাবে চালানো। এটি পারফরম্যান্স বাড়াতে এবং ইউজার ইন্টারফেসকে রেসপন্সিভ রাখতে সাহায্য করে।
   JVM থ্রেড শিডিউলার (JVM Thread Scheduler): JVM এর একটি অংশ যা নির্ধারণ করে কোন থ্রেড কখন CPU পাবে এবং কতক্ষণ ধরে চলবে। এর আচরণ সাধারণত অপারেটিং সিস্টেম এবং JVM বাস্তবায়নের উপর নির্ভর করে অনির্দিষ্ট হয়।
   কনকারেন্সি (Concurrency) বনাম প্যারালালিজম (Parallelism):
       কনকারেন্সি: একাধিক কাজ একসাথে শুরু হয়, চলমান থাকে এবং শেষ হয়। তারা একই সময়ে কাজ নাও করতে পারে, কিন্তু অগ্রগতি হয়। এটি সমস্যা সমাধানের জন্য বিভিন্ন কাজকে একসাথে পরিচালনা করার ক্ষমতা।
       প্যারালালিজম: একাধিক কাজ আক্ষরিক অর্থেই একই সময়ে চালানো হয়, সাধারণত একাধিক CPU কোর ব্যবহার করে।

### ডিবাগিং থ্রেড:

IDE (Integrated Development Environment) যেমন IntelliJ IDEA, Eclipse, বা VS Code ব্যবহার করে জাভাতে থ্রেড ডিবাগ করা তুলনামূলকভাবে সহজ।

ডিবাগিং ধাপ (IntelliJ IDEA এর উদাহরণ):

1.  ব্রেকপয়েন্ট সেট করুন: আপনি যে কোডের এক্সিকিউশন বন্ধ করতে চান, সেই লাইনের বাম মার্জিনে ক্লিক করে ব্রেকপয়েন্ট সেট করুন। যেমন, `MyRunnable` এর `run()` মেথডের ভিতরে `System.out.println` লাইনগুলিতে ব্রেকপয়েন্ট দিন।
2.  ডিবাগ মোডে চালান: আপনার `ThreadCreationExample` ক্লাসে রাইট ক্লিক করে "Debug 'ThreadCreationExample.main()'" অপশনটি নির্বাচন করুন।
3.  ডিবাগারের ব্যবহার:
       থ্রেড উইন্ডো: ডিবাগার চালু হওয়ার পর, সাধারণত একটি "Threads" উইন্ডো বা ট্যাব থাকে। এখানে আপনি প্রোগ্রামের সমস্ত সক্রিয় থ্রেড দেখতে পাবেন (যেমন `main`, `Thread-1 (Forward)`, `Thread-2 (Reverse)`, এবং JVM এর নিজস্ব কিছু থ্রেড)।
       প্রতিটি থ্রেড দেখুন: আপনি "Threads" উইন্ডোতে প্রতিটি থ্রেডে ক্লিক করে তার স্ট্যাক ট্রেস (কোন মেথড থেকে কোন মেথড কল হয়েছে) এবং বর্তমান ভেরিয়েবলের মান দেখতে পারবেন।
       স্টেপ ওভার (Step Over - F8): বর্তমান লাইন এক্সিকিউট করে পরের লাইনে যায়।
       স্টেপ ইনটু (Step Into - F7): যদি বর্তমান লাইনে একটি মেথড কল থাকে, তাহলে সেই মেথডের ভিতরে প্রবেশ করে।
       রেজিউম প্রোগ্রাম (Resume Program - F9): পরবর্তী ব্রেকপয়েন্ট পর্যন্ত এক্সিকিউশন চালিয়ে যায়।
       ভেরিয়েবল উইন্ডো: এই উইন্ডোতে আপনি বর্তমান স্কোপের সমস্ত ভেরিয়েবলের মান দেখতে পারবেন, যা থ্রেডের ভিতরের স্টেট বোঝার জন্য সহায়ক।

ডিবাগিং টিপস:

   কনকারেন্সি সমস্যা: থ্রেড ডিবাগিংয়ে সবচেয়ে চ্যালেঞ্জিং অংশ হলো কনকারেন্সি সমস্যা (যেমন রেস কন্ডিশন, ডেডলক) খুঁজে বের করা। এই সমস্যাগুলো ডিটারমিনিস্টিক নয়, অর্থাৎ একই কোড বারবার চালালে একই সমস্যা নাও দেখাতে পারে।
   লগিং (Logging): ডিবাগিংয়ের সময় `System.out.println()` এর পরিবর্তে `java.util.logging` বা Log4j এর মতো সঠিক লগিং ফ্রেমওয়ার্ক ব্যবহার করা ভালো। এটি আপনাকে প্রোডাকশন পরিবেশে থ্রেডের আচরণ ট্র্যাক করতে সাহায্য করে।
   ডাম্প থ্রেড (Dump Threads): কঠিন কনকারেন্সি সমস্যা সমাধানের জন্য, আপনি `jstack` ইউটিলিটি ব্যবহার করে বা একটি `kill -3 <PID>` কমান্ড পাঠিয়ে চলমান JVM এর থ্রেড ডাম্প তৈরি করতে পারেন। এই ডাম্পে প্রতিটি থ্রেডের স্ট্যাক ট্রেস এবং তাদের বর্তমান স্টেট (যেমন Waiting, Blocked) দেখানো হয়, যা ডেডলক বা হ্যাং খুঁজে পেতে সহায়ক।
   IDE-এর উন্নত বৈশিষ্ট্য: অনেক IDE তে থ্রেড অ্যানালাইজার বা কনকারেন্সি ভিজ্যুয়ালাইজার থাকে যা থ্রেডগুলির অবস্থা এবং ইন্টারঅ্যাকশন আরও ভালোভাবে বুঝতে সাহায্য করে।

এই উদাহরণটি জাভাতে থ্রেড তৈরি এবং তাদের বেসিক ডিবাগিং সম্পর্কে একটি প্রাথমিক ধারণা দেবে। আরও জটিল থ্রেডিং পরিস্থিতিতে সিঙ্ক্রোনাইজেশন, লক, সেমাফোর ইত্যাদির মতো ধারণাও গুরুত্বপূর্ণ হয়ে ওঠে।























