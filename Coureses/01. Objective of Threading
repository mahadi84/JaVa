Date: 7-July-2025

01. Overview of Thread? কনকারেন্সি (Concurrency) বনাম প্যারালালিজম (Parallelism) |
02. The Objective of Threading in java programming


#####থ্রেডিং ওভারভিউ:

থ্রেড (Thread): একটি প্রোগ্রামের মধ্যে একটি স্বাধীন এক্সিকিউশনের পথ। প্রতিটি জাভা অ্যাপ্লিকেশন অন্তত একটি থ্রেড দিয়ে শুরু হয়, যা "main" থ্রেড নামে পরিচিত।
মাল্টিথ্রেডিং (Multithreading): একটি প্রোগ্রামের মধ্যে একাধিক থ্রেডকে সমান্তরালভাবে চালানো। এটি পারফরম্যান্স বাড়াতে এবং ইউজার ইন্টারফেসকে রেসপন্সিভ রাখতে সাহায্য করে।
JVM থ্রেড শিডিউলার (JVM Thread Scheduler): JVM এর একটি অংশ যা নির্ধারণ করে কোন থ্রেড কখন CPU পাবে এবং কতক্ষণ ধরে চলবে। এর আচরণ সাধারণত অপারেটিং সিস্টেম এবং JVM বাস্তবায়নের উপর নির্ভর করে অনির্দিষ্ট হয়।

#####কনকারেন্সি (Concurrency) বনাম প্যারালালিজম (Parallelism):

কনকারেন্সি: একাধিক কাজ একসাথে শুরু হয়, চলমান থাকে এবং শেষ হয়। তারা একই সময়ে কাজ নাও করতে পারে, কিন্তু অগ্রগতি হয়। এটি সমস্যা সমাধানের জন্য বিভিন্ন কাজকে একসাথে পরিচালনা করার ক্ষমতা।
প্যারালালিজম: একাধিক কাজ আক্ষরিক অর্থেই একই সময়ে চালানো হয়, সাধারণত একাধিক CPU কোর ব্যবহার করে।

##### জাভা প্রোগ্রামিংয়ে থ্রেডিংয়ের মূল উদ্দেশ্যগুলো নিচে আলোচনা করা হলো:

১. পারফরম্যান্স বৃদ্ধি (Increased Performance):
    মাল্টিকোর প্রসেসরের পূর্ণ ব্যবহার: বর্তমানের কম্পিউটারগুলিতে একাধিক কোর (core) থাকে। থ্রেডিং ব্যবহার করে, একটি প্রোগ্রামের বিভিন্ন অংশকে এই বিভিন্ন কোরে একসাথে চালানো যায়, ফলে প্রসেসরের সম্পূর্ণ ক্ষমতা ব্যবহার হয় এবং প্রোগ্রাম দ্রুত কাজ করে।
    সমান্তরাল কার্য সম্পাদন (Parallel Execution): যেসব কাজ স্বাধীনভাবে চালানো যায়, থ্রেডিংয়ের মাধ্যমে সেগুলোকে সমান্তরালভাবে চালানো সম্ভব হয়। যেমন, একটি বড় ডেটা ফাইল প্রক্রিয়াকরণ, নেটওয়ার্ক থেকে ডেটা ডাউনলোড, অথবা ব্যবহারকারীর ইনপুট নেওয়া - এই কাজগুলো একসাথে চালানো যেতে পারে।

২. অ্যাপ্লিকেশনের রেসপন্সিভনেস উন্নত করা (Improved Application Responsiveness):
    ইউজার ইন্টারফেসের (UI) সচলতা: গ্রাফিক্যাল ইউজার ইন্টারফেস (GUI) অ্যাপ্লিকেশনগুলিতে, যদি কোনো দীর্ঘ সময়সাপেক্ষ কাজ (যেমন ফাইল আপলোড, জটিল গণনা) প্রধান থ্রেডে চলে, তাহলে ইউজার ইন্টারফেস "ফ্রিজ" হয়ে যায়। থ্রেডিং ব্যবহার করে এই ধরনের কাজগুলি ব্যাকগ্রাউন্ড থ্রেডে চালানো হয়, ফলে UI সচল থাকে এবং ব্যবহারকারী অ্যাপ্লিকেশনটি স্বাভাবিকভাবে ব্যবহার করতে পারে।
    ব্যাকগ্রাউন্ড অপারেশন: যখন কোনো কাজ অবিলম্বে ফলাফল না দিলেও চলে, তখন সেটি একটি পৃথক থ্রেডে চালানো যেতে পারে। যেমন, একটি সার্ভারে ক্লায়েন্টের অনুরোধ প্রক্রিয়া করা, ডেটাবেসে ডেটা সংরক্ষণ করা।

৩. রিসোর্স ব্যবহার অপ্টিমাইজ করা (Optimized Resource Utilization):
    মেমরি সংরক্ষণ (Memory Saving): একটি প্রোগ্রামের মধ্যে একাধিক থ্রেড একই মেমরি স্পেস শেয়ার করে (যেমন, হিপ মেমরি)। এর ফলে প্রতিটি পৃথক প্রসেসের জন্য আলাদা মেমরি বরাদ্দ করার প্রয়োজন হয় না, যা মেমরি সাশ্রয় করে।
    দ্রুত প্রসঙ্গ পরিবর্তন (Faster Context Switching): প্রসেসের তুলনায় থ্রেডগুলি হালকা হয়, তাই অপারেটিং সিস্টেমের জন্য এক থ্রেড থেকে অন্য থ্রেডে যাওয়া (context switching) দ্রুত হয়, যা সামগ্রিক দক্ষতা বাড়ায়।

৪. প্রোগ্রামের কাঠামো সহজ করা (Simplified Program Structure):
    মডিউলারেটি (Modularity): জটিল অ্যাপ্লিকেশনগুলিকে ছোট ছোট, স্বাধীন থ্রেডে বিভক্ত করা যায়। প্রতিটি থ্রেড একটি নির্দিষ্ট কাজ করে, যা কোডকে আরও মডিউলার এবং পরিচালনা করা সহজ করে তোলে।
    ডিজাইন প্যাটার্নের প্রয়োগ: কনকারেন্সি সম্পর্কিত বিভিন্ন ডিজাইন প্যাটার্ন (যেমন Producer-Consumer, Barrier) থ্রেডিংয়ের মাধ্যমে কার্যকরভাবে বাস্তবায়ন করা যায়।

সংক্ষেপে, জাভা থ্রেডিংয়ের প্রধান উদ্দেশ্য হলো অ্যাপ্লিকেশনগুলির কর্মক্ষমতা, প্রতিক্রিয়াশীলতা এবং রিসোর্স ব্যবহারের ক্ষমতা বৃদ্ধি করা, বিশেষ করে এমন পরিস্থিতিতে যেখানে একাধিক কাজ একই সাথে বা সমান্তরালভাবে চালানোর প্রয়োজন হয়।







-
